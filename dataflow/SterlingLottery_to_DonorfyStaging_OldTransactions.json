{
	"name": "SterlingLottery_to_DonorfyStaging_OldTransactions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SterlingLotteryCSVBlobStorageMembers",
						"type": "DatasetReference"
					},
					"name": "SterlingLotteryInBlobStorage"
				},
				{
					"dataset": {
						"referenceName": "SterlingLotteryCSVBlobStoragePayments",
						"type": "DatasetReference"
					},
					"name": "SterlingLotteryPaymentsInBlobStorage"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSQLImportConstituents",
						"type": "DatasetReference"
					},
					"name": "DonorfyConstituentImportStagingTable"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLImportTransactions",
						"type": "DatasetReference"
					},
					"name": "DonorfyTransactionsImportStagingTable"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLImportTransactionsAdditionalAllocations",
						"type": "DatasetReference"
					},
					"name": "DonorfyTransactionAdditionalAllocationssImportStagingTable"
				}
			],
			"transformations": [
				{
					"name": "derivedConstituentColumns"
				},
				{
					"name": "derivedDateColumn"
				},
				{
					"name": "derivedCampaign"
				},
				{
					"name": "joinPaymentsToIntegrationColumns"
				},
				{
					"name": "derivedTransactionColumns"
				},
				{
					"name": "RowNumber"
				},
				{
					"name": "derivedColumnConstant"
				},
				{
					"name": "filterDonationAmount"
				},
				{
					"name": "derivedTransactionLotteryColumns"
				},
				{
					"name": "derivedTransactionDonationColumns"
				},
				{
					"name": "derivedIntegrationColumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DonorfyTenantCode as string ('ZRTXSIYSU7'),",
				"     IntegrationName as string ('NWAASterlingLottery'),",
				"     ADFPipelineName as string (''),",
				"     ADFPipelineRunId as string (''),",
				"     DonorfyKeyPrefix as string ('SL'),",
				"     DonorfyLotteryPurpose as string ('Lottery Comms'),",
				"     DonorfyLotteryCampaign as string ('Lift Off Lotto'),",
				"     DonorfyLotteryTagCategory as string ('Lottery'),",
				"     DonorfyLotteryActiveTag as string ('Lottery Member'),",
				"     DonorfyLotteryCancelledTag as string ('Cancelled Lottery Member'),",
				"     DonorfyDeceasedReason as string ('Deceased'),",
				"     DonorfyGoneAwayReason as string ('Gone away'),",
				"     DonorfyBankAccount as string ('Co-Op - Main Account'),",
				"     DonorfyLotteryProduct as string ('Lottery Payment'),",
				"     DonorfyFund as string ('Unrestricted'),",
				"     DonorfyDefaultPaymentMethod as string ('Unknown'),",
				"     RunDate as date (currentDate()),",
				"     DonorfyDepartment as string ('Lottery'),",
				"     DonorfyLotteryWinnerTag as string ('Lottery Winner'),",
				"     DonorfyLotterySelfExcludeTag as string ('Lottery Self Exclusion'),",
				"     DonorfyDonationProduct as string ('Donation'),",
				"     DonorfyGADMethod as string ('Written')",
				"}",
				"source(output(",
				"          {Player ID} as string,",
				"          {Client Member ID} as string,",
				"          Title as string,",
				"          FirstName as string,",
				"          Surname as string,",
				"          {Address 1} as string,",
				"          {Address 2} as string,",
				"          {Address 3} as string,",
				"          {Address 4} as string,",
				"          {Town / City} as string,",
				"          County as string,",
				"          Postcode as string,",
				"          Phone as string,",
				"          {E-mail} as string,",
				"          Mobile as string,",
				"          {Date of Birth} as string,",
				"          {Created Date} as string,",
				"          {Member Status} as string,",
				"          {Cancelled Date} as string,",
				"          {Cancelled Reason} as string,",
				"          {Number of Numbers} as string,",
				"          {Active Numbers} as string,",
				"          {Inactive Numbers} as string,",
				"          {Earliest Draw} as string,",
				"          {Current Balance} as string,",
				"          {Total Payments} as string,",
				"          {Total Payments Amount} as string,",
				"          {Total Winnings} as string,",
				"          {Draws Dormant} as string,",
				"          SourceCode as string,",
				"          {Payment Frequency} as string,",
				"          {Payment Method} as string,",
				"          {Cash Round Reference} as string,",
				"          {Payroll Round Reference} as string,",
				"          {Bank Account} as string,",
				"          {Modulus Check} as string,",
				"          {Payment Status} as string,",
				"          Canvasser as string,",
				"          {Supported Charity} as string,",
				"          {Lottery Mail} as string,",
				"          Publicity as string,",
				"          {Un-contactable (Gone Away)} as string,",
				"          {No Cancellation Mail} as string,",
				"          {Donor Number} as string,",
				"          {Last Modified} as string,",
				"          {Receipt Code} as string,",
				"          Deceased as string,",
				"          {Raffle Marketing - All} as string,",
				"          {Organisation Imposed - Email} as string,",
				"          {Direct Communication - Email} as string,",
				"          {Charity Marketing - Email} as string,",
				"          {FPS Registered - Email} as string,",
				"          {TPS Registered - Home Telephone} as string,",
				"          {Organisation Imposed - Home Telephone} as string,",
				"          {Direct Communication - Home Telephone} as string,",
				"          {FPS Registered - Home Telephone} as string,",
				"          {Charity Marketing - Home Telephone} as string,",
				"          {MPS Registered - Letter} as string,",
				"          {FPS Registered - Letter} as string,",
				"          {Direct Communication - Letter} as string,",
				"          {Organisation Imposed - Letter} as string,",
				"          {Charity Marketing - Letter} as string,",
				"          {FPS Registered - Mobile} as string,",
				"          {TPS Registered - Mobile} as string,",
				"          {Direct Communication - Mobile} as string,",
				"          {Charity Marketing - Mobile} as string,",
				"          {Organisation Imposed - Mobile} as string,",
				"          {FPS Registered - SMS} as string,",
				"          {Charity Marketing - SMS} as string,",
				"          {Direct Communication - SMS} as string,",
				"          {Organisation Imposed - SMS} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     moveFiles: ['Input Files','Processed Files'],",
				"     rowUrlColumn: 'FileName',",
				"     wildcardPaths:['Input Files/All Member Export*.csv']) ~> SterlingLotteryInBlobStorage",
				"source(output(",
				"          {Membership ID} as string,",
				"          {Lottery Number} as string,",
				"          {Payment Method} as string,",
				"          {Lottery Payment Amount} as string,",
				"          {Total Payment Amount} as string,",
				"          {Payment Date} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     moveFiles: ['Input Files','Processed Files'],",
				"     wildcardPaths:['Input Files/NWAA - Payment Export*.csv']) ~> SterlingLotteryPaymentsInBlobStorage",
				"derivedCampaign derive(IsActive = case({Un-contactable (Gone Away)}==\"Member is un-contactable\" || Deceased==\"Yes\",0),",
				"          ArchiveReason = case(Deceased==\"Yes\",$DonorfyDeceasedReason,{Un-contactable (Gone Away)}==\"Member is un-contactable\",$DonorfyGoneAwayReason,\"\"),",
				"          DateOfBirthDateType = toDate({Date of Birth}, \"dd/mm/yyyy\"),",
				"          OkToEmail = case({Charity Marketing - Email}==\"Opt Out\", 0, {Charity Marketing - Email}==\"Opt In\",1),",
				"          OkToMail = case({Charity Marketing - Letter}==\"Opt Out\", 0, {Charity Marketing - Letter}==\"Opt In\",1),",
				"          OKToPhone = case({Charity Marketing - Home Telephone} ==\"Opt Out\", 0, {Charity Marketing - Home Telephone}==\"Opt In\",1),",
				"          OKToSMS = case({Charity Marketing - SMS} ==\"Opt Out\", 0, {Charity Marketing - SMS}==\"Opt In\",1),",
				"          ConstituentType = \"Individual\",",
				"          DateAdded = $RunDate) ~> derivedConstituentColumns",
				"derivedIntegrationColumns derive(CreatedDateDateType = toDate({Created Date},\"dd/mm/yyyy\")) ~> derivedDateColumn",
				"derivedDateColumn derive(Campaign = case(year(CreatedDateDateType)<=2017,\"Lottery Income - Historic\",\r",
				"SourceCode==\"LOTENG\",\"Lottery Income - Tower Sign Up\",\r",
				"SourceCode==\"LOTGEN\" ||SourceCode==\"Unknown\",\"Lottery Income - Tower Sign Up\",\r",
				"SourceCode==\"WEB\",\"Lottery Income - Web Sign Up\",\r",
				"SourceCode==\"LOTRAP\",\"Lottery Income - Web Sign Up\",\r",
				"SourceCode==\"LOTPAP\",\"Lottery Income - Paper Sign Up\",\r",
				"SourceCode==\"Unity4 Acquisition\",\"Lottery Income - UN4 Sign Up\",\r",
				"\"Lottery Income - Tower Sign Up\")) ~> derivedCampaign",
				"RowNumber, derivedCampaign join({Membership ID} == {Player ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPaymentsToIntegrationColumns",
				"joinPaymentsToIntegrationColumns derive(PaymentMethod = case (SterlingLotteryPaymentsInBlobStorage@{Payment Method}==\"Cash\",\"Cash\",\r",
				"SterlingLotteryPaymentsInBlobStorage@{Payment Method}==\"Cheque\",\"Cheque\",\r",
				"SterlingLotteryPaymentsInBlobStorage@{Payment Method}==\"Direct Debit\",\"Direct Debit via Sterling\",\r",
				"SterlingLotteryPaymentsInBlobStorage@{Payment Method}==\"Standing Order\",\"Standing Order via Sterling\",\r",
				"$DonorfyDefaultPaymentMethod),",
				"          BankAccount = $DonorfyBankAccount,",
				"          Fund = $DonorfyFund,",
				"          DateOfTransaction = case(isDate({Payment Date},'dd/MM/yyyy'),toDate({Payment Date},'dd/MM/yyyy'),currentDate()),",
				"          Department = $DonorfyDepartment) ~> derivedTransactionColumns",
				"derivedColumnConstant window(asc(ConstantOne, true),",
				"     RowNumber = rowNumber()) ~> RowNumber",
				"SterlingLotteryPaymentsInBlobStorage derive(ConstantOne = 1) ~> derivedColumnConstant",
				"derivedTransactionColumns filter(toDecimal({Total Payment Amount}) > toDecimal({Lottery Payment Amount})) ~> filterDonationAmount",
				"derivedTransactionColumns derive(Product = $DonorfyLotteryProduct,",
				"          Amount = {Lottery Payment Amount}) ~> derivedTransactionLotteryColumns",
				"filterDonationAmount derive(AllocationProduct = $DonorfyDonationProduct,",
				"          AllocationAmount = toDecimal({Total Payment Amount}) - toDecimal({Lottery Payment Amount})) ~> derivedTransactionDonationColumns",
				"SterlingLotteryInBlobStorage derive(TenantCode = $DonorfyTenantCode,",
				"          IntegrationName = $IntegrationName,",
				"          ADFPipelineName = $ADFPipelineName,",
				"          ADFPipelineRunId = $ADFPipelineRunId,",
				"          IntegrationSourceConstituentKey = concat($DonorfyKeyPrefix,{Player ID}),",
				"          ProcessedRecord = 0) ~> derivedIntegrationColumns",
				"derivedConstituentColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ConstituentsImportId as integer,",
				"          TenantCode as string,",
				"          IntegrationName as string,",
				"          ADFPipelineName as string,",
				"          ADFPipelineRunId as string,",
				"          IntegrationSourceConstituentKey as string,",
				"          ProcessedRecord as boolean,",
				"          IsActive as boolean,",
				"          ArchiveReason as string,",
				"          ArchiveDate as date,",
				"          ExternalKey as string,",
				"          Title as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          Formerly as string,",
				"          HouseBuildingNumber as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Town as string,",
				"          County as string,",
				"          Postcode as string,",
				"          Country as string,",
				"          Area as string,",
				"          PhoneNumber as string,",
				"          OtherPhoneNumber as string,",
				"          MobilePhoneNumber as string,",
				"          NationalIDNumber as string,",
				"          EmailAddress1 as string,",
				"          EmailAddress2 as string,",
				"          LabelName as string,",
				"          Salutation as string,",
				"          Work_HouseBuildingNumber as string,",
				"          Work_Address1 as string,",
				"          Work_Address2 as string,",
				"          Work_Town as string,",
				"          Work_County as string,",
				"          Work_Postcode as string,",
				"          Work_Country as string,",
				"          Work_Area as string,",
				"          Work_PhoneNumber as string,",
				"          Work_OtherPhoneNumber as string,",
				"          Work_MobilePhoneNumber as string,",
				"          Work_EmailAddress1 as string,",
				"          Work_EmailAddress2 as string,",
				"          Work_LabelName as string,",
				"          Work_Salutation as string,",
				"          WebSite as string,",
				"          RecruitmentCampaign as string,",
				"          DateOfBirth as date,",
				"          YearOfBirth as integer,",
				"          OrganisationName as string,",
				"          JobTitle as string,",
				"          Department as string,",
				"          Gender as string,",
				"          ConstituentType as string,",
				"          Comments as string,",
				"          OKToMail as boolean,",
				"          OKToPhone as boolean,",
				"          OKToSMS as boolean,",
				"          OKToEmail as boolean,",
				"          AllowNameSwap as boolean,",
				"          HasGAD as boolean,",
				"          GiftAidNumber as integer,",
				"          GADDecDate as date,",
				"          DeclarationMethod as string,",
				"          GADStartDate as date,",
				"          GADEndDate as date,",
				"          GADCancelled as boolean,",
				"          GADCancelDate as date,",
				"          TaxPayerTitle as string,",
				"          TaxPayerFirstName as string,",
				"          TaxPayerLastName as string,",
				"          RefusedGAD as boolean,",
				"          IncludeRow as boolean,",
				"          IsGroupConstituent as boolean,",
				"          FK_TenantId as string,",
				"          ConstituentId as string,",
				"          GiftAidDecId as string,",
				"          TagId as string,",
				"          IsGroup as boolean,",
				"          PersonalContactDetailsId as string,",
				"          WorkContactDetailsId as string,",
				"          OtherContactDetailsId as string,",
				"          FK_ConstituentTypeId as string,",
				"          FK_RecruitmentCampaign as string,",
				"          FK_CountryId as string,",
				"          FK_ArchiveReasonId as string,",
				"          FK_DeclarationMethod as string,",
				"          FK_WorkCountryId as string,",
				"          MainContactConstituentId as string,",
				"          MainContactPersonalContactDetailsId as string,",
				"          MainContactWorkContactDetailsId as string,",
				"          MainContactOtherContactDetailsId as string,",
				"          MainContactFK_ConstituentTypeId as string,",
				"          ConstituentNumber as long,",
				"          FK_Area_Id as string,",
				"          FK_Work_Area_Id as string,",
				"          MatchScore as integer,",
				"          HowIntegrated as string,",
				"          FileName as string,",
				"          DateAdded as timestamp,",
				"          ErrorMessage as string,",
				"          OriginalConstituentsImportId as integer,",
				"          RetryAttempts as integer,",
				"          OrderNumber as integer,",
				"          SuccessfullyReprocessed as boolean,",
				"          MatchAttempted as boolean,",
				"          OrderId as long,",
				"          Operation as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          TenantCode,",
				"          IntegrationName,",
				"          ADFPipelineName,",
				"          ADFPipelineRunId,",
				"          IntegrationSourceConstituentKey,",
				"          ProcessedRecord,",
				"          Title,",
				"          FirstName,",
				"          LastName = Surname,",
				"          HouseBuildingNumber = {Address 1},",
				"          Address1 = {Address 2},",
				"          Address2 = {Address 3},",
				"          Town = {Town / City},",
				"          County,",
				"          Postcode,",
				"          EmailAddress1 = {E-mail},",
				"          MobilePhoneNumber = Mobile,",
				"          IsActive,",
				"          ArchiveReason,",
				"          OKToEmail = OkToEmail,",
				"          OKToMail = OkToMail,",
				"          OKToPhone,",
				"          OKToSMS,",
				"          RecruitmentCampaign = Campaign,",
				"          DateOfBirth = DateOfBirthDateType,",
				"          ConstituentType,",
				"          FileName,",
				"          DateAdded",
				"     )) ~> DonorfyConstituentImportStagingTable",
				"derivedTransactionLotteryColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          TransactionsImportId as integer,",
				"          TenantCode as string,",
				"          IntegrationName as string,",
				"          ADFPipelineName as string,",
				"          ADFPipelineRunId as string,",
				"          IntegrationSourceConstituentKey as string,",
				"          ProcessedRecord as boolean,",
				"          TransactionNumber1 as integer,",
				"          TransactionNumber2 as integer,",
				"          ExternalKey as string,",
				"          GiftAidFlag as string,",
				"          Campaign as string,",
				"          DateOfTransaction as date,",
				"          Amount as decimal(19,4),",
				"          Product as string,",
				"          PaymentMethod as string,",
				"          BankAccount as string,",
				"          Fund as string,",
				"          Currency as string,",
				"          Reference as string,",
				"          Comments as string,",
				"          SegmentCode as string,",
				"          Channel as string,",
				"          ConnectedConstituentExternalKey as string,",
				"          BeneficiaryConstituentExternalKey as string,",
				"          ConstituentId as string,",
				"          TransactionId1 as string,",
				"          TransactionId2 as string,",
				"          FK_PaymentMethod as string,",
				"          FK_BankAccount as string,",
				"          FK_Product as string,",
				"          FK_Fund as string,",
				"          FK_Currency as string,",
				"          FK_Campaign as string,",
				"          FK_TenantId as string,",
				"          FK_ChannelId as string,",
				"          ConnectedConstituentConstituentId as string,",
				"          BeneficiaryConstituentConstituentId as string,",
				"          Quantity as decimal(9,2),",
				"          FileName as string,",
				"          ProcessingCostsAmount as decimal(19,4),",
				"          ErrorMessage as string,",
				"          Department as string,",
				"          PayoutReference as string,",
				"          IntegrationSourceTransactionKey as string,",
				"          CanRecoverTax as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          TenantCode,",
				"          IntegrationName,",
				"          ADFPipelineName,",
				"          ADFPipelineRunId,",
				"          IntegrationSourceConstituentKey,",
				"          ProcessedRecord,",
				"          Amount,",
				"          Product,",
				"          PaymentMethod,",
				"          Fund,",
				"          Campaign,",
				"          BankAccount,",
				"          Department,",
				"          FileName,",
				"          DateOfTransaction,",
				"          IntegrationSourceTransactionKey = RowNumber",
				"     )) ~> DonorfyTransactionsImportStagingTable",
				"derivedTransactionDonationColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          TransactionAllocationsImportId as integer,",
				"          TenantCode as string,",
				"          IntegrationName as string,",
				"          ADFPipelineName as string,",
				"          ADFPipelineRunId as string,",
				"          IntegrationSourceConstituentKey as string,",
				"          ProcessedRecord as boolean,",
				"          FK_TransactionsImportId as integer,",
				"          Amount as decimal(19,4),",
				"          Product as string,",
				"          Quantity as decimal(9,2),",
				"          Fund as string,",
				"          Department as string,",
				"          AllocationDate as date,",
				"          GiftAidFlag as string,",
				"          Comments as string,",
				"          BeneficiaryConstituentExternalKey as string,",
				"          BeneficiaryConstituentConstituentId as string,",
				"          ExternalKey as string,",
				"          FK_Product as string,",
				"          FK_Fund as string,",
				"          FK_DepartmentId as string,",
				"          FK_Currency as string,",
				"          FK_TenantId as string,",
				"          IntegrationSourceTransactionKey as string,",
				"          CanRecoverTax as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          TenantCode,",
				"          IntegrationName,",
				"          ADFPipelineName,",
				"          ADFPipelineRunId,",
				"          IntegrationSourceConstituentKey,",
				"          ProcessedRecord,",
				"          Amount = AllocationAmount,",
				"          Product = AllocationProduct,",
				"          Fund,",
				"          Department,",
				"          AllocationDate = DateOfTransaction,",
				"          IntegrationSourceTransactionKey = RowNumber",
				"     )) ~> DonorfyTransactionAdditionalAllocationssImportStagingTable"
			]
		}
	}
}