{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "NWAA-DATA-FACTORY"
		},
		"DonorfyIngegrationAzureFunction_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'DonorfyIngegrationAzureFunction'"
		},
		"IntegrationWorkingFilesAzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IntegrationWorkingFilesAzureBlobStorage'"
		},
		"NWAAAzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'NWAAAzureSqlDatabase'"
		},
		"DonorfyIngegrationAzureFunction_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://nwaadonorfyintegrationhubfunctions.azurewebsites.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DonorfyIntegrationsMatchConstituentsToDonorfy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Initial Unprocessed Record Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If KeyStorageType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) AS UnmatchedRecordCount\nFROM integration.Import_Constituents\nWHERE ISNULL(MatchAttempted,0) = 0\nAND ConstituentId IS NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Initial UnprocessedRecordCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Initial Unprocessed Record Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "UnprocessedRecords",
							"value": {
								"value": "@string(activity('Get Initial Unprocessed Record Count').output.firstRow.UnmatchedRecordCount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until All Processed",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set Initial UnprocessedRecordCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('UnprocessedRecords'),'0')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Unprocessed Records",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(variables('UnprocessedRecords'),'0'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Get Unprocessed Record Count",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Azure Function Match To Donorfy",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT COUNT(*) AS UnmatchedRecordCount\nFROM integration.Import_Constituents\nWHERE ISNULL(MatchAttempted,0) = 0\nAND ConstituentId IS NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSQLImportConstituents",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Unprocessed Record Count",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "@string(activity('Get Unprocessed Record Count').output.firstRow.UnmatchedRecordCount)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount to 0 On Failure",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Azure Function Match To Donorfy",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "0",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Azure Function Match To Donorfy",
												"type": "AzureFunctionActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"functionName": "MatchConstituents",
													"body": {
														"value": "{\"RunId\": \"@{pipeline().parameters.CallingPipelineRunId}\",\n\"ADFPipelineName\" : \"@{pipeline().parameters.CallingPipelineName}\",\n\"IntegrationName\" : \"@{pipeline().parameters.IntegrationName}\",\n\"DonorfyAPIKey\" : \"@{pipeline().parameters.TenantCode}\",\n\"DonorfyAPIAccessKey\" : \"@{pipeline().parameters.APIAccessKey}\",\n\"DonorfyAPIUsername\" : \"@{pipeline().parameters.APIUserName}\",\n\"BreakBeforeTimeoutSeconds\" : \"230\"\n}",
														"type": "Expression"
													},
													"headers": {},
													"method": "POST"
												},
												"linkedServiceName": {
													"referenceName": "DonorfyIngegrationAzureFunction",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Match Via Donorfy Duplicate Check",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Until All Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[MatchConstituentsViaAPIDupCheck]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().parameters.CallingPipelineName",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().parameters.CallingPipelineRunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "If KeyStorageType",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.DonorfyKeyStorageType,'ConstituentNumber')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Match Via Social Media",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[integration].[MatchConstituentsViaSocialMediaID]",
										"storedProcedureParameters": {
											"ADFPipelineName": {
												"value": {
													"value": "@pipeline().parameters.CallingPipelineName",
													"type": "Expression"
												},
												"type": "String"
											},
											"ADFPipelineRunId": {
												"value": {
													"value": "@pipeline().parameters.CallingPipelineRunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IntegrationName": {
												"value": {
													"value": "@pipeline().parameters.IntegrationName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TenantCode": {
												"value": {
													"value": "@pipeline().parameters.TenantCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"SocialMediaName": {
												"value": {
													"value": "@pipeline().parameters.DonorfyKeyStorageLocation",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "NWAAAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Match Via ConstituentNumber",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[integration].[MatchConstituentsViaConstituentNumber]",
										"storedProcedureParameters": {
											"ADFPipelineName": {
												"value": {
													"value": "@pipeline().parameters.CallingPipelineName",
													"type": "Expression"
												},
												"type": "String"
											},
											"ADFPipelineRunId": {
												"value": {
													"value": "@pipeline().parameters.CallingPipelineRunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IntegrationName": {
												"value": {
													"value": "@pipeline().parameters.IntegrationName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TenantCode": {
												"value": {
													"value": "@pipeline().parameters.TenantCode",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "NWAAAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"APIUserName": {
						"type": "string",
						"defaultValue": "Mast Azure Data Factory"
					},
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"CallingPipelineName": {
						"type": "string",
						"defaultValue": "SterlingLotteryToDonorfy"
					},
					"CallingPipelineRunId": {
						"type": "string",
						"defaultValue": "761F4E5D-FF18-4727-BA76-EBFFDDAF97CC"
					},
					"APIAccessKey": {
						"type": "string",
						"defaultValue": "-_7S_3Wy8U@6?snX@x5Q08u?N"
					},
					"DonorfyKeyStorageLocation": {
						"type": "string",
						"defaultValue": "Sterling Lottery"
					},
					"DonorfyKeyStorageType": {
						"type": "string",
						"defaultValue": "SocialMedia"
					}
				},
				"variables": {
					"UnprocessedRecords": {
						"type": "String",
						"defaultValue": "0"
					},
					"IsAllProcessed": {
						"type": "Boolean"
					},
					"DoAzureFunction": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "Mast Donorfy Integration Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-28T20:07:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportConstituents')]",
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/DonorfyIngegrationAzureFunction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessAllActivityRecords')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Initial Unprocessed Record Count",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM integration.Import_Activities\nWHERE ProcessedRecord = 0\nAND ConstituentId IS NOT NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Initial UnprocessedRecordCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Initial Unprocessed Record Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "UnprocessedRecords",
							"value": {
								"value": "@string(activity('Get Initial Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until All Processed",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set Initial UnprocessedRecordCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('UnprocessedRecords'),'0')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Unprocessed Records",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(variables('UnprocessedRecords'),'0'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Get Unprocessed Record Count",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Azure Function Activity Load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM integration.Import_Activities\nWHERE ProcessedRecord = 0\nAND ConstituentId IS NOT NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSQLImportConstituents",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Unprocessed Record Count",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "@string(activity('Get Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount to 0 On Failure",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Azure Function Activity Load",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "0",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Azure Function Activity Load",
												"type": "AzureFunctionActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 60,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"functionName": "LoadDonorfyActivities",
													"body": {
														"value": "{\"RunId\": \"@{pipeline().parameters.CallingPipelineRunId}\",\n\"PipelineName\" : \"@{pipeline().parameters.CallingPipelineName}\",\n\"IntegrationName\" : \"@{pipeline().parameters.IntegrationName}\",\n\"DonorfyAPIKey\" : \"@{pipeline().parameters.TenantCode}\",\n\"DonorfyAPIAccessKey\" : \"@{pipeline().parameters.APIAccessKey}\",\n\"DonorfyAPIUsername\" : \"@{pipeline().parameters.APIUserName}\",\n\"BreakBeforeTimeoutSeconds\" : \"230\"\n}",
														"type": "Expression"
													},
													"headers": {},
													"method": "POST"
												},
												"linkedServiceName": {
													"referenceName": "DonorfyIngegrationAzureFunction",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"APIUserName": {
						"type": "string",
						"defaultValue": "Mast Azure Data Factory"
					},
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"CallingPipelineName": {
						"type": "string",
						"defaultValue": "SterlingLotteryToDonorfy"
					},
					"CallingPipelineRunId": {
						"type": "string",
						"defaultValue": "7c3716f6-896d-4190-bff0-4ae4dd63afda"
					},
					"APIAccessKey": {
						"type": "string",
						"defaultValue": "-_7S_3Wy8U@6?snX@x5Q08u?N"
					}
				},
				"variables": {
					"UnprocessedRecords": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-05T13:53:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportConstituents')]",
				"[concat(variables('factoryId'), '/linkedServices/DonorfyIngegrationAzureFunction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessAllConstituentRecords')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Initial Unprocessed Record Count",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM [integration].Import_Constituents\nWHERE ProcessedRecord = 0\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Initial UnprocessedRecordCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Initial Unprocessed Record Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "UnprocessedRecords",
							"value": {
								"value": "@string(activity('Get Initial Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until All Processed",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set Initial UnprocessedRecordCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('UnprocessedRecords'),'0')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Unprocessed Records",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(variables('UnprocessedRecords'),'0'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Get Unprocessed Record Count",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Azure Function Constituent Load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM [integration].Import_Constituents\nWHERE ProcessedRecord = 0\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSQLImportConstituents",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Unprocessed Record Count",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "@string(activity('Get Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount to 0 On Failure",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Azure Function Constituent Load",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "0",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Azure Function Constituent Load",
												"type": "AzureFunctionActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 60,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"functionName": "LoadDonorfyConstituents",
													"body": {
														"value": "{\"RunId\": \"@{pipeline().parameters.CallingPipelineRunId}\",\n\"PipelineName\" : \"@{pipeline().parameters.CallingPipelineName}\",\n\"IntegrationName\" : \"@{pipeline().parameters.IntegrationName}\",\n\"DonorfyAPIKey\" : \"@{pipeline().parameters.TenantCode}\",\n\"DonorfyAPIAccessKey\" : \"@{pipeline().parameters.APIAccessKey}\",\n\"DonorfyAPIUsername\" : \"@{pipeline().parameters.APIUserName}\",\n\"DonorfyKeyStorageType\" : \"@{pipeline().parameters.DonorfyKeyStorageType}\",\n\"DonorfyKeyStorageLocation\" : \"@{pipeline().parameters.DonorfyKeyStorageLocation}\",\n\"BreakBeforeTimeoutSeconds\" : \"200\"\n}",
														"type": "Expression"
													},
													"headers": {},
													"method": "POST"
												},
												"linkedServiceName": {
													"referenceName": "DonorfyIngegrationAzureFunction",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"APIUserName": {
						"type": "string",
						"defaultValue": "Mast Azure Data Factory"
					},
					"DonorfyKeyStorageType": {
						"type": "string",
						"defaultValue": "SocialMedia"
					},
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"CallingPipelineName": {
						"type": "string",
						"defaultValue": "SterlingLotteryToDonorfy"
					},
					"CallingPipelineRunId": {
						"type": "string",
						"defaultValue": "7c3716f6-896d-4190-bff0-4ae4dd63afda"
					},
					"DonorfyKeyStorageLocation": {
						"type": "string",
						"defaultValue": "Sterling Lottery"
					},
					"APIAccessKey": {
						"type": "string",
						"defaultValue": "-_7S_3Wy8U@6?snX@x5Q08u?N"
					}
				},
				"variables": {
					"UnprocessedRecords": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-05T13:53:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportConstituents')]",
				"[concat(variables('factoryId'), '/linkedServices/DonorfyIngegrationAzureFunction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessAllGADRecords')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Initial Unprocessed Record Count",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM integration.Import_GiftAidDeclarations\nWHERE ProcessedRecord = 0\nAND ConstituentId IS NOT NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Initial UnprocessedRecordCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Initial Unprocessed Record Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "UnprocessedRecords",
							"value": {
								"value": "@string(activity('Get Initial Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until All Processed",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set Initial UnprocessedRecordCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('UnprocessedRecords'),'0')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Unprocessed Records",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(variables('UnprocessedRecords'),'0'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Get Unprocessed Record Count",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Azure Function Activity Load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM integration.Import_GiftAidDeclarations\nWHERE ProcessedRecord = 0\nAND ConstituentId IS NOT NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSQLImportConstituents",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Unprocessed Record Count",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "@string(activity('Get Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount to 0 On Failure",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Azure Function Activity Load",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "0",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Azure Function Activity Load",
												"type": "AzureFunctionActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 60,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"functionName": "LoadDonorfyGiftAidDeclarations",
													"body": {
														"value": "{\"RunId\": \"@{pipeline().parameters.CallingPipelineRunId}\",\n\"PipelineName\" : \"@{pipeline().parameters.CallingPipelineName}\",\n\"IntegrationName\" : \"@{pipeline().parameters.IntegrationName}\",\n\"DonorfyAPIKey\" : \"@{pipeline().parameters.TenantCode}\",\n\"DonorfyAPIAccessKey\" : \"@{pipeline().parameters.APIAccessKey}\",\n\"DonorfyAPIUsername\" : \"@{pipeline().parameters.APIUserName}\",\n\"BreakBeforeTimeoutSeconds\" : \"230\"\n}",
														"type": "Expression"
													},
													"headers": {},
													"method": "POST"
												},
												"linkedServiceName": {
													"referenceName": "DonorfyIngegrationAzureFunction",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"APIUserName": {
						"type": "string",
						"defaultValue": "Mast Azure Data Factory"
					},
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"CallingPipelineName": {
						"type": "string",
						"defaultValue": "SterlingLotteryToDonorfy"
					},
					"CallingPipelineRunId": {
						"type": "string",
						"defaultValue": "7c3716f6-896d-4190-bff0-4ae4dd63afda"
					},
					"APIAccessKey": {
						"type": "string",
						"defaultValue": "-_7S_3Wy8U@6?snX@x5Q08u?N"
					}
				},
				"variables": {
					"UnprocessedRecords": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-05T13:54:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportConstituents')]",
				"[concat(variables('factoryId'), '/linkedServices/DonorfyIngegrationAzureFunction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessAllTagRecords')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Initial Unprocessed Record Count",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM integration.Import_Tags\nWHERE ProcessedRecord = 0\nAND ConstituentId IS NOT NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Initial UnprocessedRecordCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Initial Unprocessed Record Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "UnprocessedRecords",
							"value": {
								"value": "@string(activity('Get Initial Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until All Processed",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set Initial UnprocessedRecordCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('UnprocessedRecords'),'0')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Unprocessed Records",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(variables('UnprocessedRecords'),'0'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Get Unprocessed Record Count",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Azure Function Tag Load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM Integration.Import_Tags\nWHERE ProcessedRecord = 0\nAND ConstituentId IS NOT NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSQLImportConstituents",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Unprocessed Record Count",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "@string(activity('Get Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount to 0 On Failure",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Azure Function Tag Load",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "0",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Azure Function Tag Load",
												"type": "AzureFunctionActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 60,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"functionName": "LoadDonorfyTags",
													"body": {
														"value": "{\"RunId\": \"@{pipeline().parameters.CallingPipelineRunId}\",\n\"PipelineName\" : \"@{pipeline().parameters.CallingPipelineName}\",\n\"IntegrationName\" : \"@{pipeline().parameters.IntegrationName}\",\n\"DonorfyAPIKey\" : \"@{pipeline().parameters.TenantCode}\",\n\"DonorfyAPIAccessKey\" : \"@{pipeline().parameters.APIAccessKey}\",\n\"DonorfyAPIUsername\" : \"@{pipeline().parameters.APIUserName}\",\n\"BreakBeforeTimeoutSeconds\" : \"230\"\n}",
														"type": "Expression"
													},
													"headers": {},
													"method": "POST"
												},
												"linkedServiceName": {
													"referenceName": "DonorfyIngegrationAzureFunction",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"APIUserName": {
						"type": "string",
						"defaultValue": "Azure Data Factory"
					},
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"CallingPipelineName": {
						"type": "string",
						"defaultValue": "SterlingLotteryToDonorfy"
					},
					"CallingPipelineRunId": {
						"type": "string",
						"defaultValue": "7c3716f6-896d-4190-bff0-4ae4dd63afda"
					},
					"APIAccessKey": {
						"type": "string",
						"defaultValue": "-_7S_3Wy8U@6?snX@x5Q08u?N"
					}
				},
				"variables": {
					"UnprocessedRecords": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-05T13:52:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportConstituents')]",
				"[concat(variables('factoryId'), '/linkedServices/DonorfyIngegrationAzureFunction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessAllTransactionRecords')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Initial Unprocessed Record Count",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM integration.Import_Transactions\nWHERE ProcessedRecord = 0\nAND ConstituentId IS NOT NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Initial UnprocessedRecordCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Initial Unprocessed Record Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "UnprocessedRecords",
							"value": {
								"value": "@string(activity('Get Initial Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until All Processed",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set Initial UnprocessedRecordCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('UnprocessedRecords'),'0')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Unprocessed Records",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(variables('UnprocessedRecords'),'0'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Get Unprocessed Record Count",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Azure Function Transaction Load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT COUNT(*) AS UnprocessedRecordCount\nFROM Integration.Import_Transactions\nWHERE ProcessedRecord = 0\nAND ConstituentId IS NOT NULL\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().parameters.CallingPipelineName}'\nAND ADFPipelineRunId = '@{pipeline().parameters.CallingPipelineRunId}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSQLImportConstituents",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Unprocessed Record Count",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "@string(activity('Get Unprocessed Record Count').output.firstRow.UnprocessedRecordCount)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set UnprocessedRecordCount to 0 On Failure",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Azure Function Transaction Load",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UnprocessedRecords",
													"value": {
														"value": "0",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Azure Function Transaction Load",
												"type": "AzureFunctionActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 60,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"functionName": "LoadDonorfyTransactions",
													"body": {
														"value": "{\"RunId\": \"@{pipeline().parameters.CallingPipelineRunId}\",\n\"PipelineName\" : \"@{pipeline().parameters.CallingPipelineName}\",\n\"IntegrationName\" : \"@{pipeline().parameters.IntegrationName}\",\n\"DonorfyAPIKey\" : \"@{pipeline().parameters.TenantCode}\",\n\"DonorfyAPIAccessKey\" : \"@{pipeline().parameters.APIAccessKey}\",\n\"DonorfyAPIUsername\" : \"@{pipeline().parameters.APIUserName}\",\n\"BreakBeforeTimeoutSeconds\" : \"230\",\n\"DonorfyAdditionalAllocations\" : \"@{pipeline().parameters.AdditionalAllocations}\"\n}",
														"type": "Expression"
													},
													"headers": {},
													"method": "POST"
												},
												"linkedServiceName": {
													"referenceName": "DonorfyIngegrationAzureFunction",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"APIUserName": {
						"type": "string",
						"defaultValue": "Azure Data Factory"
					},
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"CallingPipelineName": {
						"type": "string",
						"defaultValue": "SterlingLotteryToDonorfy"
					},
					"CallingPipelineRunId": {
						"type": "string",
						"defaultValue": "1bc6249c-6991-4c1f-a311-c55b0123079a"
					},
					"APIAccessKey": {
						"type": "string",
						"defaultValue": "-_7S_3Wy8U@6?snX@x5Q08u?N"
					},
					"AdditionalAllocations": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"UnprocessedRecords": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-05-19T11:39:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportConstituents')]",
				"[concat(variables('factoryId'), '/linkedServices/DonorfyIngegrationAzureFunction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunSterlingLotteryToDonorfy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Blob Storage Input Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SterlingLotteryCSVBlobStorageContainer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set AllFilesExist",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata Blob Storage Input Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "AllFilesExist",
							"value": {
								"value": "@and(\nand(\n  greater(\n    indexOf(\n      string(join(activity('Get Metadata Blob Storage Input Files').output.childItems,','))\n      ,'All Member Export'\n    )\n    ,-1\n  ),\n  greater(\n    indexOf(\n      string(join(activity('Get Metadata Blob Storage Input Files').output.childItems,','))\n      ,'Members with giftaid'\n    )\n    ,-1\n  )  \n),\nand(\n  greater(\n    indexOf(\n      string(join(activity('Get Metadata Blob Storage Input Files').output.childItems,','))\n      ,'NWAA - Payment Export'\n    )\n    ,-1\n  ),\n  greater(\n    indexOf(\n      string(join(activity('Get Metadata Blob Storage Input Files').output.childItems,','))\n      ,'Winning Numbers'\n    )\n    ,-1\n  )  \n)\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If All Files Exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set AllFilesExist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('AllFilesExist')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute Send Teams Alert",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendAlertToTeamsChannel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@variables('Subscription')",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@variables('ResourceGroup')",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "Files not ready to process",
											"message": "The integration run did not complete as the files were not in place to process",
											"teamWebhookUrls": {
												"value": "@variables('AlertDestinationWebhooks')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute SterlingLotteryToDonorfy",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SterlingLotteryToDonorfy",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TenantCode": "ZRTXSIYSU7",
											"IntegrationName": "NWAASterlingLottery",
											"ErrorAlertDestinationWebhooks": {
												"value": "@variables('ErrorAlertDestinationWebhooks')",
												"type": "Expression"
											},
											"Subscription": {
												"value": "@variables('Subscription')",
												"type": "Expression"
											},
											"ResourceGroup": {
												"value": "@variables('ResourceGroup')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Send Teams Alert Error",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set CleanedErrorMessage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendAlertToTeamsChannel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@variables('Subscription')",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@variables('ResourceGroup')",
												"type": "Expression"
											},
											"runId": {
												"value": "@activity('Execute SterlingLotteryToDonorfy').output['pipelineRunId']",
												"type": "Expression"
											},
											"name": {
												"value": "@activity('Execute SterlingLotteryToDonorfy').output['pipelineName']",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@activity('Execute SterlingLotteryToDonorfy').ExecutionStartTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('Execute SterlingLotteryToDonorfy').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@variables('CleanedErrorMessage')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('Execute SterlingLotteryToDonorfy').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('Execute SterlingLotteryToDonorfy').Duration",
												"type": "Expression"
											},
											"teamWebhookUrls": {
												"value": "@variables('ErrorAlertDestinationWebhooks')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set ErrorMessage",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute SterlingLotteryToDonorfy",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorMessage",
										"value": {
											"value": "@activity('Execute SterlingLotteryToDonorfy').Error['message']",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set CleanedErrorMessage",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set ErrorMessage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "CleanedErrorMessage",
										"value": {
											"value": "@replace(replace(replace(replace(variables('ErrorMessage'),'{',''),'}',''),'\\\"',''),'\"','')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"AllFilesExist": {
						"type": "Boolean",
						"defaultValue": false
					},
					"ErrorMessage": {
						"type": "String"
					},
					"CleanedErrorMessage": {
						"type": "String"
					},
					"ErrorAlertDestinationWebhooks": {
						"type": "Array",
						"defaultValue": [
							"https://prod-183.westeurope.logic.azure.com:443/workflows/0fb20297f38d4d18ac8f0709b889461a/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=9VQcZgnZyLTJmB867uruebwIH6DcGzw3k0tagj6PAzo"
						]
					},
					"AlertDestinationWebhooks": {
						"type": "Array",
						"defaultValue": [
							"https://prod-183.westeurope.logic.azure.com:443/workflows/0fb20297f38d4d18ac8f0709b889461a/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=9VQcZgnZyLTJmB867uruebwIH6DcGzw3k0tagj6PAzo"
						]
					},
					"Subscription": {
						"type": "String",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"ResourceGroup": {
						"type": "String",
						"defaultValue": "NWAA_DONORFY"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-10T17:26:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStorageContainer')]",
				"[concat(variables('factoryId'), '/pipelines/SendAlertToTeamsChannel')]",
				"[concat(variables('factoryId'), '/pipelines/SterlingLotteryToDonorfy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendAlertToTeamsChannel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachWebhookDestinationURL",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.teamWebhookUrls",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set JSON schema",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "messageBodyJSON",
										"value": {
											"value": "{\n  \"subscription\": \"@{pipeline().parameters.subscription}\",\n  \"resourceGroup\":  \"@{pipeline().parameters.resourceGroup}\",\n  \"DataFactory\":  \"@{pipeline().DataFactory}\",\n  \"runId\": \"@{pipeline().parameters.runId}\",\n  \"name\": \"@{pipeline().parameters.name}\",\n  \"status\": \"@{pipeline().parameters.status}\",\n  \"triggerTime\": \"@{pipeline().parameters.triggerTime}\",\n  \"executionEndTime\": \"@{pipeline().parameters.executionEndTime}\",\n  \"runDuration\":  \"@{pipeline().parameters.runDuration}\",\n  \"message\":  \"@{pipeline().parameters.message}\",\n  \"runLink\": \"@{concat('https://adf.azure.com/en/monitoring/pipelineruns/',pipeline().parameters.runId,'?factory=/subscriptions/',pipeline().parameters.subscription,'/resourceGroups/',pipeline().parameters.resourceGroup,'/providers/Microsoft.DataFactory/factories/',pipeline().DataFactory)}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Invoke Teams Webhook Url",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set JSON schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"url": {
											"value": "@item()",
											"type": "Expression"
										},
										"body": {
											"value": "@variables('messageBodyJSON')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set JSON schema generic message",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Invoke Teams Webhook Url",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "messageCard",
										"value": {
											"value": "{\n  \"subscription\": \"@{pipeline().parameters.subscription}\",\n  \"resourceGroup\":  \"@{pipeline().parameters.resourceGroup}\",\n  \"DataFactory\":  \"@{pipeline().DataFactory}\",\n  \"runId\": \"@{pipeline().parameters.runId}\",\n  \"name\": \"@{pipeline().parameters.name}\",\n  \"status\": \"@{pipeline().parameters.status}\",\n  \"triggerTime\": \"@{pipeline().parameters.triggerTime}\",\n  \"executionEndTime\": \"@{pipeline().parameters.executionEndTime}\",\n  \"runDuration\":  \"@{pipeline().parameters.runDuration}\",\n  \"message\":  \"@{variables('genericErrorMessage')}\",\n  \"runLink\": \"@{concat('https://adf.azure.com/en/monitoring/pipelineruns/',pipeline().parameters.runId,'?factory=/subscriptions/',pipeline().parameters.subscription,'/resourceGroups/',pipeline().parameters.resourceGroup,'/providers/Microsoft.DataFactory/factories/',pipeline().DataFactory)}\"\n}\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Invoke Teams Webhook Url_copy1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set JSON schema generic message",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"url": {
											"value": "@item()",
											"type": "Expression"
										},
										"body": {
											"value": "@json(variables('messageCard'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"subscription": {
						"type": "string",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"resourceGroup": {
						"type": "string",
						"defaultValue": "Donorfy"
					},
					"runId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"triggerTime": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"message": {
						"type": "string",
						"defaultValue": "This is a test message"
					},
					"executionEndTime": {
						"type": "string"
					},
					"runDuration": {
						"type": "string"
					},
					"teamWebhookUrls": {
						"type": "array",
						"defaultValue": [
							"https://prod-183.westeurope.logic.azure.com:443/workflows/0fb20297f38d4d18ac8f0709b889461a/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=9VQcZgnZyLTJmB867uruebwIH6DcGzw3k0tagj6PAzo"
						]
					}
				},
				"variables": {
					"messageCard": {
						"type": "String"
					},
					"genericErrorMessage": {
						"type": "String",
						"defaultValue": "An error has occured running a pipeline.  There was a problem sending the error message. Please look at the pipeline run log for the error details."
					},
					"messageBodyJSON": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-10T10:43:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryToDonorfy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDonorfyLotterySettings",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT lp.[Value] AS DonorfyLotteryPurpose,\n  lc.[Value] AS DonorfyLotteryCampaign,\n  lpr.[Value] AS DonorfyLotteryProduct,\n  kp.[Value] AS DonorfyKeyPrefix,\n  dpr.[Value] AS DonorfyDonationProduct\n  FROM [integration].[IntegrationImportSettings] lp\n  INNER JOIN [integration].[IntegrationImportSettings] lc\n  ON  lc.TenantCode = lp.TenantCode\n  AND lc.IntegrationName = lp.IntegrationName\n  AND lc.[Key] = 'DonorfyLotteryCampaign'\n  INNER JOIN [integration].[IntegrationImportSettings] lpr\n  ON  lpr.TenantCode = lp.TenantCode\n  AND lpr.IntegrationName = lp.IntegrationName\n  AND lpr.[Key] = 'DonorfyLotteryProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] dpr\n  ON  dpr.TenantCode = lp.TenantCode\n  AND dpr.IntegrationName = lp.IntegrationName\n  AND dpr.[Key] = 'DonorfyDonationProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] kp\n  ON  kp.TenantCode = lp.TenantCode\n  AND kp.IntegrationName = lp.IntegrationName\n  AND kp.[Key] = 'DonorfyKeyPrefix'\n  WHERE lp.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND lp.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND lp.[Key] = 'DonorfyLotteryPurpose'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryPurpose",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryPurpose",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryPurpose)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCampaign",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCampaign",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryCampaign)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyLotteryTags",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dltc.[Value] AS DonorfyLotteryTagCategory,\n dat.Value AS DonorfyLotteryActiveTag,\n dct.Value AS DonorfyLotteryCancelledTag,\n dlwt.Value AS DonorfyLotteryWinnerTag,\n dlset.Value AS DonorfyLotterySelfExcludeTag\n  FROM [integration].[IntegrationImportSettings] dltc\n  INNER JOIN [integration].[IntegrationImportSettings] dat \n  ON dat.TenantCode = dltc.TenantCode\n  AND dat.IntegrationName = dltc.IntegrationName\n  AND dat.[Key] = 'DonorfyLotteryActiveTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dct \n  ON dct.TenantCode = dltc.TenantCode\n  AND dct.IntegrationName = dltc.IntegrationName\n  AND dct.[Key] = 'DonorfyLotteryCancelledTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlwt \n  ON dlwt.TenantCode = dltc.TenantCode\n  AND dlwt.IntegrationName = dltc.IntegrationName\n  AND dlwt.[Key] = 'DonorfyLotteryWinnerTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlset \n  ON dlset.TenantCode = dltc.TenantCode\n  AND dlset.IntegrationName = dltc.IntegrationName\n  AND dlset.[Key] = 'DonorfyLotterySelfExcludeTag'\n  WHERE dltc.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dltc.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dltc.[Key] = 'DonorfyLotteryTagCategory'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryTagCategory",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryTagCategory",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryTagCategory)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryActiveTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryActiveTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryActiveTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCancelledTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCancelledTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryCancelledTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyReasons",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ddr.[Value] AS DonorfyDeceasedReason,\n    dgar.[Value] AS DonorfyGoneAwayReason\n  FROM [integration].[IntegrationImportSettings] ddr\n  INNER JOIN [integration].[IntegrationImportSettings] dgar \n  ON dgar.TenantCode = ddr.TenantCode\n  AND dgar.IntegrationName = ddr.IntegrationName\n  AND dgar.[Key] = 'DonorfyGoneAwayReason'\n  WHERE ddr.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ddr.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ddr.[Key] = 'DonorfyDeceasedReason'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyDeceasedReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDeceasedReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyDeceasedReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyGoneAwayReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGoneAwayReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyGoneAwayReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyTransactionDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ba.[Value] AS DonorfyBankAccount,\n    f.[Value] AS DonorfyFund,\n    pm.[Value] As DonorfyDefaultPaymentMethod,\n    dd.[Value] As DonorfyDepartment\n  FROM [integration].[IntegrationImportSettings] ba\n  INNER JOIN [integration].[IntegrationImportSettings] f \n  ON f.TenantCode = ba.TenantCode\n  AND f.IntegrationName = ba.IntegrationName\n  AND f.[Key] = 'DonorfyFund'\n  INNER JOIN [integration].[IntegrationImportSettings] pm \n  ON pm.TenantCode = ba.TenantCode\n  AND pm.IntegrationName = ba.IntegrationName\n  AND pm.[Key] = 'DonorfyDefaultPaymentMethod'\n  INNER JOIN [integration].[IntegrationImportSettings] dd \n  ON dd.TenantCode = ba.TenantCode\n  AND dd.IntegrationName = ba.IntegrationName\n  AND dd.[Key] = 'DonorfyDepartment'\n  WHERE ba.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ba.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ba.[Key] = 'DonorfyBankAccount'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetDonorfyBankAccount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyBankAccount",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyBankAccount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyLotteryProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyFund",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyFund",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyFund)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDefaultPaymentMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDefaultPaymentMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDefaultPaymentMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SterlingLottery_to_DonorfyStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetDonorfyLotteryProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryTagCategory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCampaign",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryPurpose",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryActiveTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCancelledTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyDeceasedReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGoneAwayReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyBankAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyFund",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDefaultPaymentMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyPrefix",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDepartment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryWinnerTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDonationProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGADDeclarationMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SterlingLottery_to_DonorfyStaging",
								"type": "DataFlowReference",
								"parameters": {
									"DonorfyTenantCode": {
										"value": "'@{pipeline().parameters.TenantCode}'",
										"type": "Expression"
									},
									"IntegrationName": {
										"value": "'@{pipeline().parameters.IntegrationName}'",
										"type": "Expression"
									},
									"ADFPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"ADFPipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"DonorfyKeyPrefix": {
										"value": "'@{variables('DonorfyKeyPrefix')}'",
										"type": "Expression"
									},
									"DonorfyLotteryPurpose": {
										"value": "'@{variables('DonorfyLotteryPurpose')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCampaign": {
										"value": "'@{variables('DonorfyLotteryCampaign')}'",
										"type": "Expression"
									},
									"DonorfyLotteryTagCategory": {
										"value": "'@{variables('DonorfyLotteryTagCategory')}'",
										"type": "Expression"
									},
									"DonorfyLotteryActiveTag": {
										"value": "'@{variables('DonorfyLotteryActiveTag')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCancelledTag": {
										"value": "'@{variables('DonorfyLotteryCancelledTag')}'",
										"type": "Expression"
									},
									"DonorfyDeceasedReason": {
										"value": "'@{variables('DonorfyDeceasedReason')}'",
										"type": "Expression"
									},
									"DonorfyGoneAwayReason": {
										"value": "'@{variables('DonorfyGoneAwayReason')}'",
										"type": "Expression"
									},
									"DonorfyBankAccount": {
										"value": "'@{variables('DonorfyBankAccount')}'",
										"type": "Expression"
									},
									"DonorfyLotteryProduct": {
										"value": "'@{variables('DonorfyLotteryProduct')}'",
										"type": "Expression"
									},
									"DonorfyFund": {
										"value": "'@{variables('DonorfyFund')}'",
										"type": "Expression"
									},
									"DonorfyDefaultPaymentMethod": {
										"value": "'@{variables('DonorfyDefaultPaymentMethod')}'",
										"type": "Expression"
									},
									"RunDate": "currentDate()",
									"DonorfyDepartment": {
										"value": "'@{variables('DonorfyDepartment')}'",
										"type": "Expression"
									},
									"DonorfyLotteryWinnerTag": {
										"value": "'@{variables('DonorfyLotteryWinnerTag')}'",
										"type": "Expression"
									},
									"DonorfyLotterySelfExcludeTag": {
										"value": "'@{variables('DonorfyLotterySelfExcludeTag')}'",
										"type": "Expression"
									},
									"DonorfyDonationProduct": {
										"value": "'@{variables('DonorfyDonationProduct')}'",
										"type": "Expression"
									},
									"DonorfyGADMethod": {
										"value": "'@{variables('DonorfyGADDeclarationMethod')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SterlingLotteryInBlobStorage": {},
									"SterlingLotteryWinnersInBlobStorage": {},
									"SterlingLotteryPaymentsInBlobStorage": {},
									"SterlingLotteryGADsInBlobStorage": {},
									"DonorfyConstituentImportStagingTable": {},
									"DonorfyPurposesImportStagingTable": {},
									"DonorfyTagsImportStagingTable": {},
									"DonorfyActivitiesImportStagingTable": {},
									"DonorfyTransactionsImportStagingTable": {},
									"DonorfyWinnerTagsImportStagingTable": {},
									"DonorfySelfExcludeTagsImportStagingTable": {},
									"DonorfyTransactionAdditionalAllocationssImportStagingTable": {},
									"DonorfyGADStagingTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set DonorfyKeyPrefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyPrefix",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyKeyPrefix)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDepartment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDepartment",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDepartment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryWinnerTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryWinnerTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryWinnerTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotterySelfExcludeTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotterySelfExcludeTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Process Match Constituents to Donorfy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageLocation",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIAccessKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DonorfyIntegrationsMatchConstituentsToDonorfy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								},
								"DonorfyKeyStorageLocation": {
									"value": "@variables('DonorfyKeyStorageLocation')",
									"type": "Expression"
								},
								"DonorfyKeyStorageType": {
									"value": "@variables('DonorfyKeyStorageType')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LookupDonorfyKeyStorage",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dkst.[Value] AS DonorfyKeyStorageType,\n    dksl.[Value] AS DonorfyKeyStorageLocation\n  FROM [integration].[IntegrationImportSettings] dkst\n  INNER JOIN [integration].[IntegrationImportSettings] dksl\n  ON dksl.TenantCode = dkst.TenantCode\n  AND dksl.IntegrationName = dkst.IntegrationName\n  AND dksl.[Key] = 'DonorfyKeyStorageLocation'\n  WHERE dkst.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dkst.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dkst.[Key] = 'DonorfyKeyStorageType'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageType",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageLocation",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageLocation",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageLocation)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupAPIDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT un.[Value] AS APIUserName, ak.[Value] as APIAccessKey\n  FROM [integration].[IntegrationImportSettings] un\n  INNER JOIN [integration].[IntegrationImportSettings] ak\n  ON ak.TenantCode = un.TenantCode\n  AND ak.IntegrationName = un.IntegrationName\n  AND ak.[Key] = 'APIAccessKey'\n  WHERE un.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND un.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND un.[Key] = 'APIUserName'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set APIUserName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIUserName",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIUserName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set APIAccessKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIAccessKey",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIAccessKey)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Last Pipeline Run ID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[integration].[GetLastPipelineRunId]",
								"storedProcedureParameters": {
									"IntegrationName": {
										"value": {
											"value": "@pipeline().parameters.IntegrationName",
											"type": "Expression"
										}
									},
									"TenantCode": {
										"value": {
											"value": "@pipeline().parameters.TenantCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLStoredProcCall",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update Unchanged Import Constituents To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Constiuent Channel Consents Null for Skyline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[DiffImportRunConstituents]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastADFPipelineRunId": {
									"value": {
										"value": "@if(not(equals(activity('Get Last Pipeline Run ID').output.firstRow.Value,'')),activity('Get Last Pipeline Run ID').output.firstRow.Value,'11111111-1111-1111-1111-111111111111')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Unmatched Cancelled Players To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Unchanged Import Constituents To Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[MarkProcessedUnmatchedCancelledPlayers]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryTagCategory": {
									"value": {
										"value": "@variables('DonorfyLotteryTagCategory')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryCancelledTag": {
									"value": {
										"value": "@variables('DonorfyLotteryCancelledTag')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Tags for Deletion",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Unmatched Cancelled Players To Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[AddTagsForDeletion]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryTagCategory": {
									"value": {
										"value": "@variables('DonorfyLotteryTagCategory')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryCancelledTag": {
									"value": {
										"value": "@variables('DonorfyLotteryCancelledTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryActiveTag": {
									"value": {
										"value": "@variables('DonorfyLotteryActiveTag')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Last Pipeline Run Id",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set GAD Processed if Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetLastPipelineRunId]",
							"storedProcedureParameters": {
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Process All Constituent Records",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set Last Pipeline Run Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessAllConstituentRecords",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"DonorfyKeyStorageType": {
									"value": "@variables('DonorfyKeyStorageType')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"DonorfyKeyStorageLocation": {
									"value": "@variables('DonorfyKeyStorageLocation')",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Send Error Teams Message",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendAlertToTeamsChannel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().parameters.Subscription",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().parameters.ResourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "Integration failed while matching Constituents.  ",
								"message": "Integration failed while matching Constituents.  Manual intervention is needed!",
								"teamWebhookUrls": {
									"value": "@pipeline().parameters.ErrorAlertDestinationWebhooks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Write Constituent Log File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Process All Constituent Records",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT *\nFROM [integration].Import_Constituents\nWHERE TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().Pipeline}'\nAND ADFPipelineRunId = '@{pipeline().RunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SterlingLotteryCSVBlobStorageConstituentLogFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Process All Activity Records",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Process All Constituent Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessAllActivityRecords",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Write Activity Log File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Execute Process All Activity Records",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT *\nFROM [integration].Import_Activities\nWHERE TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().Pipeline}'\nAND ADFPipelineRunId = '@{pipeline().RunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SterlingLotteryCSVBlobStorageActivityLogFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Process All Transaction Records",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Process All Constituent Records",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Update Additional Allocation Transactions with FK ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessAllTransactionRecords",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								},
								"AdditionalAllocations": true
							}
						}
					},
					{
						"name": "Execute Process All Tag Records",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Process All Constituent Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessAllTagRecords",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Write Transaction Log File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Execute Process All Transaction Records",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT *\nFROM [integration].Import_Transactions\nWHERE TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().Pipeline}'\nAND ADFPipelineRunId = '@{pipeline().RunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SterlingLotteryCSVBlobStorageTransactionLogFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Write Tag Log File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Execute Process All Tag Records",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT *\nFROM [integration].Import_Tags\nWHERE TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().Pipeline}'\nAND ADFPipelineRunId = '@{pipeline().RunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SterlingLotteryCSVBlobStorageTagLogFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LookupNumberOfRunsToKeep",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [Value] AS NumberOfRunsToKeep\n  FROM [integration].[IntegrationImportSettings]\n  WHERE TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND [Key] = 'NumberOfRunsToKeep'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetNumberOfRunsToKeep",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupNumberOfRunsToKeep",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NumberOfRunsToKeep",
							"value": {
								"value": "@string(activity('LookupNumberOfRunsToKeep').output.firstRow.NumberOfRunsToKeep)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Delete Old Import Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Process All Transaction Records",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetNumberOfRunsToKeep",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[DeleteOldImportData]",
							"storedProcedureParameters": {
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"NumberOfRunsToKeep": {
									"value": {
										"value": "@int(variables('NumberOfRunsToKeep'))",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Constiuent Channel Consents Null for Skyline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Last Pipeline Run ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetImportConstituentChannelConsentsNull]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Additional Allocation Transactions with FK ID",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetAdditionAllocationFKTransactionImportID]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									}
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									}
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									}
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetDonorfyDonationProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDonationProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyDonationProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyGADDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dm.[Value] AS DonorfyGADDeclarationMethod\n  FROM [integration].[IntegrationImportSettings] dm\n  WHERE dm.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dm.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dm.[Key] = 'DonorfyGADDeclarationMethod'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyGADDeclarationMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyGADDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGADDeclarationMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyGADDefaults').output.firstRow.DonorfyGADDeclarationMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupAnyErrors",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Process All Transaction Records",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Execute Process All Activity Records",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Process All Constituent Records",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT (\nSELECT COUNT(*) \nFROM integration.Import_Constituents \nWHERE TRIM(ISNULL(ErrorMessage,'')) != ''\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().Pipeline}'\nAND ADFPipelineRunId = '@{pipeline().RunId}'\n)\n+ \n(\nSELECT COUNT(*) \nFROM integration.Import_Transactions \nWHERE TRIM(ISNULL(ErrorMessage,'')) != ''\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().Pipeline}'\nAND ADFPipelineRunId = '@{pipeline().RunId}'\n)\n+ \n(\nSELECT COUNT(*) \nFROM integration.Import_Activities \nWHERE TRIM(ISNULL(ErrorMessage,'')) != ''\nAND TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().Pipeline}'\nAND ADFPipelineRunId = '@{pipeline().RunId}'\n)\nAS ErrorCount",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Any Errors",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupAnyErrors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupAnyErrors').output.firstRow.ErrorCount, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SendAlertToTeamsChannel",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendAlertToTeamsChannel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().parameters.Subscription",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().parameters.ResourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "Load Completed with Errors",
											"message": "The load of Constituents, Activities or Transactions has completed with errors logged.  Please check the log files for the specific error messages.",
											"teamWebhookUrls": {
												"value": "@pipeline().parameters.ErrorAlertDestinationWebhooks",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set GAD Processed if Exists",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Add Tags for Deletion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetGADProcessedIfExists]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Execute Process All GAD Records",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Process All Constituent Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessAllGADRecords",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Write GAD Log File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Execute Process All GAD Records",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT *\nFROM [integration].Import_GiftAidDeclarations\nWHERE TenantCode = '@{pipeline().parameters.TenantCode}'\nAND IntegrationName = '@{pipeline().parameters.IntegrationName}'\nAND ADFPipelineName = '@{pipeline().Pipeline}'\nAND ADFPipelineRunId = '@{pipeline().RunId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SterlingLotteryCSVBlobStorageGADLogFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"ErrorAlertDestinationWebhooks": {
						"type": "string",
						"defaultValue": [
							"https://mastict.webhook.office.com/webhookb2/fe4903b3-4a31-4a06-a361-e45caa7cbf88@93183a8b-45b8-4208-a95c-26fb477572e5/IncomingWebhook/6f63b1d955bd48eab46d10fa6b66bcaa/a112ca9c-4af6-4af5-a5db-5c8b6f213a31"
						]
					},
					"Subscription": {
						"type": "string",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "NWAA_DONORFY"
					}
				},
				"variables": {
					"DonorfyKeyPrefix": {
						"type": "String"
					},
					"APIUserName": {
						"type": "String"
					},
					"DonorfyKeyStorageType": {
						"type": "String"
					},
					"DonorfyKeyStorageLocation": {
						"type": "String"
					},
					"DonorfyLotteryPurpose": {
						"type": "String"
					},
					"DonorfyLotteryCampaign": {
						"type": "String"
					},
					"DonorfyLotteryTagCategory": {
						"type": "String"
					},
					"DonorfyLotteryActiveTag": {
						"type": "String"
					},
					"DonorfyLotteryCancelledTag": {
						"type": "String"
					},
					"DonorfyDeceasedReason": {
						"type": "String"
					},
					"DonorfyGoneAwayReason": {
						"type": "String"
					},
					"DonorfyBankAccount": {
						"type": "String"
					},
					"DonorfyLotteryProduct": {
						"type": "String"
					},
					"DonorfyFund": {
						"type": "String"
					},
					"DonorfyDefaultPaymentMethod": {
						"type": "String"
					},
					"NumberOfRunsToKeep": {
						"type": "String"
					},
					"APIAccessKey": {
						"type": "String"
					},
					"NumberProcessedEachLoop": {
						"type": "String"
					},
					"DonorfyDepartment": {
						"type": "String"
					},
					"DonorfyLotteryWinnerTag": {
						"type": "String"
					},
					"DonorfyLotterySelfExcludeTag": {
						"type": "String"
					},
					"DonorfyDonationProduct": {
						"type": "String"
					},
					"DonorfyGADDeclarationMethod": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-10T16:37:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIntegrationImportSettings')]",
				"[concat(variables('factoryId'), '/dataflows/SterlingLottery_to_DonorfyStaging')]",
				"[concat(variables('factoryId'), '/pipelines/DonorfyIntegrationsMatchConstituentsToDonorfy')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLStoredProcCall')]",
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessAllConstituentRecords')]",
				"[concat(variables('factoryId'), '/pipelines/SendAlertToTeamsChannel')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportConstituents')]",
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStorageConstituentLogFile')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessAllActivityRecords')]",
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStorageActivityLogFile')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessAllTransactionRecords')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessAllTagRecords')]",
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStorageTransactionLogFile')]",
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStorageTagLogFile')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessAllGADRecords')]",
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStorageGADLogFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryToDonorfy_InitialLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDonorfyLotterySettings",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT lp.[Value] AS DonorfyLotteryPurpose,\n  lc.[Value] AS DonorfyLotteryCampaign,\n  lpr.[Value] AS DonorfyLotteryProduct,\n  kp.[Value] AS DonorfyKeyPrefix\n  FROM [integration].[IntegrationImportSettings] lp\n  INNER JOIN [integration].[IntegrationImportSettings] lc\n  ON  lc.TenantCode = lp.TenantCode\n  AND lc.IntegrationName = lp.IntegrationName\n  AND lc.[Key] = 'DonorfyLotteryCampaign'\n  INNER JOIN [integration].[IntegrationImportSettings] lpr\n  ON  lpr.TenantCode = lp.TenantCode\n  AND lpr.IntegrationName = lp.IntegrationName\n  AND lpr.[Key] = 'DonorfyLotteryProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] kp\n  ON  kp.TenantCode = lp.TenantCode\n  AND kp.IntegrationName = lp.IntegrationName\n  AND kp.[Key] = 'DonorfyKeyPrefix'\n  WHERE lp.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND lp.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND lp.[Key] = 'DonorfyLotteryPurpose'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryPurpose",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryPurpose",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryPurpose)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCampaign",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCampaign",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryCampaign)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyLotteryTags",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dltc.[Value] AS DonorfyLotteryTagCategory,\n dat.Value AS DonorfyLotteryActiveTag,\n dct.Value AS DonorfyLotteryCancelledTag,\n dlwt.Value AS DonorfyLotteryWinnerTag,\n dlset.Value AS DonorfyLotterySelfExcludeTag\n  FROM [integration].[IntegrationImportSettings] dltc\n  INNER JOIN [integration].[IntegrationImportSettings] dat \n  ON dat.TenantCode = dltc.TenantCode\n  AND dat.IntegrationName = dltc.IntegrationName\n  AND dat.[Key] = 'DonorfyLotteryActiveTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dct \n  ON dct.TenantCode = dltc.TenantCode\n  AND dct.IntegrationName = dltc.IntegrationName\n  AND dct.[Key] = 'DonorfyLotteryCancelledTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlwt \n  ON dlwt.TenantCode = dltc.TenantCode\n  AND dlwt.IntegrationName = dltc.IntegrationName\n  AND dlwt.[Key] = 'DonorfyLotteryWinnerTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlset \n  ON dlset.TenantCode = dltc.TenantCode\n  AND dlset.IntegrationName = dltc.IntegrationName\n  AND dlset.[Key] = 'DonorfyLotterySelfExcludeTag'\n  WHERE dltc.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dltc.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dltc.[Key] = 'DonorfyLotteryTagCategory'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryTagCategory",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryTagCategory",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryTagCategory)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryActiveTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryActiveTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryActiveTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCancelledTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCancelledTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryCancelledTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyReasons",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ddr.[Value] AS DonorfyDeceasedReason,\n    dgar.[Value] AS DonorfyGoneAwayReason\n  FROM [integration].[IntegrationImportSettings] ddr\n  INNER JOIN [integration].[IntegrationImportSettings] dgar \n  ON dgar.TenantCode = ddr.TenantCode\n  AND dgar.IntegrationName = ddr.IntegrationName\n  AND dgar.[Key] = 'DonorfyGoneAwayReason'\n  WHERE ddr.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ddr.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ddr.[Key] = 'DonorfyDeceasedReason'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyDeceasedReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDeceasedReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyDeceasedReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyGoneAwayReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGoneAwayReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyGoneAwayReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyTransactionDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ba.[Value] AS DonorfyBankAccount,\n    f.[Value] AS DonorfyFund,\n    pm.[Value] As DonorfyDefaultPaymentMethod,\n    dd.[Value] As DonorfyDepartment\n  FROM [integration].[IntegrationImportSettings] ba\n  INNER JOIN [integration].[IntegrationImportSettings] f \n  ON f.TenantCode = ba.TenantCode\n  AND f.IntegrationName = ba.IntegrationName\n  AND f.[Key] = 'DonorfyFund'\n  INNER JOIN [integration].[IntegrationImportSettings] pm \n  ON pm.TenantCode = ba.TenantCode\n  AND pm.IntegrationName = ba.IntegrationName\n  AND pm.[Key] = 'DonorfyDefaultPaymentMethod'\n  INNER JOIN [integration].[IntegrationImportSettings] dd \n  ON dd.TenantCode = ba.TenantCode\n  AND dd.IntegrationName = ba.IntegrationName\n  AND dd.[Key] = 'DonorfyDepartment'\n  WHERE ba.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ba.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ba.[Key] = 'DonorfyBankAccount'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetDonorfyBankAccount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyBankAccount",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyBankAccount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyLotteryProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyFund",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyFund",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyFund)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDefaultPaymentMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDefaultPaymentMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDefaultPaymentMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SterlingLottery_to_DonorfyStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetDonorfyLotteryProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryTagCategory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCampaign",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryPurpose",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryActiveTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCancelledTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyDeceasedReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGoneAwayReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyBankAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyFund",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDefaultPaymentMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyPrefix",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDepartment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryWinnerTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SterlingLottery_to_DonorfyStaging",
								"type": "DataFlowReference",
								"parameters": {
									"DonorfyTenantCode": {
										"value": "'@{pipeline().parameters.TenantCode}'",
										"type": "Expression"
									},
									"IntegrationName": {
										"value": "'@{pipeline().parameters.IntegrationName}'",
										"type": "Expression"
									},
									"ADFPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"ADFPipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"DonorfyKeyPrefix": {
										"value": "'@{variables('DonorfyKeyPrefix')}'",
										"type": "Expression"
									},
									"DonorfyLotteryPurpose": {
										"value": "'@{variables('DonorfyLotteryPurpose')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCampaign": {
										"value": "'@{variables('DonorfyLotteryCampaign')}'",
										"type": "Expression"
									},
									"DonorfyLotteryTagCategory": {
										"value": "'@{variables('DonorfyLotteryTagCategory')}'",
										"type": "Expression"
									},
									"DonorfyLotteryActiveTag": {
										"value": "'@{variables('DonorfyLotteryActiveTag')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCancelledTag": {
										"value": "'@{variables('DonorfyLotteryCancelledTag')}'",
										"type": "Expression"
									},
									"DonorfyDeceasedReason": {
										"value": "'@{variables('DonorfyDeceasedReason')}'",
										"type": "Expression"
									},
									"DonorfyGoneAwayReason": {
										"value": "'@{variables('DonorfyGoneAwayReason')}'",
										"type": "Expression"
									},
									"DonorfyBankAccount": {
										"value": "'@{variables('DonorfyBankAccount')}'",
										"type": "Expression"
									},
									"DonorfyLotteryProduct": {
										"value": "'@{variables('DonorfyLotteryProduct')}'",
										"type": "Expression"
									},
									"DonorfyFund": {
										"value": "'@{variables('DonorfyFund')}'",
										"type": "Expression"
									},
									"DonorfyDefaultPaymentMethod": {
										"value": "'@{variables('DonorfyDefaultPaymentMethod')}'",
										"type": "Expression"
									},
									"RunDate": "currentDate()",
									"DonorfyDepartment": {
										"value": "'@{variables('DonorfyDepartment')}'",
										"type": "Expression"
									},
									"DonorfyLotteryWinnerTag": {
										"value": "'@{variables('DonorfyLotteryWinnerTag')}'",
										"type": "Expression"
									},
									"DonorfyLotterySelfExcludeTag": {
										"value": "'@{variables('DonorfyLotterySelfExcludeTag')}'",
										"type": "Expression"
									},
									"DonorfyDonationProduct": "'Donation'"
								},
								"datasetParameters": {
									"SterlingLotteryInBlobStorage": {},
									"SterlingLotteryWinnersInBlobStorage": {},
									"SterlingLotteryPaymentsInBlobStorage": {},
									"SterlingLotteryGADsInBlobStorage": {},
									"DonorfyConstituentImportStagingTable": {},
									"DonorfyPurposesImportStagingTable": {},
									"DonorfyTagsImportStagingTable": {},
									"DonorfyActivitiesImportStagingTable": {},
									"DonorfyTransactionsImportStagingTable": {},
									"DonorfyWinnerTagsImportStagingTable": {},
									"DonorfySelfExcludeTagsImportStagingTable": {},
									"DonorfyTransactionAdditionalAllocationssImportStagingTable": {},
									"DonorfyGADStagingTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set DonorfyKeyPrefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyPrefix",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyKeyPrefix)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDepartment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDepartment",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDepartment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryWinnerTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryWinnerTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryWinnerTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotterySelfExcludeTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotterySelfExcludeTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Process Match Constituents to Donorfy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageLocation",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIAccessKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DonorfyIntegrationsMatchConstituentsToDonorfy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								},
								"DonorfyKeyStorageLocation": {
									"value": "@variables('DonorfyKeyStorageLocation')",
									"type": "Expression"
								},
								"DonorfyKeyStorageType": {
									"value": "@variables('DonorfyKeyStorageType')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LookupDonorfyKeyStorage",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dkst.[Value] AS DonorfyKeyStorageType,\n    dksl.[Value] AS DonorfyKeyStorageLocation\n  FROM [integration].[IntegrationImportSettings] dkst\n  INNER JOIN [integration].[IntegrationImportSettings] dksl\n  ON dksl.TenantCode = dkst.TenantCode\n  AND dksl.IntegrationName = dkst.IntegrationName\n  AND dksl.[Key] = 'DonorfyKeyStorageLocation'\n  WHERE dkst.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dkst.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dkst.[Key] = 'DonorfyKeyStorageType'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageType",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageLocation",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageLocation",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageLocation)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupAPIDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT un.[Value] AS APIUserName, ak.[Value] as APIAccessKey\n  FROM [integration].[IntegrationImportSettings] un\n  INNER JOIN [integration].[IntegrationImportSettings] ak\n  ON ak.TenantCode = un.TenantCode\n  AND ak.IntegrationName = un.IntegrationName\n  AND ak.[Key] = 'APIAccessKey'\n  WHERE un.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND un.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND un.[Key] = 'APIUserName'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set APIUserName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIUserName",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIUserName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set APIAccessKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIAccessKey",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIAccessKey)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"ErrorAlertDestinationWebhooks": {
						"type": "string",
						"defaultValue": [
							"https://mastict.webhook.office.com/webhookb2/fe4903b3-4a31-4a06-a361-e45caa7cbf88@93183a8b-45b8-4208-a95c-26fb477572e5/IncomingWebhook/6f63b1d955bd48eab46d10fa6b66bcaa/a112ca9c-4af6-4af5-a5db-5c8b6f213a31"
						]
					},
					"Subscription": {
						"type": "string",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "NWAA_DONORFY"
					}
				},
				"variables": {
					"DonorfyKeyPrefix": {
						"type": "String"
					},
					"APIUserName": {
						"type": "String"
					},
					"DonorfyKeyStorageType": {
						"type": "String"
					},
					"DonorfyKeyStorageLocation": {
						"type": "String"
					},
					"DonorfyLotteryPurpose": {
						"type": "String"
					},
					"DonorfyLotteryCampaign": {
						"type": "String"
					},
					"DonorfyLotteryTagCategory": {
						"type": "String"
					},
					"DonorfyLotteryActiveTag": {
						"type": "String"
					},
					"DonorfyLotteryCancelledTag": {
						"type": "String"
					},
					"DonorfyDeceasedReason": {
						"type": "String"
					},
					"DonorfyGoneAwayReason": {
						"type": "String"
					},
					"DonorfyBankAccount": {
						"type": "String"
					},
					"DonorfyLotteryProduct": {
						"type": "String"
					},
					"DonorfyFund": {
						"type": "String"
					},
					"DonorfyDefaultPaymentMethod": {
						"type": "String"
					},
					"NumberOfRunsToKeep": {
						"type": "String"
					},
					"APIAccessKey": {
						"type": "String"
					},
					"NumberProcessedEachLoop": {
						"type": "String"
					},
					"DonorfyDepartment": {
						"type": "String"
					},
					"DonorfyLotteryWinnerTag": {
						"type": "String"
					},
					"DonorfyLotterySelfExcludeTag": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-26T17:09:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIntegrationImportSettings')]",
				"[concat(variables('factoryId'), '/dataflows/SterlingLottery_to_DonorfyStaging')]",
				"[concat(variables('factoryId'), '/pipelines/DonorfyIntegrationsMatchConstituentsToDonorfy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryToDonorfy_LoadStagingTablesOnly')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDonorfyLotterySettings",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT lp.[Value] AS DonorfyLotteryPurpose,\n  lc.[Value] AS DonorfyLotteryCampaign,\n  lpr.[Value] AS DonorfyLotteryProduct,\n  kp.[Value] AS DonorfyKeyPrefix,\n  dpr.[Value] AS DonorfyDonationProduct\n  FROM [integration].[IntegrationImportSettings] lp\n  INNER JOIN [integration].[IntegrationImportSettings] lc\n  ON  lc.TenantCode = lp.TenantCode\n  AND lc.IntegrationName = lp.IntegrationName\n  AND lc.[Key] = 'DonorfyLotteryCampaign'\n  INNER JOIN [integration].[IntegrationImportSettings] lpr\n  ON  lpr.TenantCode = lp.TenantCode\n  AND lpr.IntegrationName = lp.IntegrationName\n  AND lpr.[Key] = 'DonorfyLotteryProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] dpr\n  ON  dpr.TenantCode = lp.TenantCode\n  AND dpr.IntegrationName = lp.IntegrationName\n  AND dpr.[Key] = 'DonorfyDonationProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] kp\n  ON  kp.TenantCode = lp.TenantCode\n  AND kp.IntegrationName = lp.IntegrationName\n  AND kp.[Key] = 'DonorfyKeyPrefix'\n  WHERE lp.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND lp.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND lp.[Key] = 'DonorfyLotteryPurpose'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryPurpose",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryPurpose",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryPurpose)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCampaign",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCampaign",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryCampaign)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyLotteryTags",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dltc.[Value] AS DonorfyLotteryTagCategory,\n dat.Value AS DonorfyLotteryActiveTag,\n dct.Value AS DonorfyLotteryCancelledTag,\n dlwt.Value AS DonorfyLotteryWinnerTag,\n dlset.Value AS DonorfyLotterySelfExcludeTag\n  FROM [integration].[IntegrationImportSettings] dltc\n  INNER JOIN [integration].[IntegrationImportSettings] dat \n  ON dat.TenantCode = dltc.TenantCode\n  AND dat.IntegrationName = dltc.IntegrationName\n  AND dat.[Key] = 'DonorfyLotteryActiveTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dct \n  ON dct.TenantCode = dltc.TenantCode\n  AND dct.IntegrationName = dltc.IntegrationName\n  AND dct.[Key] = 'DonorfyLotteryCancelledTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlwt \n  ON dlwt.TenantCode = dltc.TenantCode\n  AND dlwt.IntegrationName = dltc.IntegrationName\n  AND dlwt.[Key] = 'DonorfyLotteryWinnerTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlset \n  ON dlset.TenantCode = dltc.TenantCode\n  AND dlset.IntegrationName = dltc.IntegrationName\n  AND dlset.[Key] = 'DonorfyLotterySelfExcludeTag'\n  WHERE dltc.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dltc.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dltc.[Key] = 'DonorfyLotteryTagCategory'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryTagCategory",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryTagCategory",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryTagCategory)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryActiveTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryActiveTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryActiveTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCancelledTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCancelledTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryCancelledTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyReasons",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ddr.[Value] AS DonorfyDeceasedReason,\n    dgar.[Value] AS DonorfyGoneAwayReason\n  FROM [integration].[IntegrationImportSettings] ddr\n  INNER JOIN [integration].[IntegrationImportSettings] dgar \n  ON dgar.TenantCode = ddr.TenantCode\n  AND dgar.IntegrationName = ddr.IntegrationName\n  AND dgar.[Key] = 'DonorfyGoneAwayReason'\n  WHERE ddr.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ddr.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ddr.[Key] = 'DonorfyDeceasedReason'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyDeceasedReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDeceasedReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyDeceasedReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyGoneAwayReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGoneAwayReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyGoneAwayReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyTransactionDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ba.[Value] AS DonorfyBankAccount,\n    f.[Value] AS DonorfyFund,\n    pm.[Value] As DonorfyDefaultPaymentMethod,\n    dd.[Value] As DonorfyDepartment\n  FROM [integration].[IntegrationImportSettings] ba\n  INNER JOIN [integration].[IntegrationImportSettings] f \n  ON f.TenantCode = ba.TenantCode\n  AND f.IntegrationName = ba.IntegrationName\n  AND f.[Key] = 'DonorfyFund'\n  INNER JOIN [integration].[IntegrationImportSettings] pm \n  ON pm.TenantCode = ba.TenantCode\n  AND pm.IntegrationName = ba.IntegrationName\n  AND pm.[Key] = 'DonorfyDefaultPaymentMethod'\n  INNER JOIN [integration].[IntegrationImportSettings] dd \n  ON dd.TenantCode = ba.TenantCode\n  AND dd.IntegrationName = ba.IntegrationName\n  AND dd.[Key] = 'DonorfyDepartment'\n  WHERE ba.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ba.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ba.[Key] = 'DonorfyBankAccount'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetDonorfyBankAccount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyBankAccount",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyBankAccount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyLotteryProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyFund",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyFund",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyFund)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDefaultPaymentMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDefaultPaymentMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDefaultPaymentMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SterlingLottery_to_DonorfyStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetDonorfyLotteryProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryTagCategory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCampaign",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryPurpose",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryActiveTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCancelledTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyDeceasedReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGoneAwayReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyBankAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyFund",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDefaultPaymentMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyPrefix",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDepartment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryWinnerTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDonationProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SterlingLottery_to_DonorfyStaging",
								"type": "DataFlowReference",
								"parameters": {
									"DonorfyTenantCode": {
										"value": "'@{pipeline().parameters.TenantCode}'",
										"type": "Expression"
									},
									"IntegrationName": {
										"value": "'@{pipeline().parameters.IntegrationName}'",
										"type": "Expression"
									},
									"ADFPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"ADFPipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"DonorfyKeyPrefix": {
										"value": "'@{variables('DonorfyKeyPrefix')}'",
										"type": "Expression"
									},
									"DonorfyLotteryPurpose": {
										"value": "'@{variables('DonorfyLotteryPurpose')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCampaign": {
										"value": "'@{variables('DonorfyLotteryCampaign')}'",
										"type": "Expression"
									},
									"DonorfyLotteryTagCategory": {
										"value": "'@{variables('DonorfyLotteryTagCategory')}'",
										"type": "Expression"
									},
									"DonorfyLotteryActiveTag": {
										"value": "'@{variables('DonorfyLotteryActiveTag')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCancelledTag": {
										"value": "'@{variables('DonorfyLotteryCancelledTag')}'",
										"type": "Expression"
									},
									"DonorfyDeceasedReason": {
										"value": "'@{variables('DonorfyDeceasedReason')}'",
										"type": "Expression"
									},
									"DonorfyGoneAwayReason": {
										"value": "'@{variables('DonorfyGoneAwayReason')}'",
										"type": "Expression"
									},
									"DonorfyBankAccount": {
										"value": "'@{variables('DonorfyBankAccount')}'",
										"type": "Expression"
									},
									"DonorfyLotteryProduct": {
										"value": "'@{variables('DonorfyLotteryProduct')}'",
										"type": "Expression"
									},
									"DonorfyFund": {
										"value": "'@{variables('DonorfyFund')}'",
										"type": "Expression"
									},
									"DonorfyDefaultPaymentMethod": {
										"value": "'@{variables('DonorfyDefaultPaymentMethod')}'",
										"type": "Expression"
									},
									"RunDate": "currentDate()",
									"DonorfyDepartment": {
										"value": "'@{variables('DonorfyDepartment')}'",
										"type": "Expression"
									},
									"DonorfyLotteryWinnerTag": {
										"value": "'@{variables('DonorfyLotteryWinnerTag')}'",
										"type": "Expression"
									},
									"DonorfyLotterySelfExcludeTag": {
										"value": "'@{variables('DonorfyLotterySelfExcludeTag')}'",
										"type": "Expression"
									},
									"DonorfyDonationProduct": {
										"value": "'@{variables('DonorfyDonationProduct')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SterlingLotteryInBlobStorage": {},
									"SterlingLotteryWinnersInBlobStorage": {},
									"SterlingLotteryPaymentsInBlobStorage": {},
									"SterlingLotteryGADsInBlobStorage": {},
									"DonorfyConstituentImportStagingTable": {},
									"DonorfyPurposesImportStagingTable": {},
									"DonorfyTagsImportStagingTable": {},
									"DonorfyActivitiesImportStagingTable": {},
									"DonorfyTransactionsImportStagingTable": {},
									"DonorfyWinnerTagsImportStagingTable": {},
									"DonorfySelfExcludeTagsImportStagingTable": {},
									"DonorfyTransactionAdditionalAllocationssImportStagingTable": {},
									"DonorfyGADStagingTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set DonorfyKeyPrefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyPrefix",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyKeyPrefix)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDepartment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDepartment",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDepartment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryWinnerTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryWinnerTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryWinnerTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotterySelfExcludeTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotterySelfExcludeTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Additional Allocation Transactions with FK ID",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetAdditionAllocationFKTransactionImportID]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									}
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									}
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									}
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetDonorfyDonationProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDonationProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyDonationProduct)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"ErrorAlertDestinationWebhooks": {
						"type": "string",
						"defaultValue": [
							"https://mastict.webhook.office.com/webhookb2/fe4903b3-4a31-4a06-a361-e45caa7cbf88@93183a8b-45b8-4208-a95c-26fb477572e5/IncomingWebhook/6f63b1d955bd48eab46d10fa6b66bcaa/a112ca9c-4af6-4af5-a5db-5c8b6f213a31"
						]
					},
					"Subscription": {
						"type": "string",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "NWAA_DONORFY"
					}
				},
				"variables": {
					"DonorfyKeyPrefix": {
						"type": "String"
					},
					"APIUserName": {
						"type": "String"
					},
					"DonorfyKeyStorageType": {
						"type": "String"
					},
					"DonorfyKeyStorageLocation": {
						"type": "String"
					},
					"DonorfyLotteryPurpose": {
						"type": "String"
					},
					"DonorfyLotteryCampaign": {
						"type": "String"
					},
					"DonorfyLotteryTagCategory": {
						"type": "String"
					},
					"DonorfyLotteryActiveTag": {
						"type": "String"
					},
					"DonorfyLotteryCancelledTag": {
						"type": "String"
					},
					"DonorfyDeceasedReason": {
						"type": "String"
					},
					"DonorfyGoneAwayReason": {
						"type": "String"
					},
					"DonorfyBankAccount": {
						"type": "String"
					},
					"DonorfyLotteryProduct": {
						"type": "String"
					},
					"DonorfyFund": {
						"type": "String"
					},
					"DonorfyDefaultPaymentMethod": {
						"type": "String"
					},
					"NumberOfRunsToKeep": {
						"type": "String"
					},
					"APIAccessKey": {
						"type": "String"
					},
					"NumberProcessedEachLoop": {
						"type": "String"
					},
					"DonorfyDepartment": {
						"type": "String"
					},
					"DonorfyLotteryWinnerTag": {
						"type": "String"
					},
					"DonorfyLotterySelfExcludeTag": {
						"type": "String"
					},
					"DonorfyDonationProduct": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-26T17:09:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIntegrationImportSettings')]",
				"[concat(variables('factoryId'), '/dataflows/SterlingLottery_to_DonorfyStaging')]",
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryToDonorfy_LoadStagingTablesOnlyMatching_v1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDonorfyLotterySettings",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT lp.[Value] AS DonorfyLotteryPurpose,\n  lc.[Value] AS DonorfyLotteryCampaign,\n  lpr.[Value] AS DonorfyLotteryProduct,\n  kp.[Value] AS DonorfyKeyPrefix\n  FROM [integration].[IntegrationImportSettings] lp\n  INNER JOIN [integration].[IntegrationImportSettings] lc\n  ON  lc.TenantCode = lp.TenantCode\n  AND lc.IntegrationName = lp.IntegrationName\n  AND lc.[Key] = 'DonorfyLotteryCampaign'\n  INNER JOIN [integration].[IntegrationImportSettings] lpr\n  ON  lpr.TenantCode = lp.TenantCode\n  AND lpr.IntegrationName = lp.IntegrationName\n  AND lpr.[Key] = 'DonorfyLotteryProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] kp\n  ON  kp.TenantCode = lp.TenantCode\n  AND kp.IntegrationName = lp.IntegrationName\n  AND kp.[Key] = 'DonorfyKeyPrefix'\n  WHERE lp.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND lp.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND lp.[Key] = 'DonorfyLotteryPurpose'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryPurpose",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryPurpose",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryPurpose)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCampaign",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCampaign",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryCampaign)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyLotteryTags",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dltc.[Value] AS DonorfyLotteryTagCategory,\n dat.Value AS DonorfyLotteryActiveTag,\n dct.Value AS DonorfyLotteryCancelledTag,\n dlwt.Value AS DonorfyLotteryWinnerTag,\n dlset.Value AS DonorfyLotterySelfExcludeTag\n  FROM [integration].[IntegrationImportSettings] dltc\n  INNER JOIN [integration].[IntegrationImportSettings] dat \n  ON dat.TenantCode = dltc.TenantCode\n  AND dat.IntegrationName = dltc.IntegrationName\n  AND dat.[Key] = 'DonorfyLotteryActiveTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dct \n  ON dct.TenantCode = dltc.TenantCode\n  AND dct.IntegrationName = dltc.IntegrationName\n  AND dct.[Key] = 'DonorfyLotteryCancelledTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlwt \n  ON dlwt.TenantCode = dltc.TenantCode\n  AND dlwt.IntegrationName = dltc.IntegrationName\n  AND dlwt.[Key] = 'DonorfyLotteryWinnerTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlset \n  ON dlset.TenantCode = dltc.TenantCode\n  AND dlset.IntegrationName = dltc.IntegrationName\n  AND dlset.[Key] = 'DonorfyLotterySelfExcludeTag'\n  WHERE dltc.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dltc.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dltc.[Key] = 'DonorfyLotteryTagCategory'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryTagCategory",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryTagCategory",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryTagCategory)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryActiveTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryActiveTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryActiveTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCancelledTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCancelledTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryCancelledTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyReasons",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ddr.[Value] AS DonorfyDeceasedReason,\n    dgar.[Value] AS DonorfyGoneAwayReason\n  FROM [integration].[IntegrationImportSettings] ddr\n  INNER JOIN [integration].[IntegrationImportSettings] dgar \n  ON dgar.TenantCode = ddr.TenantCode\n  AND dgar.IntegrationName = ddr.IntegrationName\n  AND dgar.[Key] = 'DonorfyGoneAwayReason'\n  WHERE ddr.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ddr.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ddr.[Key] = 'DonorfyDeceasedReason'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyDeceasedReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDeceasedReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyDeceasedReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyGoneAwayReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGoneAwayReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyGoneAwayReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyTransactionDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ba.[Value] AS DonorfyBankAccount,\n    f.[Value] AS DonorfyFund,\n    pm.[Value] As DonorfyDefaultPaymentMethod,\n    dd.[Value] As DonorfyDepartment\n  FROM [integration].[IntegrationImportSettings] ba\n  INNER JOIN [integration].[IntegrationImportSettings] f \n  ON f.TenantCode = ba.TenantCode\n  AND f.IntegrationName = ba.IntegrationName\n  AND f.[Key] = 'DonorfyFund'\n  INNER JOIN [integration].[IntegrationImportSettings] pm \n  ON pm.TenantCode = ba.TenantCode\n  AND pm.IntegrationName = ba.IntegrationName\n  AND pm.[Key] = 'DonorfyDefaultPaymentMethod'\n  INNER JOIN [integration].[IntegrationImportSettings] dd \n  ON dd.TenantCode = ba.TenantCode\n  AND dd.IntegrationName = ba.IntegrationName\n  AND dd.[Key] = 'DonorfyDepartment'\n  WHERE ba.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ba.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ba.[Key] = 'DonorfyBankAccount'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetDonorfyBankAccount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyBankAccount",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyBankAccount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyLotteryProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyFund",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyFund",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyFund)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDefaultPaymentMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDefaultPaymentMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDefaultPaymentMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SterlingLottery_to_DonorfyStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetDonorfyLotteryProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryTagCategory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCampaign",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryPurpose",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryActiveTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCancelledTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyDeceasedReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGoneAwayReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyBankAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyFund",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDefaultPaymentMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyPrefix",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDepartment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryWinnerTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SterlingLottery_to_DonorfyStaging",
								"type": "DataFlowReference",
								"parameters": {
									"DonorfyTenantCode": {
										"value": "'@{pipeline().parameters.TenantCode}'",
										"type": "Expression"
									},
									"IntegrationName": {
										"value": "'@{pipeline().parameters.IntegrationName}'",
										"type": "Expression"
									},
									"ADFPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"ADFPipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"DonorfyKeyPrefix": {
										"value": "'@{variables('DonorfyKeyPrefix')}'",
										"type": "Expression"
									},
									"DonorfyLotteryPurpose": {
										"value": "'@{variables('DonorfyLotteryPurpose')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCampaign": {
										"value": "'@{variables('DonorfyLotteryCampaign')}'",
										"type": "Expression"
									},
									"DonorfyLotteryTagCategory": {
										"value": "'@{variables('DonorfyLotteryTagCategory')}'",
										"type": "Expression"
									},
									"DonorfyLotteryActiveTag": {
										"value": "'@{variables('DonorfyLotteryActiveTag')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCancelledTag": {
										"value": "'@{variables('DonorfyLotteryCancelledTag')}'",
										"type": "Expression"
									},
									"DonorfyDeceasedReason": {
										"value": "'@{variables('DonorfyDeceasedReason')}'",
										"type": "Expression"
									},
									"DonorfyGoneAwayReason": {
										"value": "'@{variables('DonorfyGoneAwayReason')}'",
										"type": "Expression"
									},
									"DonorfyBankAccount": {
										"value": "'@{variables('DonorfyBankAccount')}'",
										"type": "Expression"
									},
									"DonorfyLotteryProduct": {
										"value": "'@{variables('DonorfyLotteryProduct')}'",
										"type": "Expression"
									},
									"DonorfyFund": {
										"value": "'@{variables('DonorfyFund')}'",
										"type": "Expression"
									},
									"DonorfyDefaultPaymentMethod": {
										"value": "'@{variables('DonorfyDefaultPaymentMethod')}'",
										"type": "Expression"
									},
									"RunDate": "currentDate()",
									"DonorfyDepartment": {
										"value": "'@{variables('DonorfyDepartment')}'",
										"type": "Expression"
									},
									"DonorfyLotteryWinnerTag": {
										"value": "'@{variables('DonorfyLotteryWinnerTag')}'",
										"type": "Expression"
									},
									"DonorfyLotterySelfExcludeTag": {
										"value": "'@{variables('DonorfyLotterySelfExcludeTag')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SterlingLotteryInBlobStorage": {},
									"SterlingLotteryWinnersInBlobStorage": {},
									"SterlingLotteryPaymentsInBlobStorage": {},
									"SterlingLotteryGADsInBlobStorage": {},
									"DonorfyConstituentImportStagingTable": {},
									"DonorfyPurposesImportStagingTable": {},
									"DonorfyTagsImportStagingTable": {},
									"DonorfyActivitiesImportStagingTable": {},
									"DonorfyTransactionsImportStagingTable": {},
									"DonorfyWinnerTagsImportStagingTable": {},
									"DonorfySelfExcludeTagsImportStagingTable": {},
									"DonorfyTransactionAdditionalAllocationssImportStagingTable": {},
									"DonorfyGADStagingTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set DonorfyKeyPrefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyPrefix",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyKeyPrefix)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDepartment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDepartment",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDepartment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryWinnerTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryWinnerTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryWinnerTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotterySelfExcludeTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotterySelfExcludeTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Process Match Constituents to Donorfy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageLocation",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIAccessKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DonorfyIntegrationsMatchConstituentsToDonorfy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								},
								"DonorfyKeyStorageLocation": {
									"value": "@variables('DonorfyKeyStorageLocation')",
									"type": "Expression"
								},
								"DonorfyKeyStorageType": {
									"value": "@variables('DonorfyKeyStorageType')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LookupDonorfyKeyStorage",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dkst.[Value] AS DonorfyKeyStorageType,\n    dksl.[Value] AS DonorfyKeyStorageLocation\n  FROM [integration].[IntegrationImportSettings] dkst\n  INNER JOIN [integration].[IntegrationImportSettings] dksl\n  ON dksl.TenantCode = dkst.TenantCode\n  AND dksl.IntegrationName = dkst.IntegrationName\n  AND dksl.[Key] = 'DonorfyKeyStorageLocation'\n  WHERE dkst.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dkst.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dkst.[Key] = 'DonorfyKeyStorageType'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageType",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageLocation",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageLocation",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageLocation)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupAPIDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT un.[Value] AS APIUserName, ak.[Value] as APIAccessKey\n  FROM [integration].[IntegrationImportSettings] un\n  INNER JOIN [integration].[IntegrationImportSettings] ak\n  ON ak.TenantCode = un.TenantCode\n  AND ak.IntegrationName = un.IntegrationName\n  AND ak.[Key] = 'APIAccessKey'\n  WHERE un.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND un.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND un.[Key] = 'APIUserName'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set APIUserName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIUserName",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIUserName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set APIAccessKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIAccessKey",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIAccessKey)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Last Pipeline Run ID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[integration].[GetLastPipelineRunId]",
								"storedProcedureParameters": {
									"IntegrationName": {
										"value": {
											"value": "@pipeline().parameters.IntegrationName",
											"type": "Expression"
										}
									},
									"TenantCode": {
										"value": {
											"value": "@pipeline().parameters.TenantCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLStoredProcCall",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update Unchanged Import Constituents To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Last Pipeline Run ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[DiffImportRunConstituents]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastADFPipelineRunId": {
									"value": {
										"value": "@if(not(equals(activity('Get Last Pipeline Run ID').output.firstRow.Value,'')),activity('Get Last Pipeline Run ID').output.firstRow.Value,'11111111-1111-1111-1111-111111111111')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Unmatched Cancelled Players To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Unchanged Import Constituents To Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[MarkProcessedUnmatchedCancelledPlayers]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryTagCategory": {
									"value": {
										"value": "@variables('DonorfyLotteryTagCategory')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryCancelledTag": {
									"value": {
										"value": "@variables('DonorfyLotteryCancelledTag')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Tags for Deletion",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Unmatched Cancelled Players To Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[AddTagsForDeletion]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryTagCategory": {
									"value": {
										"value": "@variables('DonorfyLotteryTagCategory')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryCancelledTag": {
									"value": {
										"value": "@variables('DonorfyLotteryCancelledTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryActiveTag": {
									"value": {
										"value": "@variables('DonorfyLotteryActiveTag')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Execute Send Error Teams Message",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendAlertToTeamsChannel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().parameters.Subscription",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().parameters.ResourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "Integration failed while matching Constituents.  ",
								"message": "Integration failed while matching Constituents.  Manual intervention is needed!",
								"teamWebhookUrls": {
									"value": "@pipeline().parameters.ErrorAlertDestinationWebhooks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set Constiuent Channel Consents Null for Skyline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Add Tags for Deletion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetImportConstituentChannelConsentsNull]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"ErrorAlertDestinationWebhooks": {
						"type": "string",
						"defaultValue": [
							"https://mastict.webhook.office.com/webhookb2/fe4903b3-4a31-4a06-a361-e45caa7cbf88@93183a8b-45b8-4208-a95c-26fb477572e5/IncomingWebhook/6f63b1d955bd48eab46d10fa6b66bcaa/a112ca9c-4af6-4af5-a5db-5c8b6f213a31"
						]
					},
					"Subscription": {
						"type": "string",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "NWAA_DONORFY"
					}
				},
				"variables": {
					"DonorfyKeyPrefix": {
						"type": "String"
					},
					"APIUserName": {
						"type": "String"
					},
					"DonorfyKeyStorageType": {
						"type": "String"
					},
					"DonorfyKeyStorageLocation": {
						"type": "String"
					},
					"DonorfyLotteryPurpose": {
						"type": "String"
					},
					"DonorfyLotteryCampaign": {
						"type": "String"
					},
					"DonorfyLotteryTagCategory": {
						"type": "String"
					},
					"DonorfyLotteryActiveTag": {
						"type": "String"
					},
					"DonorfyLotteryCancelledTag": {
						"type": "String"
					},
					"DonorfyDeceasedReason": {
						"type": "String"
					},
					"DonorfyGoneAwayReason": {
						"type": "String"
					},
					"DonorfyBankAccount": {
						"type": "String"
					},
					"DonorfyLotteryProduct": {
						"type": "String"
					},
					"DonorfyFund": {
						"type": "String"
					},
					"DonorfyDefaultPaymentMethod": {
						"type": "String"
					},
					"NumberOfRunsToKeep": {
						"type": "String"
					},
					"APIAccessKey": {
						"type": "String"
					},
					"NumberProcessedEachLoop": {
						"type": "String"
					},
					"DonorfyDepartment": {
						"type": "String"
					},
					"DonorfyLotteryWinnerTag": {
						"type": "String"
					},
					"DonorfyLotterySelfExcludeTag": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-10T16:37:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIntegrationImportSettings')]",
				"[concat(variables('factoryId'), '/dataflows/SterlingLottery_to_DonorfyStaging')]",
				"[concat(variables('factoryId'), '/pipelines/DonorfyIntegrationsMatchConstituentsToDonorfy')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLStoredProcCall')]",
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/SendAlertToTeamsChannel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryToDonorfy_LoadStagingTablesOnlyMatching_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDonorfyLotterySettings",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT lp.[Value] AS DonorfyLotteryPurpose,\n  lc.[Value] AS DonorfyLotteryCampaign,\n  lpr.[Value] AS DonorfyLotteryProduct,\n  kp.[Value] AS DonorfyKeyPrefix,\n  dpr.[Value] AS DonorfyDonationProduct\n  FROM [integration].[IntegrationImportSettings] lp\n  INNER JOIN [integration].[IntegrationImportSettings] lc\n  ON  lc.TenantCode = lp.TenantCode\n  AND lc.IntegrationName = lp.IntegrationName\n  AND lc.[Key] = 'DonorfyLotteryCampaign'\n  INNER JOIN [integration].[IntegrationImportSettings] lpr\n  ON  lpr.TenantCode = lp.TenantCode\n  AND lpr.IntegrationName = lp.IntegrationName\n  AND lpr.[Key] = 'DonorfyLotteryProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] dpr\n  ON  dpr.TenantCode = lp.TenantCode\n  AND dpr.IntegrationName = lp.IntegrationName\n  AND dpr.[Key] = 'DonorfyDonationProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] kp\n  ON  kp.TenantCode = lp.TenantCode\n  AND kp.IntegrationName = lp.IntegrationName\n  AND kp.[Key] = 'DonorfyKeyPrefix'\n  WHERE lp.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND lp.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND lp.[Key] = 'DonorfyLotteryPurpose'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryPurpose",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryPurpose",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryPurpose)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCampaign",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCampaign",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryCampaign)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyLotteryTags",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dltc.[Value] AS DonorfyLotteryTagCategory,\n dat.Value AS DonorfyLotteryActiveTag,\n dct.Value AS DonorfyLotteryCancelledTag,\n dlwt.Value AS DonorfyLotteryWinnerTag,\n dlset.Value AS DonorfyLotterySelfExcludeTag\n  FROM [integration].[IntegrationImportSettings] dltc\n  INNER JOIN [integration].[IntegrationImportSettings] dat \n  ON dat.TenantCode = dltc.TenantCode\n  AND dat.IntegrationName = dltc.IntegrationName\n  AND dat.[Key] = 'DonorfyLotteryActiveTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dct \n  ON dct.TenantCode = dltc.TenantCode\n  AND dct.IntegrationName = dltc.IntegrationName\n  AND dct.[Key] = 'DonorfyLotteryCancelledTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlwt \n  ON dlwt.TenantCode = dltc.TenantCode\n  AND dlwt.IntegrationName = dltc.IntegrationName\n  AND dlwt.[Key] = 'DonorfyLotteryWinnerTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlset \n  ON dlset.TenantCode = dltc.TenantCode\n  AND dlset.IntegrationName = dltc.IntegrationName\n  AND dlset.[Key] = 'DonorfyLotterySelfExcludeTag'\n  WHERE dltc.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dltc.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dltc.[Key] = 'DonorfyLotteryTagCategory'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryTagCategory",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryTagCategory",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryTagCategory)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryActiveTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryActiveTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryActiveTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCancelledTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCancelledTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryCancelledTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyReasons",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ddr.[Value] AS DonorfyDeceasedReason,\n    dgar.[Value] AS DonorfyGoneAwayReason\n  FROM [integration].[IntegrationImportSettings] ddr\n  INNER JOIN [integration].[IntegrationImportSettings] dgar \n  ON dgar.TenantCode = ddr.TenantCode\n  AND dgar.IntegrationName = ddr.IntegrationName\n  AND dgar.[Key] = 'DonorfyGoneAwayReason'\n  WHERE ddr.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ddr.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ddr.[Key] = 'DonorfyDeceasedReason'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyDeceasedReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDeceasedReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyDeceasedReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyGoneAwayReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGoneAwayReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyGoneAwayReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyTransactionDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ba.[Value] AS DonorfyBankAccount,\n    f.[Value] AS DonorfyFund,\n    pm.[Value] As DonorfyDefaultPaymentMethod,\n    dd.[Value] As DonorfyDepartment\n  FROM [integration].[IntegrationImportSettings] ba\n  INNER JOIN [integration].[IntegrationImportSettings] f \n  ON f.TenantCode = ba.TenantCode\n  AND f.IntegrationName = ba.IntegrationName\n  AND f.[Key] = 'DonorfyFund'\n  INNER JOIN [integration].[IntegrationImportSettings] pm \n  ON pm.TenantCode = ba.TenantCode\n  AND pm.IntegrationName = ba.IntegrationName\n  AND pm.[Key] = 'DonorfyDefaultPaymentMethod'\n  INNER JOIN [integration].[IntegrationImportSettings] dd \n  ON dd.TenantCode = ba.TenantCode\n  AND dd.IntegrationName = ba.IntegrationName\n  AND dd.[Key] = 'DonorfyDepartment'\n  WHERE ba.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ba.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ba.[Key] = 'DonorfyBankAccount'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetDonorfyBankAccount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyBankAccount",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyBankAccount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyLotteryProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyFund",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyFund",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyFund)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDefaultPaymentMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDefaultPaymentMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDefaultPaymentMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SterlingLottery_to_DonorfyStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetDonorfyLotteryProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryTagCategory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCampaign",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryPurpose",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryActiveTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCancelledTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyDeceasedReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGoneAwayReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyBankAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyFund",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDefaultPaymentMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyPrefix",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDepartment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryWinnerTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDonationProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGADDeclarationMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SterlingLottery_to_DonorfyStaging",
								"type": "DataFlowReference",
								"parameters": {
									"DonorfyTenantCode": {
										"value": "'@{pipeline().parameters.TenantCode}'",
										"type": "Expression"
									},
									"IntegrationName": {
										"value": "'@{pipeline().parameters.IntegrationName}'",
										"type": "Expression"
									},
									"ADFPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"ADFPipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"DonorfyKeyPrefix": {
										"value": "'@{variables('DonorfyKeyPrefix')}'",
										"type": "Expression"
									},
									"DonorfyLotteryPurpose": {
										"value": "'@{variables('DonorfyLotteryPurpose')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCampaign": {
										"value": "'@{variables('DonorfyLotteryCampaign')}'",
										"type": "Expression"
									},
									"DonorfyLotteryTagCategory": {
										"value": "'@{variables('DonorfyLotteryTagCategory')}'",
										"type": "Expression"
									},
									"DonorfyLotteryActiveTag": {
										"value": "'@{variables('DonorfyLotteryActiveTag')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCancelledTag": {
										"value": "'@{variables('DonorfyLotteryCancelledTag')}'",
										"type": "Expression"
									},
									"DonorfyDeceasedReason": {
										"value": "'@{variables('DonorfyDeceasedReason')}'",
										"type": "Expression"
									},
									"DonorfyGoneAwayReason": {
										"value": "'@{variables('DonorfyGoneAwayReason')}'",
										"type": "Expression"
									},
									"DonorfyBankAccount": {
										"value": "'@{variables('DonorfyBankAccount')}'",
										"type": "Expression"
									},
									"DonorfyLotteryProduct": {
										"value": "'@{variables('DonorfyLotteryProduct')}'",
										"type": "Expression"
									},
									"DonorfyFund": {
										"value": "'@{variables('DonorfyFund')}'",
										"type": "Expression"
									},
									"DonorfyDefaultPaymentMethod": {
										"value": "'@{variables('DonorfyDefaultPaymentMethod')}'",
										"type": "Expression"
									},
									"RunDate": "currentDate()",
									"DonorfyDepartment": {
										"value": "'@{variables('DonorfyDepartment')}'",
										"type": "Expression"
									},
									"DonorfyLotteryWinnerTag": {
										"value": "'@{variables('DonorfyLotteryWinnerTag')}'",
										"type": "Expression"
									},
									"DonorfyLotterySelfExcludeTag": {
										"value": "'@{variables('DonorfyLotterySelfExcludeTag')}'",
										"type": "Expression"
									},
									"DonorfyDonationProduct": {
										"value": "'@{variables('DonorfyDonationProduct')}'",
										"type": "Expression"
									},
									"DonorfyGADMethod": {
										"value": "'@{variables('DonorfyGADDeclarationMethod')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SterlingLotteryInBlobStorage": {},
									"SterlingLotteryWinnersInBlobStorage": {},
									"SterlingLotteryPaymentsInBlobStorage": {},
									"SterlingLotteryGADsInBlobStorage": {},
									"DonorfyConstituentImportStagingTable": {},
									"DonorfyPurposesImportStagingTable": {},
									"DonorfyTagsImportStagingTable": {},
									"DonorfyActivitiesImportStagingTable": {},
									"DonorfyTransactionsImportStagingTable": {},
									"DonorfyWinnerTagsImportStagingTable": {},
									"DonorfySelfExcludeTagsImportStagingTable": {},
									"DonorfyTransactionAdditionalAllocationssImportStagingTable": {},
									"DonorfyGADStagingTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set DonorfyKeyPrefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyPrefix",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyKeyPrefix)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDepartment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDepartment",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDepartment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryWinnerTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryWinnerTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryWinnerTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotterySelfExcludeTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotterySelfExcludeTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Process Match Constituents to Donorfy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageLocation",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIAccessKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DonorfyIntegrationsMatchConstituentsToDonorfy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								},
								"DonorfyKeyStorageLocation": {
									"value": "@variables('DonorfyKeyStorageLocation')",
									"type": "Expression"
								},
								"DonorfyKeyStorageType": {
									"value": "@variables('DonorfyKeyStorageType')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LookupDonorfyKeyStorage",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dkst.[Value] AS DonorfyKeyStorageType,\n    dksl.[Value] AS DonorfyKeyStorageLocation\n  FROM [integration].[IntegrationImportSettings] dkst\n  INNER JOIN [integration].[IntegrationImportSettings] dksl\n  ON dksl.TenantCode = dkst.TenantCode\n  AND dksl.IntegrationName = dkst.IntegrationName\n  AND dksl.[Key] = 'DonorfyKeyStorageLocation'\n  WHERE dkst.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dkst.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dkst.[Key] = 'DonorfyKeyStorageType'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageType",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageLocation",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageLocation",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageLocation)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupAPIDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT un.[Value] AS APIUserName, ak.[Value] as APIAccessKey\n  FROM [integration].[IntegrationImportSettings] un\n  INNER JOIN [integration].[IntegrationImportSettings] ak\n  ON ak.TenantCode = un.TenantCode\n  AND ak.IntegrationName = un.IntegrationName\n  AND ak.[Key] = 'APIAccessKey'\n  WHERE un.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND un.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND un.[Key] = 'APIUserName'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set APIUserName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIUserName",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIUserName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set APIAccessKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIAccessKey",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIAccessKey)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Last Pipeline Run ID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[integration].[GetLastPipelineRunId]",
								"storedProcedureParameters": {
									"IntegrationName": {
										"value": {
											"value": "@pipeline().parameters.IntegrationName",
											"type": "Expression"
										}
									},
									"TenantCode": {
										"value": {
											"value": "@pipeline().parameters.TenantCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLStoredProcCall",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update Unchanged Import Constituents To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Last Pipeline Run ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[DiffImportRunConstituents]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastADFPipelineRunId": {
									"value": {
										"value": "@if(not(equals(activity('Get Last Pipeline Run ID').output.firstRow.Value,'')),activity('Get Last Pipeline Run ID').output.firstRow.Value,'11111111-1111-1111-1111-111111111111')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Unmatched Cancelled Players To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Unchanged Import Constituents To Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[MarkProcessedUnmatchedCancelledPlayers]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryTagCategory": {
									"value": {
										"value": "@variables('DonorfyLotteryTagCategory')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryCancelledTag": {
									"value": {
										"value": "@variables('DonorfyLotteryCancelledTag')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Tags for Deletion",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Unmatched Cancelled Players To Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[AddTagsForDeletion]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryTagCategory": {
									"value": {
										"value": "@variables('DonorfyLotteryTagCategory')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryCancelledTag": {
									"value": {
										"value": "@variables('DonorfyLotteryCancelledTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryActiveTag": {
									"value": {
										"value": "@variables('DonorfyLotteryActiveTag')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Execute Send Error Teams Message",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendAlertToTeamsChannel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().parameters.Subscription",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().parameters.ResourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "Integration failed while matching Constituents.  ",
								"message": "Integration failed while matching Constituents.  Manual intervention is needed!",
								"teamWebhookUrls": {
									"value": "@pipeline().parameters.ErrorAlertDestinationWebhooks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set Constiuent Channel Consents Null for Skyline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Add Tags for Deletion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetImportConstituentChannelConsentsNull]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Additional Allocation Transactions with FK ID",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetAdditionAllocationFKTransactionImportID]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									}
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									}
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									}
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetDonorfyDonationProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDonationProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyDonationProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyGADDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dm.[Value] AS DonorfyGADDeclarationMethod\n  FROM [integration].[IntegrationImportSettings] dm\n  WHERE dm.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dm.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dm.[Key] = 'DonorfyGADDeclarationMethod'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyGADDeclarationMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyGADDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGADDeclarationMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyGADDefaults').output.firstRow.DonorfyGADDeclarationMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set GAD Processed if Exists",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Constiuent Channel Consents Null for Skyline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetGADProcessedIfExists]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"ErrorAlertDestinationWebhooks": {
						"type": "string",
						"defaultValue": [
							"https://mastict.webhook.office.com/webhookb2/fe4903b3-4a31-4a06-a361-e45caa7cbf88@93183a8b-45b8-4208-a95c-26fb477572e5/IncomingWebhook/6f63b1d955bd48eab46d10fa6b66bcaa/a112ca9c-4af6-4af5-a5db-5c8b6f213a31"
						]
					},
					"Subscription": {
						"type": "string",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "NWAA_DONORFY"
					}
				},
				"variables": {
					"DonorfyKeyPrefix": {
						"type": "String"
					},
					"APIUserName": {
						"type": "String"
					},
					"DonorfyKeyStorageType": {
						"type": "String"
					},
					"DonorfyKeyStorageLocation": {
						"type": "String"
					},
					"DonorfyLotteryPurpose": {
						"type": "String"
					},
					"DonorfyLotteryCampaign": {
						"type": "String"
					},
					"DonorfyLotteryTagCategory": {
						"type": "String"
					},
					"DonorfyLotteryActiveTag": {
						"type": "String"
					},
					"DonorfyLotteryCancelledTag": {
						"type": "String"
					},
					"DonorfyDeceasedReason": {
						"type": "String"
					},
					"DonorfyGoneAwayReason": {
						"type": "String"
					},
					"DonorfyBankAccount": {
						"type": "String"
					},
					"DonorfyLotteryProduct": {
						"type": "String"
					},
					"DonorfyFund": {
						"type": "String"
					},
					"DonorfyDefaultPaymentMethod": {
						"type": "String"
					},
					"NumberOfRunsToKeep": {
						"type": "String"
					},
					"APIAccessKey": {
						"type": "String"
					},
					"NumberProcessedEachLoop": {
						"type": "String"
					},
					"DonorfyDepartment": {
						"type": "String"
					},
					"DonorfyLotteryWinnerTag": {
						"type": "String"
					},
					"DonorfyLotterySelfExcludeTag": {
						"type": "String"
					},
					"DonorfyDonationProduct": {
						"type": "String"
					},
					"DonorfyGADDeclarationMethod": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-10T16:37:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIntegrationImportSettings')]",
				"[concat(variables('factoryId'), '/dataflows/SterlingLottery_to_DonorfyStaging')]",
				"[concat(variables('factoryId'), '/pipelines/DonorfyIntegrationsMatchConstituentsToDonorfy')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLStoredProcCall')]",
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/SendAlertToTeamsChannel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryToDonorfy_LoadStagingTablesOnlyMatching_v3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDonorfyLotterySettings",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT lp.[Value] AS DonorfyLotteryPurpose,\n  lc.[Value] AS DonorfyLotteryCampaign,\n  lpr.[Value] AS DonorfyLotteryProduct,\n  kp.[Value] AS DonorfyKeyPrefix,\n  dpr.[Value] AS DonorfyDonationProduct\n  FROM [integration].[IntegrationImportSettings] lp\n  INNER JOIN [integration].[IntegrationImportSettings] lc\n  ON  lc.TenantCode = lp.TenantCode\n  AND lc.IntegrationName = lp.IntegrationName\n  AND lc.[Key] = 'DonorfyLotteryCampaign'\n  INNER JOIN [integration].[IntegrationImportSettings] lpr\n  ON  lpr.TenantCode = lp.TenantCode\n  AND lpr.IntegrationName = lp.IntegrationName\n  AND lpr.[Key] = 'DonorfyLotteryProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] dpr\n  ON  dpr.TenantCode = lp.TenantCode\n  AND dpr.IntegrationName = lp.IntegrationName\n  AND dpr.[Key] = 'DonorfyDonationProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] kp\n  ON  kp.TenantCode = lp.TenantCode\n  AND kp.IntegrationName = lp.IntegrationName\n  AND kp.[Key] = 'DonorfyKeyPrefix'\n  WHERE lp.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND lp.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND lp.[Key] = 'DonorfyLotteryPurpose'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryPurpose",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryPurpose",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryPurpose)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCampaign",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCampaign",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryCampaign)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyLotteryTags",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dltc.[Value] AS DonorfyLotteryTagCategory,\n dat.Value AS DonorfyLotteryActiveTag,\n dct.Value AS DonorfyLotteryCancelledTag,\n dlwt.Value AS DonorfyLotteryWinnerTag,\n dlset.Value AS DonorfyLotterySelfExcludeTag\n  FROM [integration].[IntegrationImportSettings] dltc\n  INNER JOIN [integration].[IntegrationImportSettings] dat \n  ON dat.TenantCode = dltc.TenantCode\n  AND dat.IntegrationName = dltc.IntegrationName\n  AND dat.[Key] = 'DonorfyLotteryActiveTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dct \n  ON dct.TenantCode = dltc.TenantCode\n  AND dct.IntegrationName = dltc.IntegrationName\n  AND dct.[Key] = 'DonorfyLotteryCancelledTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlwt \n  ON dlwt.TenantCode = dltc.TenantCode\n  AND dlwt.IntegrationName = dltc.IntegrationName\n  AND dlwt.[Key] = 'DonorfyLotteryWinnerTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlset \n  ON dlset.TenantCode = dltc.TenantCode\n  AND dlset.IntegrationName = dltc.IntegrationName\n  AND dlset.[Key] = 'DonorfyLotterySelfExcludeTag'\n  WHERE dltc.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dltc.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dltc.[Key] = 'DonorfyLotteryTagCategory'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryTagCategory",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryTagCategory",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryTagCategory)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryActiveTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryActiveTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryActiveTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCancelledTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCancelledTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryCancelledTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyReasons",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ddr.[Value] AS DonorfyDeceasedReason,\n    dgar.[Value] AS DonorfyGoneAwayReason\n  FROM [integration].[IntegrationImportSettings] ddr\n  INNER JOIN [integration].[IntegrationImportSettings] dgar \n  ON dgar.TenantCode = ddr.TenantCode\n  AND dgar.IntegrationName = ddr.IntegrationName\n  AND dgar.[Key] = 'DonorfyGoneAwayReason'\n  WHERE ddr.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ddr.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ddr.[Key] = 'DonorfyDeceasedReason'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyDeceasedReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDeceasedReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyDeceasedReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyGoneAwayReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGoneAwayReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyGoneAwayReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyTransactionDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ba.[Value] AS DonorfyBankAccount,\n    f.[Value] AS DonorfyFund,\n    pm.[Value] As DonorfyDefaultPaymentMethod,\n    dd.[Value] As DonorfyDepartment\n  FROM [integration].[IntegrationImportSettings] ba\n  INNER JOIN [integration].[IntegrationImportSettings] f \n  ON f.TenantCode = ba.TenantCode\n  AND f.IntegrationName = ba.IntegrationName\n  AND f.[Key] = 'DonorfyFund'\n  INNER JOIN [integration].[IntegrationImportSettings] pm \n  ON pm.TenantCode = ba.TenantCode\n  AND pm.IntegrationName = ba.IntegrationName\n  AND pm.[Key] = 'DonorfyDefaultPaymentMethod'\n  INNER JOIN [integration].[IntegrationImportSettings] dd \n  ON dd.TenantCode = ba.TenantCode\n  AND dd.IntegrationName = ba.IntegrationName\n  AND dd.[Key] = 'DonorfyDepartment'\n  WHERE ba.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ba.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ba.[Key] = 'DonorfyBankAccount'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetDonorfyBankAccount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyBankAccount",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyBankAccount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyLotteryProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyFund",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyFund",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyFund)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDefaultPaymentMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDefaultPaymentMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDefaultPaymentMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SterlingLottery_to_DonorfyStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetDonorfyLotteryProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryTagCategory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCampaign",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryPurpose",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryActiveTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCancelledTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyDeceasedReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGoneAwayReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyBankAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyFund",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDefaultPaymentMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyPrefix",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDepartment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryWinnerTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDonationProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SterlingLottery_to_DonorfyStaging",
								"type": "DataFlowReference",
								"parameters": {
									"DonorfyTenantCode": {
										"value": "'@{pipeline().parameters.TenantCode}'",
										"type": "Expression"
									},
									"IntegrationName": {
										"value": "'@{pipeline().parameters.IntegrationName}'",
										"type": "Expression"
									},
									"ADFPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"ADFPipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"DonorfyKeyPrefix": {
										"value": "'@{variables('DonorfyKeyPrefix')}'",
										"type": "Expression"
									},
									"DonorfyLotteryPurpose": {
										"value": "'@{variables('DonorfyLotteryPurpose')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCampaign": {
										"value": "'@{variables('DonorfyLotteryCampaign')}'",
										"type": "Expression"
									},
									"DonorfyLotteryTagCategory": {
										"value": "'@{variables('DonorfyLotteryTagCategory')}'",
										"type": "Expression"
									},
									"DonorfyLotteryActiveTag": {
										"value": "'@{variables('DonorfyLotteryActiveTag')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCancelledTag": {
										"value": "'@{variables('DonorfyLotteryCancelledTag')}'",
										"type": "Expression"
									},
									"DonorfyDeceasedReason": {
										"value": "'@{variables('DonorfyDeceasedReason')}'",
										"type": "Expression"
									},
									"DonorfyGoneAwayReason": {
										"value": "'@{variables('DonorfyGoneAwayReason')}'",
										"type": "Expression"
									},
									"DonorfyBankAccount": {
										"value": "'@{variables('DonorfyBankAccount')}'",
										"type": "Expression"
									},
									"DonorfyLotteryProduct": {
										"value": "'@{variables('DonorfyLotteryProduct')}'",
										"type": "Expression"
									},
									"DonorfyFund": {
										"value": "'@{variables('DonorfyFund')}'",
										"type": "Expression"
									},
									"DonorfyDefaultPaymentMethod": {
										"value": "'@{variables('DonorfyDefaultPaymentMethod')}'",
										"type": "Expression"
									},
									"RunDate": "currentDate()",
									"DonorfyDepartment": {
										"value": "'@{variables('DonorfyDepartment')}'",
										"type": "Expression"
									},
									"DonorfyLotteryWinnerTag": {
										"value": "'@{variables('DonorfyLotteryWinnerTag')}'",
										"type": "Expression"
									},
									"DonorfyLotterySelfExcludeTag": {
										"value": "'@{variables('DonorfyLotterySelfExcludeTag')}'",
										"type": "Expression"
									},
									"DonorfyDonationProduct": {
										"value": "'@{variables('DonorfyDonationProduct')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SterlingLotteryInBlobStorage": {},
									"SterlingLotteryWinnersInBlobStorage": {},
									"SterlingLotteryPaymentsInBlobStorage": {},
									"SterlingLotteryGADsInBlobStorage": {},
									"DonorfyConstituentImportStagingTable": {},
									"DonorfyPurposesImportStagingTable": {},
									"DonorfyTagsImportStagingTable": {},
									"DonorfyActivitiesImportStagingTable": {},
									"DonorfyTransactionsImportStagingTable": {},
									"DonorfyWinnerTagsImportStagingTable": {},
									"DonorfySelfExcludeTagsImportStagingTable": {},
									"DonorfyTransactionAdditionalAllocationssImportStagingTable": {},
									"DonorfyGADStagingTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set DonorfyKeyPrefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyPrefix",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyKeyPrefix)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDepartment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDepartment",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDepartment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryWinnerTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryWinnerTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryWinnerTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotterySelfExcludeTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotterySelfExcludeTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Process Match Constituents to Donorfy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageLocation",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIAccessKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DonorfyIntegrationsMatchConstituentsToDonorfy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								},
								"DonorfyKeyStorageLocation": {
									"value": "@variables('DonorfyKeyStorageLocation')",
									"type": "Expression"
								},
								"DonorfyKeyStorageType": {
									"value": "@variables('DonorfyKeyStorageType')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LookupDonorfyKeyStorage",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dkst.[Value] AS DonorfyKeyStorageType,\n    dksl.[Value] AS DonorfyKeyStorageLocation\n  FROM [integration].[IntegrationImportSettings] dkst\n  INNER JOIN [integration].[IntegrationImportSettings] dksl\n  ON dksl.TenantCode = dkst.TenantCode\n  AND dksl.IntegrationName = dkst.IntegrationName\n  AND dksl.[Key] = 'DonorfyKeyStorageLocation'\n  WHERE dkst.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dkst.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dkst.[Key] = 'DonorfyKeyStorageType'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageType",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageLocation",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageLocation",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageLocation)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupAPIDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT un.[Value] AS APIUserName, ak.[Value] as APIAccessKey\n  FROM [integration].[IntegrationImportSettings] un\n  INNER JOIN [integration].[IntegrationImportSettings] ak\n  ON ak.TenantCode = un.TenantCode\n  AND ak.IntegrationName = un.IntegrationName\n  AND ak.[Key] = 'APIAccessKey'\n  WHERE un.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND un.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND un.[Key] = 'APIUserName'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set APIUserName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIUserName",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIUserName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set APIAccessKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIAccessKey",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIAccessKey)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Last Pipeline Run ID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[integration].[GetLastPipelineRunId]",
								"storedProcedureParameters": {
									"IntegrationName": {
										"value": {
											"value": "@pipeline().parameters.IntegrationName",
											"type": "Expression"
										}
									},
									"TenantCode": {
										"value": {
											"value": "@pipeline().parameters.TenantCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLStoredProcCall",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update Unchanged Import Constituents To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Last Pipeline Run ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[DiffImportRunConstituents]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastADFPipelineRunId": {
									"value": {
										"value": "@if(not(equals(activity('Get Last Pipeline Run ID').output.firstRow.Value,'')),activity('Get Last Pipeline Run ID').output.firstRow.Value,'11111111-1111-1111-1111-111111111111')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Unmatched Cancelled Players To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Unchanged Import Constituents To Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[MarkProcessedUnmatchedCancelledPlayers]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryTagCategory": {
									"value": {
										"value": "@variables('DonorfyLotteryTagCategory')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryCancelledTag": {
									"value": {
										"value": "@variables('DonorfyLotteryCancelledTag')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Tags for Deletion",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Unmatched Cancelled Players To Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[AddTagsForDeletion]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryTagCategory": {
									"value": {
										"value": "@variables('DonorfyLotteryTagCategory')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryCancelledTag": {
									"value": {
										"value": "@variables('DonorfyLotteryCancelledTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryActiveTag": {
									"value": {
										"value": "@variables('DonorfyLotteryActiveTag')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Execute Send Error Teams Message",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendAlertToTeamsChannel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().parameters.Subscription",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().parameters.ResourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "Integration failed while matching Constituents.  ",
								"message": "Integration failed while matching Constituents.  Manual intervention is needed!",
								"teamWebhookUrls": {
									"value": "@pipeline().parameters.ErrorAlertDestinationWebhooks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set Constiuent Channel Consents Null for Skyline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Add Tags for Deletion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetImportConstituentChannelConsentsNull]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Additional Allocation Transactions with FK ID",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetAdditionAllocationFKTransactionImportID]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									}
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									}
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									}
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetDonorfyDonationProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDonationProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyDonationProduct)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"ErrorAlertDestinationWebhooks": {
						"type": "string",
						"defaultValue": [
							"https://mastict.webhook.office.com/webhookb2/fe4903b3-4a31-4a06-a361-e45caa7cbf88@93183a8b-45b8-4208-a95c-26fb477572e5/IncomingWebhook/6f63b1d955bd48eab46d10fa6b66bcaa/a112ca9c-4af6-4af5-a5db-5c8b6f213a31"
						]
					},
					"Subscription": {
						"type": "string",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "NWAA_DONORFY"
					}
				},
				"variables": {
					"DonorfyKeyPrefix": {
						"type": "String"
					},
					"APIUserName": {
						"type": "String"
					},
					"DonorfyKeyStorageType": {
						"type": "String"
					},
					"DonorfyKeyStorageLocation": {
						"type": "String"
					},
					"DonorfyLotteryPurpose": {
						"type": "String"
					},
					"DonorfyLotteryCampaign": {
						"type": "String"
					},
					"DonorfyLotteryTagCategory": {
						"type": "String"
					},
					"DonorfyLotteryActiveTag": {
						"type": "String"
					},
					"DonorfyLotteryCancelledTag": {
						"type": "String"
					},
					"DonorfyDeceasedReason": {
						"type": "String"
					},
					"DonorfyGoneAwayReason": {
						"type": "String"
					},
					"DonorfyBankAccount": {
						"type": "String"
					},
					"DonorfyLotteryProduct": {
						"type": "String"
					},
					"DonorfyFund": {
						"type": "String"
					},
					"DonorfyDefaultPaymentMethod": {
						"type": "String"
					},
					"NumberOfRunsToKeep": {
						"type": "String"
					},
					"APIAccessKey": {
						"type": "String"
					},
					"NumberProcessedEachLoop": {
						"type": "String"
					},
					"DonorfyDepartment": {
						"type": "String"
					},
					"DonorfyLotteryWinnerTag": {
						"type": "String"
					},
					"DonorfyLotterySelfExcludeTag": {
						"type": "String"
					},
					"DonorfyDonationProduct": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-10T16:37:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIntegrationImportSettings')]",
				"[concat(variables('factoryId'), '/dataflows/SterlingLottery_to_DonorfyStaging')]",
				"[concat(variables('factoryId'), '/pipelines/DonorfyIntegrationsMatchConstituentsToDonorfy')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLStoredProcCall')]",
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/SendAlertToTeamsChannel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryToDonorfy_LoadStagingTablesOnly_Matching_NoTags')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDonorfyLotterySettings",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT lp.[Value] AS DonorfyLotteryPurpose,\n  lc.[Value] AS DonorfyLotteryCampaign,\n  lpr.[Value] AS DonorfyLotteryProduct,\n  kp.[Value] AS DonorfyKeyPrefix,\n  dpr.[Value] AS DonorfyDonationProduct\n  FROM [integration].[IntegrationImportSettings] lp\n  INNER JOIN [integration].[IntegrationImportSettings] lc\n  ON  lc.TenantCode = lp.TenantCode\n  AND lc.IntegrationName = lp.IntegrationName\n  AND lc.[Key] = 'DonorfyLotteryCampaign'\n  INNER JOIN [integration].[IntegrationImportSettings] lpr\n  ON  lpr.TenantCode = lp.TenantCode\n  AND lpr.IntegrationName = lp.IntegrationName\n  AND lpr.[Key] = 'DonorfyLotteryProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] dpr\n  ON  dpr.TenantCode = lp.TenantCode\n  AND dpr.IntegrationName = lp.IntegrationName\n  AND dpr.[Key] = 'DonorfyDonationProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] kp\n  ON  kp.TenantCode = lp.TenantCode\n  AND kp.IntegrationName = lp.IntegrationName\n  AND kp.[Key] = 'DonorfyKeyPrefix'\n  WHERE lp.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND lp.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND lp.[Key] = 'DonorfyLotteryPurpose'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryPurpose",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryPurpose",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryPurpose)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCampaign",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCampaign",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryCampaign)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyLotteryTags",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dltc.[Value] AS DonorfyLotteryTagCategory,\n dat.Value AS DonorfyLotteryActiveTag,\n dct.Value AS DonorfyLotteryCancelledTag,\n dlwt.Value AS DonorfyLotteryWinnerTag,\n dlset.Value AS DonorfyLotterySelfExcludeTag\n  FROM [integration].[IntegrationImportSettings] dltc\n  INNER JOIN [integration].[IntegrationImportSettings] dat \n  ON dat.TenantCode = dltc.TenantCode\n  AND dat.IntegrationName = dltc.IntegrationName\n  AND dat.[Key] = 'DonorfyLotteryActiveTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dct \n  ON dct.TenantCode = dltc.TenantCode\n  AND dct.IntegrationName = dltc.IntegrationName\n  AND dct.[Key] = 'DonorfyLotteryCancelledTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlwt \n  ON dlwt.TenantCode = dltc.TenantCode\n  AND dlwt.IntegrationName = dltc.IntegrationName\n  AND dlwt.[Key] = 'DonorfyLotteryWinnerTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlset \n  ON dlset.TenantCode = dltc.TenantCode\n  AND dlset.IntegrationName = dltc.IntegrationName\n  AND dlset.[Key] = 'DonorfyLotterySelfExcludeTag'\n  WHERE dltc.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dltc.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dltc.[Key] = 'DonorfyLotteryTagCategory'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryTagCategory",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryTagCategory",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryTagCategory)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryActiveTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryActiveTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryActiveTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCancelledTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCancelledTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryCancelledTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyReasons",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ddr.[Value] AS DonorfyDeceasedReason,\n    dgar.[Value] AS DonorfyGoneAwayReason\n  FROM [integration].[IntegrationImportSettings] ddr\n  INNER JOIN [integration].[IntegrationImportSettings] dgar \n  ON dgar.TenantCode = ddr.TenantCode\n  AND dgar.IntegrationName = ddr.IntegrationName\n  AND dgar.[Key] = 'DonorfyGoneAwayReason'\n  WHERE ddr.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ddr.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ddr.[Key] = 'DonorfyDeceasedReason'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyDeceasedReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDeceasedReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyDeceasedReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyGoneAwayReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGoneAwayReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyGoneAwayReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyTransactionDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ba.[Value] AS DonorfyBankAccount,\n    f.[Value] AS DonorfyFund,\n    pm.[Value] As DonorfyDefaultPaymentMethod,\n    dd.[Value] As DonorfyDepartment\n  FROM [integration].[IntegrationImportSettings] ba\n  INNER JOIN [integration].[IntegrationImportSettings] f \n  ON f.TenantCode = ba.TenantCode\n  AND f.IntegrationName = ba.IntegrationName\n  AND f.[Key] = 'DonorfyFund'\n  INNER JOIN [integration].[IntegrationImportSettings] pm \n  ON pm.TenantCode = ba.TenantCode\n  AND pm.IntegrationName = ba.IntegrationName\n  AND pm.[Key] = 'DonorfyDefaultPaymentMethod'\n  INNER JOIN [integration].[IntegrationImportSettings] dd \n  ON dd.TenantCode = ba.TenantCode\n  AND dd.IntegrationName = ba.IntegrationName\n  AND dd.[Key] = 'DonorfyDepartment'\n  WHERE ba.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ba.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ba.[Key] = 'DonorfyBankAccount'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetDonorfyBankAccount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyBankAccount",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyBankAccount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyLotteryProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyFund",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyFund",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyFund)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDefaultPaymentMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDefaultPaymentMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDefaultPaymentMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SterlingLottery_to_DonorfyStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetDonorfyLotteryProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryTagCategory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCampaign",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryPurpose",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryActiveTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCancelledTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyDeceasedReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGoneAwayReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyBankAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyFund",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDefaultPaymentMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyPrefix",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDepartment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryWinnerTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDonationProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGADDeclarationMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SterlingLottery_to_DonorfyStaging",
								"type": "DataFlowReference",
								"parameters": {
									"DonorfyTenantCode": {
										"value": "'@{pipeline().parameters.TenantCode}'",
										"type": "Expression"
									},
									"IntegrationName": {
										"value": "'@{pipeline().parameters.IntegrationName}'",
										"type": "Expression"
									},
									"ADFPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"ADFPipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"DonorfyKeyPrefix": {
										"value": "'@{variables('DonorfyKeyPrefix')}'",
										"type": "Expression"
									},
									"DonorfyLotteryPurpose": {
										"value": "'@{variables('DonorfyLotteryPurpose')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCampaign": {
										"value": "'@{variables('DonorfyLotteryCampaign')}'",
										"type": "Expression"
									},
									"DonorfyLotteryTagCategory": {
										"value": "'@{variables('DonorfyLotteryTagCategory')}'",
										"type": "Expression"
									},
									"DonorfyLotteryActiveTag": {
										"value": "'@{variables('DonorfyLotteryActiveTag')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCancelledTag": {
										"value": "'@{variables('DonorfyLotteryCancelledTag')}'",
										"type": "Expression"
									},
									"DonorfyDeceasedReason": {
										"value": "'@{variables('DonorfyDeceasedReason')}'",
										"type": "Expression"
									},
									"DonorfyGoneAwayReason": {
										"value": "'@{variables('DonorfyGoneAwayReason')}'",
										"type": "Expression"
									},
									"DonorfyBankAccount": {
										"value": "'@{variables('DonorfyBankAccount')}'",
										"type": "Expression"
									},
									"DonorfyLotteryProduct": {
										"value": "'@{variables('DonorfyLotteryProduct')}'",
										"type": "Expression"
									},
									"DonorfyFund": {
										"value": "'@{variables('DonorfyFund')}'",
										"type": "Expression"
									},
									"DonorfyDefaultPaymentMethod": {
										"value": "'@{variables('DonorfyDefaultPaymentMethod')}'",
										"type": "Expression"
									},
									"RunDate": "currentDate()",
									"DonorfyDepartment": {
										"value": "'@{variables('DonorfyDepartment')}'",
										"type": "Expression"
									},
									"DonorfyLotteryWinnerTag": {
										"value": "'@{variables('DonorfyLotteryWinnerTag')}'",
										"type": "Expression"
									},
									"DonorfyLotterySelfExcludeTag": {
										"value": "'@{variables('DonorfyLotterySelfExcludeTag')}'",
										"type": "Expression"
									},
									"DonorfyDonationProduct": {
										"value": "'@{variables('DonorfyDonationProduct')}'",
										"type": "Expression"
									},
									"DonorfyGADMethod": {
										"value": "'@{variables('DonorfyGADDeclarationMethod')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SterlingLotteryInBlobStorage": {},
									"SterlingLotteryWinnersInBlobStorage": {},
									"SterlingLotteryPaymentsInBlobStorage": {},
									"SterlingLotteryGADsInBlobStorage": {},
									"DonorfyConstituentImportStagingTable": {},
									"DonorfyPurposesImportStagingTable": {},
									"DonorfyTagsImportStagingTable": {},
									"DonorfyActivitiesImportStagingTable": {},
									"DonorfyTransactionsImportStagingTable": {},
									"DonorfyWinnerTagsImportStagingTable": {},
									"DonorfySelfExcludeTagsImportStagingTable": {},
									"DonorfyTransactionAdditionalAllocationssImportStagingTable": {},
									"DonorfyGADStagingTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set DonorfyKeyPrefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyPrefix",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyKeyPrefix)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDepartment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDepartment",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDepartment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryWinnerTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryWinnerTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryWinnerTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotterySelfExcludeTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotterySelfExcludeTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Process Match Constituents to Donorfy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SterlingLottery_to_DonorfyStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyStorageLocation",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set APIAccessKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DonorfyIntegrationsMatchConstituentsToDonorfy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"APIUserName": {
									"value": "@variables('APIUserName')",
									"type": "Expression"
								},
								"TenantCode": {
									"value": "@pipeline().parameters.TenantCode",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"CallingPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"CallingPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"APIAccessKey": {
									"value": "@variables('APIAccessKey')",
									"type": "Expression"
								},
								"DonorfyKeyStorageLocation": {
									"value": "@variables('DonorfyKeyStorageLocation')",
									"type": "Expression"
								},
								"DonorfyKeyStorageType": {
									"value": "@variables('DonorfyKeyStorageType')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LookupDonorfyKeyStorage",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dkst.[Value] AS DonorfyKeyStorageType,\n    dksl.[Value] AS DonorfyKeyStorageLocation\n  FROM [integration].[IntegrationImportSettings] dkst\n  INNER JOIN [integration].[IntegrationImportSettings] dksl\n  ON dksl.TenantCode = dkst.TenantCode\n  AND dksl.IntegrationName = dkst.IntegrationName\n  AND dksl.[Key] = 'DonorfyKeyStorageLocation'\n  WHERE dkst.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dkst.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dkst.[Key] = 'DonorfyKeyStorageType'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageType",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyKeyStorageLocation",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyKeyStorage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyStorageLocation",
							"value": {
								"value": "@string(activity('LookupDonorfyKeyStorage').output.firstRow.DonorfyKeyStorageLocation)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupAPIDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT un.[Value] AS APIUserName, ak.[Value] as APIAccessKey\n  FROM [integration].[IntegrationImportSettings] un\n  INNER JOIN [integration].[IntegrationImportSettings] ak\n  ON ak.TenantCode = un.TenantCode\n  AND ak.IntegrationName = un.IntegrationName\n  AND ak.[Key] = 'APIAccessKey'\n  WHERE un.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND un.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND un.[Key] = 'APIUserName'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set APIUserName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIUserName",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIUserName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set APIAccessKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupAPIDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "APIAccessKey",
							"value": {
								"value": "@string(activity('LookupAPIDetails').output.firstRow.APIAccessKey)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Last Pipeline Run ID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[integration].[GetLastPipelineRunId]",
								"storedProcedureParameters": {
									"IntegrationName": {
										"value": {
											"value": "@pipeline().parameters.IntegrationName",
											"type": "Expression"
										}
									},
									"TenantCode": {
										"value": {
											"value": "@pipeline().parameters.TenantCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLStoredProcCall",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update Unchanged Import Constituents To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Constiuent Channel Consents Null for Skyline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[DiffImportRunConstituents]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastADFPipelineRunId": {
									"value": {
										"value": "@if(not(equals(activity('Get Last Pipeline Run ID').output.firstRow.Value,'')),activity('Get Last Pipeline Run ID').output.firstRow.Value,'11111111-1111-1111-1111-111111111111')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Unmatched Cancelled Players To Processed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Unchanged Import Constituents To Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[MarkProcessedUnmatchedCancelledPlayers]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryTagCategory": {
									"value": {
										"value": "@variables('DonorfyLotteryTagCategory')",
										"type": "Expression"
									},
									"type": "String"
								},
								"LotteryCancelledTag": {
									"value": {
										"value": "@variables('DonorfyLotteryCancelledTag')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Execute Send Error Teams Message",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Process Match Constituents to Donorfy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendAlertToTeamsChannel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().parameters.Subscription",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().parameters.ResourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "Integration failed while matching Constituents.  ",
								"message": "Integration failed while matching Constituents.  Manual intervention is needed!",
								"teamWebhookUrls": {
									"value": "@pipeline().parameters.ErrorAlertDestinationWebhooks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set Constiuent Channel Consents Null for Skyline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Last Pipeline Run ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[integration].[SetImportConstituentChannelConsentsNull]",
							"storedProcedureParameters": {
								"ADFPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"ADFPipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": {
										"value": "@pipeline().parameters.IntegrationName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantCode": {
									"value": {
										"value": "@pipeline().parameters.TenantCode",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NWAAAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetDonorfyDonationProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDonationProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyDonationProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyGADDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dm.[Value] AS DonorfyGADDeclarationMethod\n  FROM [integration].[IntegrationImportSettings] dm\n  WHERE dm.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dm.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dm.[Key] = 'DonorfyGADDeclarationMethod'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyGADDeclarationMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyGADDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGADDeclarationMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyGADDefaults').output.firstRow.DonorfyGADDeclarationMethod)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"ErrorAlertDestinationWebhooks": {
						"type": "string",
						"defaultValue": [
							"https://mastict.webhook.office.com/webhookb2/fe4903b3-4a31-4a06-a361-e45caa7cbf88@93183a8b-45b8-4208-a95c-26fb477572e5/IncomingWebhook/6f63b1d955bd48eab46d10fa6b66bcaa/a112ca9c-4af6-4af5-a5db-5c8b6f213a31"
						]
					},
					"Subscription": {
						"type": "string",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "NWAA_DONORFY"
					}
				},
				"variables": {
					"DonorfyKeyPrefix": {
						"type": "String"
					},
					"APIUserName": {
						"type": "String"
					},
					"DonorfyKeyStorageType": {
						"type": "String"
					},
					"DonorfyKeyStorageLocation": {
						"type": "String"
					},
					"DonorfyLotteryPurpose": {
						"type": "String"
					},
					"DonorfyLotteryCampaign": {
						"type": "String"
					},
					"DonorfyLotteryTagCategory": {
						"type": "String"
					},
					"DonorfyLotteryActiveTag": {
						"type": "String"
					},
					"DonorfyLotteryCancelledTag": {
						"type": "String"
					},
					"DonorfyDeceasedReason": {
						"type": "String"
					},
					"DonorfyGoneAwayReason": {
						"type": "String"
					},
					"DonorfyBankAccount": {
						"type": "String"
					},
					"DonorfyLotteryProduct": {
						"type": "String"
					},
					"DonorfyFund": {
						"type": "String"
					},
					"DonorfyDefaultPaymentMethod": {
						"type": "String"
					},
					"NumberOfRunsToKeep": {
						"type": "String"
					},
					"APIAccessKey": {
						"type": "String"
					},
					"NumberProcessedEachLoop": {
						"type": "String"
					},
					"DonorfyDepartment": {
						"type": "String"
					},
					"DonorfyLotteryWinnerTag": {
						"type": "String"
					},
					"DonorfyLotterySelfExcludeTag": {
						"type": "String"
					},
					"DonorfyDonationProduct": {
						"type": "String"
					},
					"DonorfyGADDeclarationMethod": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-10T16:37:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIntegrationImportSettings')]",
				"[concat(variables('factoryId'), '/dataflows/SterlingLottery_to_DonorfyStaging')]",
				"[concat(variables('factoryId'), '/pipelines/DonorfyIntegrationsMatchConstituentsToDonorfy')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLStoredProcCall')]",
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/SendAlertToTeamsChannel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryToDonorfy_LoadStagingTablesOnly_v1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDonorfyLotterySettings",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT lp.[Value] AS DonorfyLotteryPurpose,\n  lc.[Value] AS DonorfyLotteryCampaign,\n  lpr.[Value] AS DonorfyLotteryProduct,\n  kp.[Value] AS DonorfyKeyPrefix\n  FROM [integration].[IntegrationImportSettings] lp\n  INNER JOIN [integration].[IntegrationImportSettings] lc\n  ON  lc.TenantCode = lp.TenantCode\n  AND lc.IntegrationName = lp.IntegrationName\n  AND lc.[Key] = 'DonorfyLotteryCampaign'\n  INNER JOIN [integration].[IntegrationImportSettings] lpr\n  ON  lpr.TenantCode = lp.TenantCode\n  AND lpr.IntegrationName = lp.IntegrationName\n  AND lpr.[Key] = 'DonorfyLotteryProduct'\n  INNER JOIN [integration].[IntegrationImportSettings] kp\n  ON  kp.TenantCode = lp.TenantCode\n  AND kp.IntegrationName = lp.IntegrationName\n  AND kp.[Key] = 'DonorfyKeyPrefix'\n  WHERE lp.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND lp.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND lp.[Key] = 'DonorfyLotteryPurpose'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryPurpose",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryPurpose",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryPurpose)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCampaign",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCampaign",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryCampaign)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyLotteryTags",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT dltc.[Value] AS DonorfyLotteryTagCategory,\n dat.Value AS DonorfyLotteryActiveTag,\n dct.Value AS DonorfyLotteryCancelledTag,\n dlwt.Value AS DonorfyLotteryWinnerTag,\n dlset.Value AS DonorfyLotterySelfExcludeTag\n  FROM [integration].[IntegrationImportSettings] dltc\n  INNER JOIN [integration].[IntegrationImportSettings] dat \n  ON dat.TenantCode = dltc.TenantCode\n  AND dat.IntegrationName = dltc.IntegrationName\n  AND dat.[Key] = 'DonorfyLotteryActiveTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dct \n  ON dct.TenantCode = dltc.TenantCode\n  AND dct.IntegrationName = dltc.IntegrationName\n  AND dct.[Key] = 'DonorfyLotteryCancelledTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlwt \n  ON dlwt.TenantCode = dltc.TenantCode\n  AND dlwt.IntegrationName = dltc.IntegrationName\n  AND dlwt.[Key] = 'DonorfyLotteryWinnerTag'\n  INNER JOIN [integration].[IntegrationImportSettings] dlset \n  ON dlset.TenantCode = dltc.TenantCode\n  AND dlset.IntegrationName = dltc.IntegrationName\n  AND dlset.[Key] = 'DonorfyLotterySelfExcludeTag'\n  WHERE dltc.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND dltc.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND dltc.[Key] = 'DonorfyLotteryTagCategory'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyLotteryTagCategory",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryTagCategory",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryTagCategory)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryActiveTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryActiveTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryActiveTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryCancelledTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryCancelledTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryCancelledTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyReasons",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ddr.[Value] AS DonorfyDeceasedReason,\n    dgar.[Value] AS DonorfyGoneAwayReason\n  FROM [integration].[IntegrationImportSettings] ddr\n  INNER JOIN [integration].[IntegrationImportSettings] dgar \n  ON dgar.TenantCode = ddr.TenantCode\n  AND dgar.IntegrationName = ddr.IntegrationName\n  AND dgar.[Key] = 'DonorfyGoneAwayReason'\n  WHERE ddr.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ddr.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ddr.[Key] = 'DonorfyDeceasedReason'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set DonorfyDeceasedReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDeceasedReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyDeceasedReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyGoneAwayReason",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyReasons",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyGoneAwayReason",
							"value": {
								"value": "@string(activity('LookupDonorfyReasons').output.firstRow.DonorfyGoneAwayReason)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupDonorfyTransactionDefaults",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ba.[Value] AS DonorfyBankAccount,\n    f.[Value] AS DonorfyFund,\n    pm.[Value] As DonorfyDefaultPaymentMethod,\n    dd.[Value] As DonorfyDepartment\n  FROM [integration].[IntegrationImportSettings] ba\n  INNER JOIN [integration].[IntegrationImportSettings] f \n  ON f.TenantCode = ba.TenantCode\n  AND f.IntegrationName = ba.IntegrationName\n  AND f.[Key] = 'DonorfyFund'\n  INNER JOIN [integration].[IntegrationImportSettings] pm \n  ON pm.TenantCode = ba.TenantCode\n  AND pm.IntegrationName = ba.IntegrationName\n  AND pm.[Key] = 'DonorfyDefaultPaymentMethod'\n  INNER JOIN [integration].[IntegrationImportSettings] dd \n  ON dd.TenantCode = ba.TenantCode\n  AND dd.IntegrationName = ba.IntegrationName\n  AND dd.[Key] = 'DonorfyDepartment'\n  WHERE ba.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND ba.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND ba.[Key] = 'DonorfyBankAccount'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetDonorfyBankAccount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyBankAccount",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyBankAccount)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyLotteryProduct",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryProduct",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyLotteryProduct)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyFund",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyFund",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyFund)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDefaultPaymentMethod",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDefaultPaymentMethod",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDefaultPaymentMethod)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SterlingLottery_to_DonorfyStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetDonorfyLotteryProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryTagCategory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCampaign",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryPurpose",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryActiveTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryCancelledTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyDeceasedReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyGoneAwayReason",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyBankAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyFund",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDefaultPaymentMethod",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyKeyPrefix",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetDonorfyDepartment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryWinnerTag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SterlingLottery_to_DonorfyStaging",
								"type": "DataFlowReference",
								"parameters": {
									"DonorfyTenantCode": {
										"value": "'@{pipeline().parameters.TenantCode}'",
										"type": "Expression"
									},
									"IntegrationName": {
										"value": "'@{pipeline().parameters.IntegrationName}'",
										"type": "Expression"
									},
									"ADFPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"ADFPipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"DonorfyKeyPrefix": {
										"value": "'@{variables('DonorfyKeyPrefix')}'",
										"type": "Expression"
									},
									"DonorfyLotteryPurpose": {
										"value": "'@{variables('DonorfyLotteryPurpose')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCampaign": {
										"value": "'@{variables('DonorfyLotteryCampaign')}'",
										"type": "Expression"
									},
									"DonorfyLotteryTagCategory": {
										"value": "'@{variables('DonorfyLotteryTagCategory')}'",
										"type": "Expression"
									},
									"DonorfyLotteryActiveTag": {
										"value": "'@{variables('DonorfyLotteryActiveTag')}'",
										"type": "Expression"
									},
									"DonorfyLotteryCancelledTag": {
										"value": "'@{variables('DonorfyLotteryCancelledTag')}'",
										"type": "Expression"
									},
									"DonorfyDeceasedReason": {
										"value": "'@{variables('DonorfyDeceasedReason')}'",
										"type": "Expression"
									},
									"DonorfyGoneAwayReason": {
										"value": "'@{variables('DonorfyGoneAwayReason')}'",
										"type": "Expression"
									},
									"DonorfyBankAccount": {
										"value": "'@{variables('DonorfyBankAccount')}'",
										"type": "Expression"
									},
									"DonorfyLotteryProduct": {
										"value": "'@{variables('DonorfyLotteryProduct')}'",
										"type": "Expression"
									},
									"DonorfyFund": {
										"value": "'@{variables('DonorfyFund')}'",
										"type": "Expression"
									},
									"DonorfyDefaultPaymentMethod": {
										"value": "'@{variables('DonorfyDefaultPaymentMethod')}'",
										"type": "Expression"
									},
									"RunDate": "currentDate()",
									"DonorfyDepartment": {
										"value": "'@{variables('DonorfyDepartment')}'",
										"type": "Expression"
									},
									"DonorfyLotteryWinnerTag": {
										"value": "'@{variables('DonorfyLotteryWinnerTag')}'",
										"type": "Expression"
									},
									"DonorfyLotterySelfExcludeTag": {
										"value": "'@{variables('DonorfyLotterySelfExcludeTag')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SterlingLotteryInBlobStorage": {},
									"SterlingLotteryWinnersInBlobStorage": {},
									"SterlingLotteryPaymentsInBlobStorage": {},
									"SterlingLotteryGADsInBlobStorage": {},
									"DonorfyConstituentImportStagingTable": {},
									"DonorfyPurposesImportStagingTable": {},
									"DonorfyTagsImportStagingTable": {},
									"DonorfyActivitiesImportStagingTable": {},
									"DonorfyTransactionsImportStagingTable": {},
									"DonorfyWinnerTagsImportStagingTable": {},
									"DonorfySelfExcludeTagsImportStagingTable": {},
									"DonorfyTransactionAdditionalAllocationssImportStagingTable": {},
									"DonorfyGADStagingTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set DonorfyKeyPrefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotterySettings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyKeyPrefix",
							"value": {
								"value": "@string(activity('LookupDonorfyLotterySettings').output.firstRow.DonorfyKeyPrefix)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDonorfyDepartment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyTransactionDefaults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyDepartment",
							"value": {
								"value": "@string(activity('LookupDonorfyTransactionDefaults').output.firstRow.DonorfyDepartment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryWinnerTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotteryWinnerTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotteryWinnerTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DonorfyLotteryDonorfyLotterySelfExcludeTag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupDonorfyLotteryTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DonorfyLotterySelfExcludeTag",
							"value": {
								"value": "@string(activity('LookupDonorfyLotteryTags').output.firstRow.DonorfyLotterySelfExcludeTag)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupAPIDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT un.[Value] AS APIUserName, ak.[Value] as APIAccessKey\n  FROM [integration].[IntegrationImportSettings] un\n  INNER JOIN [integration].[IntegrationImportSettings] ak\n  ON ak.TenantCode = un.TenantCode\n  AND ak.IntegrationName = un.IntegrationName\n  AND ak.[Key] = 'APIAccessKey'\n  WHERE un.TenantCode = '@{pipeline().parameters.TenantCode}'\n  AND un.IntegrationName = '@{pipeline().parameters.IntegrationName}'\n  AND un.[Key] = 'APIUserName'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLIntegrationImportSettings",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TenantCode": {
						"type": "string",
						"defaultValue": "ZRTXSIYSU7"
					},
					"IntegrationName": {
						"type": "string",
						"defaultValue": "NWAASterlingLottery"
					},
					"ErrorAlertDestinationWebhooks": {
						"type": "string",
						"defaultValue": [
							"https://mastict.webhook.office.com/webhookb2/fe4903b3-4a31-4a06-a361-e45caa7cbf88@93183a8b-45b8-4208-a95c-26fb477572e5/IncomingWebhook/6f63b1d955bd48eab46d10fa6b66bcaa/a112ca9c-4af6-4af5-a5db-5c8b6f213a31"
						]
					},
					"Subscription": {
						"type": "string",
						"defaultValue": "f92b78e2-ea05-4117-880b-1c4ba8755802"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "NWAA_DONORFY"
					}
				},
				"variables": {
					"DonorfyKeyPrefix": {
						"type": "String"
					},
					"APIUserName": {
						"type": "String"
					},
					"DonorfyKeyStorageType": {
						"type": "String"
					},
					"DonorfyKeyStorageLocation": {
						"type": "String"
					},
					"DonorfyLotteryPurpose": {
						"type": "String"
					},
					"DonorfyLotteryCampaign": {
						"type": "String"
					},
					"DonorfyLotteryTagCategory": {
						"type": "String"
					},
					"DonorfyLotteryActiveTag": {
						"type": "String"
					},
					"DonorfyLotteryCancelledTag": {
						"type": "String"
					},
					"DonorfyDeceasedReason": {
						"type": "String"
					},
					"DonorfyGoneAwayReason": {
						"type": "String"
					},
					"DonorfyBankAccount": {
						"type": "String"
					},
					"DonorfyLotteryProduct": {
						"type": "String"
					},
					"DonorfyFund": {
						"type": "String"
					},
					"DonorfyDefaultPaymentMethod": {
						"type": "String"
					},
					"NumberOfRunsToKeep": {
						"type": "String"
					},
					"APIAccessKey": {
						"type": "String"
					},
					"NumberProcessedEachLoop": {
						"type": "String"
					},
					"DonorfyDepartment": {
						"type": "String"
					},
					"DonorfyLotteryWinnerTag": {
						"type": "String"
					},
					"DonorfyLotterySelfExcludeTag": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-26T17:09:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIntegrationImportSettings')]",
				"[concat(variables('factoryId'), '/dataflows/SterlingLottery_to_DonorfyStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLImportActivities')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NWAAAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ActivitiesImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantCode",
						"type": "nvarchar"
					},
					{
						"name": "IntegrationName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineRunId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IntegrationSourceConstituentKey",
						"type": "nvarchar"
					},
					{
						"name": "ProcessedRecord",
						"type": "bit"
					},
					{
						"name": "ExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "LinkedConstituentExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "ActivityNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Campaign",
						"type": "nvarchar"
					},
					{
						"name": "DateOfActivity",
						"type": "date"
					},
					{
						"name": "ActivityType",
						"type": "nvarchar"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "ShowAlert",
						"type": "bit"
					},
					{
						"name": "SegmentCode",
						"type": "nvarchar"
					},
					{
						"name": "SegmentName",
						"type": "nvarchar"
					},
					{
						"name": "ConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "ActivityId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_Campaign",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_ActivityType",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_TenantId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Code1",
						"type": "nvarchar"
					},
					{
						"name": "Code2",
						"type": "nvarchar"
					},
					{
						"name": "Code3",
						"type": "nvarchar"
					},
					{
						"name": "Code4",
						"type": "nvarchar"
					},
					{
						"name": "Code5",
						"type": "nvarchar"
					},
					{
						"name": "Code6",
						"type": "nvarchar"
					},
					{
						"name": "Code7",
						"type": "nvarchar"
					},
					{
						"name": "Code8",
						"type": "nvarchar"
					},
					{
						"name": "Code9",
						"type": "nvarchar"
					},
					{
						"name": "Code10",
						"type": "nvarchar"
					},
					{
						"name": "Date1",
						"type": "date"
					},
					{
						"name": "Date2",
						"type": "date"
					},
					{
						"name": "Date3",
						"type": "date"
					},
					{
						"name": "Date4",
						"type": "date"
					},
					{
						"name": "Date5",
						"type": "date"
					},
					{
						"name": "Date6",
						"type": "date"
					},
					{
						"name": "Date7",
						"type": "date"
					},
					{
						"name": "Date8",
						"type": "date"
					},
					{
						"name": "Date9",
						"type": "date"
					},
					{
						"name": "Date10",
						"type": "date"
					},
					{
						"name": "Number1",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number2",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number3",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number4",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number5",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number6",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number7",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number8",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number9",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number10",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "YesNo1",
						"type": "bit"
					},
					{
						"name": "YesNo2",
						"type": "bit"
					},
					{
						"name": "YesNo3",
						"type": "bit"
					},
					{
						"name": "YesNo4",
						"type": "bit"
					},
					{
						"name": "YesNo5",
						"type": "bit"
					},
					{
						"name": "YesNo6",
						"type": "bit"
					},
					{
						"name": "YesNo7",
						"type": "bit"
					},
					{
						"name": "YesNo8",
						"type": "bit"
					},
					{
						"name": "YesNo9",
						"type": "bit"
					},
					{
						"name": "YesNo10",
						"type": "bit"
					},
					{
						"name": "LinkUrl",
						"type": "nvarchar"
					},
					{
						"name": "FileName",
						"type": "nvarchar"
					},
					{
						"name": "ErrorMessage",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "integration",
					"table": "Import_Activities"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLImportConstituents')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NWAAAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ConstituentsImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantCode",
						"type": "nvarchar"
					},
					{
						"name": "IntegrationName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineRunId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IntegrationSourceConstituentKey",
						"type": "nvarchar"
					},
					{
						"name": "ProcessedRecord",
						"type": "bit"
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "ArchiveReason",
						"type": "nvarchar"
					},
					{
						"name": "ArchiveDate",
						"type": "date"
					},
					{
						"name": "ExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Formerly",
						"type": "nvarchar"
					},
					{
						"name": "HouseBuildingNumber",
						"type": "nvarchar"
					},
					{
						"name": "Address1",
						"type": "nvarchar"
					},
					{
						"name": "Address2",
						"type": "nvarchar"
					},
					{
						"name": "Town",
						"type": "nvarchar"
					},
					{
						"name": "County",
						"type": "nvarchar"
					},
					{
						"name": "Postcode",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Area",
						"type": "nvarchar"
					},
					{
						"name": "PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "OtherPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "MobilePhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "NationalIDNumber",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress1",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress2",
						"type": "nvarchar"
					},
					{
						"name": "LabelName",
						"type": "nvarchar"
					},
					{
						"name": "Salutation",
						"type": "nvarchar"
					},
					{
						"name": "Work_HouseBuildingNumber",
						"type": "nvarchar"
					},
					{
						"name": "Work_Address1",
						"type": "nvarchar"
					},
					{
						"name": "Work_Address2",
						"type": "nvarchar"
					},
					{
						"name": "Work_Town",
						"type": "nvarchar"
					},
					{
						"name": "Work_County",
						"type": "nvarchar"
					},
					{
						"name": "Work_Postcode",
						"type": "nvarchar"
					},
					{
						"name": "Work_Country",
						"type": "nvarchar"
					},
					{
						"name": "Work_Area",
						"type": "nvarchar"
					},
					{
						"name": "Work_PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "Work_OtherPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "Work_MobilePhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "Work_EmailAddress1",
						"type": "nvarchar"
					},
					{
						"name": "Work_EmailAddress2",
						"type": "nvarchar"
					},
					{
						"name": "Work_LabelName",
						"type": "nvarchar"
					},
					{
						"name": "Work_Salutation",
						"type": "nvarchar"
					},
					{
						"name": "WebSite",
						"type": "nvarchar"
					},
					{
						"name": "RecruitmentCampaign",
						"type": "nvarchar"
					},
					{
						"name": "DateOfBirth",
						"type": "date"
					},
					{
						"name": "YearOfBirth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrganisationName",
						"type": "nvarchar"
					},
					{
						"name": "JobTitle",
						"type": "nvarchar"
					},
					{
						"name": "Department",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "ConstituentType",
						"type": "nvarchar"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "OKToMail",
						"type": "bit"
					},
					{
						"name": "OKToPhone",
						"type": "bit"
					},
					{
						"name": "OKToSMS",
						"type": "bit"
					},
					{
						"name": "OKToEmail",
						"type": "bit"
					},
					{
						"name": "AllowNameSwap",
						"type": "bit"
					},
					{
						"name": "HasGAD",
						"type": "bit"
					},
					{
						"name": "GiftAidNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GADDecDate",
						"type": "date"
					},
					{
						"name": "DeclarationMethod",
						"type": "nvarchar"
					},
					{
						"name": "GADStartDate",
						"type": "date"
					},
					{
						"name": "GADEndDate",
						"type": "date"
					},
					{
						"name": "GADCancelled",
						"type": "bit"
					},
					{
						"name": "GADCancelDate",
						"type": "date"
					},
					{
						"name": "TaxPayerTitle",
						"type": "nvarchar"
					},
					{
						"name": "TaxPayerFirstName",
						"type": "nvarchar"
					},
					{
						"name": "TaxPayerLastName",
						"type": "nvarchar"
					},
					{
						"name": "RefusedGAD",
						"type": "bit"
					},
					{
						"name": "IncludeRow",
						"type": "bit"
					},
					{
						"name": "IsGroupConstituent",
						"type": "bit"
					},
					{
						"name": "FK_TenantId",
						"type": "uniqueidentifier"
					},
					{
						"name": "ConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "GiftAidDecId",
						"type": "uniqueidentifier"
					},
					{
						"name": "TagId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IsGroup",
						"type": "bit"
					},
					{
						"name": "PersonalContactDetailsId",
						"type": "uniqueidentifier"
					},
					{
						"name": "WorkContactDetailsId",
						"type": "uniqueidentifier"
					},
					{
						"name": "OtherContactDetailsId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_ConstituentTypeId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_RecruitmentCampaign",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_CountryId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_ArchiveReasonId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_DeclarationMethod",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_WorkCountryId",
						"type": "uniqueidentifier"
					},
					{
						"name": "MainContactConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "MainContactPersonalContactDetailsId",
						"type": "uniqueidentifier"
					},
					{
						"name": "MainContactWorkContactDetailsId",
						"type": "uniqueidentifier"
					},
					{
						"name": "MainContactOtherContactDetailsId",
						"type": "uniqueidentifier"
					},
					{
						"name": "MainContactFK_ConstituentTypeId",
						"type": "uniqueidentifier"
					},
					{
						"name": "ConstituentNumber",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FK_Area_Id",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_Work_Area_Id",
						"type": "uniqueidentifier"
					},
					{
						"name": "MatchScore",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HowIntegrated",
						"type": "nvarchar"
					},
					{
						"name": "FileName",
						"type": "nvarchar"
					},
					{
						"name": "DateAdded",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ErrorMessage",
						"type": "nvarchar"
					},
					{
						"name": "OriginalConstituentsImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RetryAttempts",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SuccessfullyReprocessed",
						"type": "bit"
					},
					{
						"name": "MatchAttempted",
						"type": "bit"
					},
					{
						"name": "OrderId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Operation",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "integration",
					"table": "Import_Constituents"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLImportGADs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NWAAAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "GADImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantCode",
						"type": "nvarchar"
					},
					{
						"name": "IntegrationName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineRunId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IntegrationSourceConstituentKey",
						"type": "nvarchar"
					},
					{
						"name": "ProcessedRecord",
						"type": "bit"
					},
					{
						"name": "DeclarationMethod",
						"type": "nvarchar"
					},
					{
						"name": "ConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Campaign",
						"type": "nvarchar"
					},
					{
						"name": "DeclarationDate",
						"type": "date"
					},
					{
						"name": "DeclarationStartDate",
						"type": "date"
					},
					{
						"name": "DeclarationEndDate",
						"type": "date"
					},
					{
						"name": "GADCancelled",
						"type": "bit"
					},
					{
						"name": "GADCancelDate",
						"type": "date"
					},
					{
						"name": "GADDeclarationId",
						"type": "uniqueidentifier"
					},
					{
						"name": "TaxPayerTitle",
						"type": "nvarchar"
					},
					{
						"name": "TaxPayerFirstName",
						"type": "nvarchar"
					},
					{
						"name": "TaxPayerLastName",
						"type": "nvarchar"
					},
					{
						"name": "ConfirmationRequired",
						"type": "bit"
					},
					{
						"name": "ErrorMessage",
						"type": "nvarchar"
					},
					{
						"name": "Operation",
						"type": "varchar"
					},
					{
						"name": "SourceSystemInfo",
						"type": "xml"
					},
					{
						"name": "ConfirmedDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "integration",
					"table": "Import_GiftAidDeclarations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLImportPurposes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NWAAAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PurposesImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantCode",
						"type": "nvarchar"
					},
					{
						"name": "IntegrationName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineRunId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IntegrationSourceConstituentKey",
						"type": "nvarchar"
					},
					{
						"name": "ProcessedRecord",
						"type": "bit"
					},
					{
						"name": "ExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "Purpose",
						"type": "nvarchar"
					},
					{
						"name": "OptIn",
						"type": "bit"
					},
					{
						"name": "OptOut",
						"type": "bit"
					},
					{
						"name": "Unknown",
						"type": "bit"
					},
					{
						"name": "DateReceived",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CommsPrefId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_TenantId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_ConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_PreferenceType",
						"type": "uniqueidentifier"
					},
					{
						"name": "ContactChannelDetails",
						"type": "nvarchar"
					},
					{
						"name": "Confirmed",
						"type": "bit"
					},
					{
						"name": "Allowed",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "integration",
					"table": "Import_Purposes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLImportTags')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NWAAAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TagsImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantCode",
						"type": "nvarchar"
					},
					{
						"name": "IntegrationName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineRunId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IntegrationSourceConstituentKey",
						"type": "nvarchar"
					},
					{
						"name": "ProcessedRecord",
						"type": "bit"
					},
					{
						"name": "ExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "DateTagged",
						"type": "date"
					},
					{
						"name": "TagIsActive",
						"type": "bit"
					},
					{
						"name": "TagCategory",
						"type": "nvarchar"
					},
					{
						"name": "TagName",
						"type": "nvarchar"
					},
					{
						"name": "TagStartDate",
						"type": "date"
					},
					{
						"name": "TagEndDate",
						"type": "date"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "Code1",
						"type": "nvarchar"
					},
					{
						"name": "Code2",
						"type": "nvarchar"
					},
					{
						"name": "Code3",
						"type": "nvarchar"
					},
					{
						"name": "Code4",
						"type": "nvarchar"
					},
					{
						"name": "Code5",
						"type": "nvarchar"
					},
					{
						"name": "Code6",
						"type": "nvarchar"
					},
					{
						"name": "Code7",
						"type": "nvarchar"
					},
					{
						"name": "Code8",
						"type": "nvarchar"
					},
					{
						"name": "Code9",
						"type": "nvarchar"
					},
					{
						"name": "Code10",
						"type": "nvarchar"
					},
					{
						"name": "Date1",
						"type": "date"
					},
					{
						"name": "Date2",
						"type": "date"
					},
					{
						"name": "Date3",
						"type": "date"
					},
					{
						"name": "Date4",
						"type": "date"
					},
					{
						"name": "Date5",
						"type": "date"
					},
					{
						"name": "Date6",
						"type": "date"
					},
					{
						"name": "Date7",
						"type": "date"
					},
					{
						"name": "Date8",
						"type": "date"
					},
					{
						"name": "Date9",
						"type": "date"
					},
					{
						"name": "Date10",
						"type": "date"
					},
					{
						"name": "Number1",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number2",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number3",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number4",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number5",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number6",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number7",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number8",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number9",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number10",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "YesNo1",
						"type": "bit"
					},
					{
						"name": "YesNo2",
						"type": "bit"
					},
					{
						"name": "YesNo3",
						"type": "bit"
					},
					{
						"name": "YesNo4",
						"type": "bit"
					},
					{
						"name": "YesNo5",
						"type": "bit"
					},
					{
						"name": "YesNo6",
						"type": "bit"
					},
					{
						"name": "YesNo7",
						"type": "bit"
					},
					{
						"name": "YesNo8",
						"type": "bit"
					},
					{
						"name": "YesNo9",
						"type": "bit"
					},
					{
						"name": "YesNo10",
						"type": "bit"
					},
					{
						"name": "ConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_TagCategoryLookUpTypeRefId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_TagLookUpRefId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_TenantId",
						"type": "uniqueidentifier"
					},
					{
						"name": "ErrorMessage",
						"type": "nvarchar"
					},
					{
						"name": "Operation",
						"type": "varchar"
					},
					{
						"name": "SourceSystemInfo",
						"type": "xml"
					}
				],
				"typeProperties": {
					"schema": "integration",
					"table": "Import_Tags"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLImportTransactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NWAAAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TransactionsImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantCode",
						"type": "nvarchar"
					},
					{
						"name": "IntegrationName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineRunId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IntegrationSourceConstituentKey",
						"type": "nvarchar"
					},
					{
						"name": "ProcessedRecord",
						"type": "bit"
					},
					{
						"name": "TransactionNumber1",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TransactionNumber2",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "GiftAidFlag",
						"type": "nvarchar"
					},
					{
						"name": "Campaign",
						"type": "nvarchar"
					},
					{
						"name": "DateOfTransaction",
						"type": "date"
					},
					{
						"name": "Amount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Product",
						"type": "nvarchar"
					},
					{
						"name": "PaymentMethod",
						"type": "nvarchar"
					},
					{
						"name": "BankAccount",
						"type": "nvarchar"
					},
					{
						"name": "Fund",
						"type": "nvarchar"
					},
					{
						"name": "Currency",
						"type": "nvarchar"
					},
					{
						"name": "Reference",
						"type": "nvarchar"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "SegmentCode",
						"type": "nvarchar"
					},
					{
						"name": "Channel",
						"type": "nvarchar"
					},
					{
						"name": "ConnectedConstituentExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "BeneficiaryConstituentExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "ConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "TransactionId1",
						"type": "uniqueidentifier"
					},
					{
						"name": "TransactionId2",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_PaymentMethod",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_BankAccount",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_Product",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_Fund",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_Currency",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_Campaign",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_TenantId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_ChannelId",
						"type": "uniqueidentifier"
					},
					{
						"name": "ConnectedConstituentConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "BeneficiaryConstituentConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Quantity",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "FileName",
						"type": "nvarchar"
					},
					{
						"name": "ProcessingCostsAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ErrorMessage",
						"type": "nvarchar"
					},
					{
						"name": "Department",
						"type": "nvarchar"
					},
					{
						"name": "PayoutReference",
						"type": "nvarchar"
					},
					{
						"name": "IntegrationSourceTransactionKey",
						"type": "nvarchar"
					},
					{
						"name": "CanRecoverTax",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "integration",
					"table": "Import_Transactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLImportTransactionsAdditionalAllocations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NWAAAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TransactionAllocationsImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantCode",
						"type": "nvarchar"
					},
					{
						"name": "IntegrationName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineRunId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IntegrationSourceConstituentKey",
						"type": "nvarchar"
					},
					{
						"name": "ProcessedRecord",
						"type": "bit"
					},
					{
						"name": "FK_TransactionsImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Amount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Product",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Fund",
						"type": "nvarchar"
					},
					{
						"name": "Department",
						"type": "nvarchar"
					},
					{
						"name": "AllocationDate",
						"type": "date"
					},
					{
						"name": "GiftAidFlag",
						"type": "nvarchar"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "BeneficiaryConstituentExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "BeneficiaryConstituentConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "ExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "FK_Product",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_Fund",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_DepartmentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_Currency",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_TenantId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IntegrationSourceTransactionKey",
						"type": "nvarchar"
					},
					{
						"name": "CanRecoverTax",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "integration",
					"table": "Import_Transaction_Additional_Allocations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLIntegrationImportSettings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NWAAAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "integration",
					"table": "IntegrationImportSettings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLStoredProcCall')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NWAAAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ActivitiesImportId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantCode",
						"type": "nvarchar"
					},
					{
						"name": "IntegrationName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineName",
						"type": "nvarchar"
					},
					{
						"name": "ADFPipelineRunId",
						"type": "uniqueidentifier"
					},
					{
						"name": "IntegrationSourceConstituentKey",
						"type": "nvarchar"
					},
					{
						"name": "ProcessedRecord",
						"type": "bit"
					},
					{
						"name": "ExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "LinkedConstituentExternalKey",
						"type": "nvarchar"
					},
					{
						"name": "ActivityNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Campaign",
						"type": "nvarchar"
					},
					{
						"name": "DateOfActivity",
						"type": "date"
					},
					{
						"name": "ActivityType",
						"type": "nvarchar"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "ShowAlert",
						"type": "bit"
					},
					{
						"name": "SegmentCode",
						"type": "nvarchar"
					},
					{
						"name": "SegmentName",
						"type": "nvarchar"
					},
					{
						"name": "ConstituentId",
						"type": "uniqueidentifier"
					},
					{
						"name": "ActivityId",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_Campaign",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_ActivityType",
						"type": "uniqueidentifier"
					},
					{
						"name": "FK_TenantId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Code1",
						"type": "nvarchar"
					},
					{
						"name": "Code2",
						"type": "nvarchar"
					},
					{
						"name": "Code3",
						"type": "nvarchar"
					},
					{
						"name": "Code4",
						"type": "nvarchar"
					},
					{
						"name": "Code5",
						"type": "nvarchar"
					},
					{
						"name": "Code6",
						"type": "nvarchar"
					},
					{
						"name": "Code7",
						"type": "nvarchar"
					},
					{
						"name": "Code8",
						"type": "nvarchar"
					},
					{
						"name": "Code9",
						"type": "nvarchar"
					},
					{
						"name": "Code10",
						"type": "nvarchar"
					},
					{
						"name": "Date1",
						"type": "date"
					},
					{
						"name": "Date2",
						"type": "date"
					},
					{
						"name": "Date3",
						"type": "date"
					},
					{
						"name": "Date4",
						"type": "date"
					},
					{
						"name": "Date5",
						"type": "date"
					},
					{
						"name": "Date6",
						"type": "date"
					},
					{
						"name": "Date7",
						"type": "date"
					},
					{
						"name": "Date8",
						"type": "date"
					},
					{
						"name": "Date9",
						"type": "date"
					},
					{
						"name": "Date10",
						"type": "date"
					},
					{
						"name": "Number1",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number2",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number3",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number4",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number5",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number6",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number7",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number8",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number9",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Number10",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "YesNo1",
						"type": "bit"
					},
					{
						"name": "YesNo2",
						"type": "bit"
					},
					{
						"name": "YesNo3",
						"type": "bit"
					},
					{
						"name": "YesNo4",
						"type": "bit"
					},
					{
						"name": "YesNo5",
						"type": "bit"
					},
					{
						"name": "YesNo6",
						"type": "bit"
					},
					{
						"name": "YesNo7",
						"type": "bit"
					},
					{
						"name": "YesNo8",
						"type": "bit"
					},
					{
						"name": "YesNo9",
						"type": "bit"
					},
					{
						"name": "YesNo10",
						"type": "bit"
					},
					{
						"name": "LinkUrl",
						"type": "nvarchar"
					},
					{
						"name": "FileName",
						"type": "nvarchar"
					},
					{
						"name": "ErrorMessage",
						"type": "nvarchar"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NWAAAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStorageActivityLogFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Activity Log File ', utcNow('yyyyMMdd hhm'),'.csv')",
							"type": "Expression"
						},
						"folderPath": "Log Files",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MembershipID",
						"type": "String"
					},
					{
						"name": "LotteryNum",
						"type": "String"
					},
					{
						"name": "FullName",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "Address3",
						"type": "String"
					},
					{
						"name": "Town",
						"type": "String"
					},
					{
						"name": "Postcode",
						"type": "String"
					},
					{
						"name": "Phone Number",
						"type": "String"
					},
					{
						"name": "Mobile",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Alternative Email",
						"type": "String"
					},
					{
						"name": "Payment Method",
						"type": "String"
					},
					{
						"name": "PrizeValue",
						"type": "String"
					},
					{
						"name": "Cheque No",
						"type": "String"
					},
					{
						"name": "Publicity",
						"type": "String"
					},
					{
						"name": "Supported Charity",
						"type": "String"
					},
					{
						"name": "Rollover Prize",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStorageConstituentLogFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Constituent Log File ', utcNow('yyyyMMdd hhm'),'.csv')",
							"type": "Expression"
						},
						"folderPath": "Log Files",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MembershipID",
						"type": "String"
					},
					{
						"name": "LotteryNum",
						"type": "String"
					},
					{
						"name": "FullName",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "Address3",
						"type": "String"
					},
					{
						"name": "Town",
						"type": "String"
					},
					{
						"name": "Postcode",
						"type": "String"
					},
					{
						"name": "Phone Number",
						"type": "String"
					},
					{
						"name": "Mobile",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Alternative Email",
						"type": "String"
					},
					{
						"name": "Payment Method",
						"type": "String"
					},
					{
						"name": "PrizeValue",
						"type": "String"
					},
					{
						"name": "Cheque No",
						"type": "String"
					},
					{
						"name": "Publicity",
						"type": "String"
					},
					{
						"name": "Supported Charity",
						"type": "String"
					},
					{
						"name": "Rollover Prize",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStorageContainer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Input Files",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MembershipID",
						"type": "String"
					},
					{
						"name": "LotteryNum",
						"type": "String"
					},
					{
						"name": "FullName",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "Address3",
						"type": "String"
					},
					{
						"name": "Town",
						"type": "String"
					},
					{
						"name": "Postcode",
						"type": "String"
					},
					{
						"name": "Phone Number",
						"type": "String"
					},
					{
						"name": "Mobile",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Alternative Email",
						"type": "String"
					},
					{
						"name": "Payment Method",
						"type": "String"
					},
					{
						"name": "PrizeValue",
						"type": "String"
					},
					{
						"name": "Cheque No",
						"type": "String"
					},
					{
						"name": "Publicity",
						"type": "String"
					},
					{
						"name": "Supported Charity",
						"type": "String"
					},
					{
						"name": "Rollover Prize",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStorageGAD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "membershipID",
						"type": "String"
					},
					{
						"name": "clientMemberID",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "firstname",
						"type": "String"
					},
					{
						"name": "surname",
						"type": "String"
					},
					{
						"name": "address1",
						"type": "String"
					},
					{
						"name": "address2",
						"type": "String"
					},
					{
						"name": "address3",
						"type": "String"
					},
					{
						"name": "town",
						"type": "String"
					},
					{
						"name": "county",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "postcode",
						"type": "String"
					},
					{
						"name": "giftAidDate",
						"type": "String"
					},
					{
						"name": "hasDonationAccount",
						"type": "String"
					},
					{
						"name": "donationAccountType",
						"type": "String"
					},
					{
						"name": "donationSource",
						"type": "String"
					},
					{
						"name": "donationTotal",
						"type": "String"
					},
					{
						"name": "donationBalance",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStorageGADLogFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('GAD Log File ', utcNow('yyyyMMdd hhm'),'.csv')",
							"type": "Expression"
						},
						"folderPath": "Log Files",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "GADImportId",
						"type": "String"
					},
					{
						"name": "TenantCode",
						"type": "String"
					},
					{
						"name": "IntegrationName",
						"type": "String"
					},
					{
						"name": "ADFPipelineName",
						"type": "String"
					},
					{
						"name": "ADFPipelineRunId",
						"type": "String"
					},
					{
						"name": "IntegrationSourceConstituentKey",
						"type": "String"
					},
					{
						"name": "ProcessedRecord",
						"type": "String"
					},
					{
						"name": "DeclarationMethod",
						"type": "String"
					},
					{
						"name": "ConstituentId",
						"type": "String"
					},
					{
						"name": "Campaign",
						"type": "String"
					},
					{
						"name": "DeclarationDate",
						"type": "String"
					},
					{
						"name": "DeclarationStartDate",
						"type": "String"
					},
					{
						"name": "DeclarationEndDate",
						"type": "String"
					},
					{
						"name": "GADCancelled",
						"type": "String"
					},
					{
						"name": "GADCancelDate",
						"type": "String"
					},
					{
						"name": "GADDeclarationId",
						"type": "String"
					},
					{
						"name": "TaxPayerTitle",
						"type": "String"
					},
					{
						"name": "TaxPayerFirstName",
						"type": "String"
					},
					{
						"name": "TaxPayerLastName",
						"type": "String"
					},
					{
						"name": "ConfirmationRequired",
						"type": "String"
					},
					{
						"name": "ErrorMessage",
						"type": "String"
					},
					{
						"name": "Operation",
						"type": "String"
					},
					{
						"name": "SourceSystemInfo",
						"type": "String"
					},
					{
						"name": "ConfirmedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStorageMembers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Player ID",
						"type": "String"
					},
					{
						"name": "Client Member ID",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "Surname",
						"type": "String"
					},
					{
						"name": "Address 1",
						"type": "String"
					},
					{
						"name": "Address 2",
						"type": "String"
					},
					{
						"name": "Address 3",
						"type": "String"
					},
					{
						"name": "Address 4",
						"type": "String"
					},
					{
						"name": "Town / City",
						"type": "String"
					},
					{
						"name": "County",
						"type": "String"
					},
					{
						"name": "Postcode",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "E-mail",
						"type": "String"
					},
					{
						"name": "Mobile",
						"type": "String"
					},
					{
						"name": "Date of Birth",
						"type": "String"
					},
					{
						"name": "Created Date",
						"type": "String"
					},
					{
						"name": "Member Status",
						"type": "String"
					},
					{
						"name": "Cancelled Date",
						"type": "String"
					},
					{
						"name": "Cancelled Reason",
						"type": "String"
					},
					{
						"name": "Number of Numbers",
						"type": "String"
					},
					{
						"name": "Active Numbers",
						"type": "String"
					},
					{
						"name": "Inactive Numbers",
						"type": "String"
					},
					{
						"name": "Earliest Draw",
						"type": "String"
					},
					{
						"name": "Current Balance",
						"type": "String"
					},
					{
						"name": "Total Payments",
						"type": "String"
					},
					{
						"name": "Total Payments Amount",
						"type": "String"
					},
					{
						"name": "Total Winnings",
						"type": "String"
					},
					{
						"name": "Draws Dormant",
						"type": "String"
					},
					{
						"name": "SourceCode",
						"type": "String"
					},
					{
						"name": "Payment Frequency",
						"type": "String"
					},
					{
						"name": "Payment Method",
						"type": "String"
					},
					{
						"name": "Cash Round Reference",
						"type": "String"
					},
					{
						"name": "Payroll Round Reference",
						"type": "String"
					},
					{
						"name": "Bank Account",
						"type": "String"
					},
					{
						"name": "Modulus Check",
						"type": "String"
					},
					{
						"name": "Payment Status",
						"type": "String"
					},
					{
						"name": "Canvasser",
						"type": "String"
					},
					{
						"name": "Supported Charity",
						"type": "String"
					},
					{
						"name": "Lottery Mail",
						"type": "String"
					},
					{
						"name": "Publicity",
						"type": "String"
					},
					{
						"name": "Un-contactable (Gone Away)",
						"type": "String"
					},
					{
						"name": "No Cancellation Mail",
						"type": "String"
					},
					{
						"name": "Donor Number",
						"type": "String"
					},
					{
						"name": "Last Modified",
						"type": "String"
					},
					{
						"name": "Receipt Code",
						"type": "String"
					},
					{
						"name": "Deceased",
						"type": "String"
					},
					{
						"name": "Raffle Marketing - All",
						"type": "String"
					},
					{
						"name": "Organisation Imposed - Email",
						"type": "String"
					},
					{
						"name": "Direct Communication - Email",
						"type": "String"
					},
					{
						"name": "Charity Marketing - Email",
						"type": "String"
					},
					{
						"name": "FPS Registered - Email",
						"type": "String"
					},
					{
						"name": "TPS Registered - Home Telephone",
						"type": "String"
					},
					{
						"name": "Organisation Imposed - Home Telephone",
						"type": "String"
					},
					{
						"name": "Direct Communication - Home Telephone",
						"type": "String"
					},
					{
						"name": "FPS Registered - Home Telephone",
						"type": "String"
					},
					{
						"name": "Charity Marketing - Home Telephone",
						"type": "String"
					},
					{
						"name": "MPS Registered - Letter",
						"type": "String"
					},
					{
						"name": "FPS Registered - Letter",
						"type": "String"
					},
					{
						"name": "Direct Communication - Letter",
						"type": "String"
					},
					{
						"name": "Organisation Imposed - Letter",
						"type": "String"
					},
					{
						"name": "Charity Marketing - Letter",
						"type": "String"
					},
					{
						"name": "FPS Registered - Mobile",
						"type": "String"
					},
					{
						"name": "TPS Registered - Mobile",
						"type": "String"
					},
					{
						"name": "Direct Communication - Mobile",
						"type": "String"
					},
					{
						"name": "Charity Marketing - Mobile",
						"type": "String"
					},
					{
						"name": "Organisation Imposed - Mobile",
						"type": "String"
					},
					{
						"name": "FPS Registered - SMS",
						"type": "String"
					},
					{
						"name": "Charity Marketing - SMS",
						"type": "String"
					},
					{
						"name": "Direct Communication - SMS",
						"type": "String"
					},
					{
						"name": "Organisation Imposed - SMS",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStoragePayments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Membership ID",
						"type": "String"
					},
					{
						"name": "Lottery Number",
						"type": "String"
					},
					{
						"name": "Payment Method",
						"type": "String"
					},
					{
						"name": "Lottery Payment Amount",
						"type": "String"
					},
					{
						"name": "Total Payment Amount",
						"type": "String"
					},
					{
						"name": "Payment Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStorageTagLogFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Tag Log File ', utcNow('yyyyMMdd hhm'),'.csv')",
							"type": "Expression"
						},
						"folderPath": "Log Files",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MembershipID",
						"type": "String"
					},
					{
						"name": "LotteryNum",
						"type": "String"
					},
					{
						"name": "FullName",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "Address3",
						"type": "String"
					},
					{
						"name": "Town",
						"type": "String"
					},
					{
						"name": "Postcode",
						"type": "String"
					},
					{
						"name": "Phone Number",
						"type": "String"
					},
					{
						"name": "Mobile",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Alternative Email",
						"type": "String"
					},
					{
						"name": "Payment Method",
						"type": "String"
					},
					{
						"name": "PrizeValue",
						"type": "String"
					},
					{
						"name": "Cheque No",
						"type": "String"
					},
					{
						"name": "Publicity",
						"type": "String"
					},
					{
						"name": "Supported Charity",
						"type": "String"
					},
					{
						"name": "Rollover Prize",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStorageTransactionLogFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Transaction Log File ', utcNow('yyyyMMdd hhm'),'.csv')",
							"type": "Expression"
						},
						"folderPath": "Log Files",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MembershipID",
						"type": "String"
					},
					{
						"name": "LotteryNum",
						"type": "String"
					},
					{
						"name": "FullName",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "Address3",
						"type": "String"
					},
					{
						"name": "Town",
						"type": "String"
					},
					{
						"name": "Postcode",
						"type": "String"
					},
					{
						"name": "Phone Number",
						"type": "String"
					},
					{
						"name": "Mobile",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Alternative Email",
						"type": "String"
					},
					{
						"name": "Payment Method",
						"type": "String"
					},
					{
						"name": "PrizeValue",
						"type": "String"
					},
					{
						"name": "Cheque No",
						"type": "String"
					},
					{
						"name": "Publicity",
						"type": "String"
					},
					{
						"name": "Supported Charity",
						"type": "String"
					},
					{
						"name": "Rollover Prize",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLotteryCSVBlobStorageWinners')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IntegrationWorkingFilesAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sterling-lottery-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MembershipID",
						"type": "String"
					},
					{
						"name": "LotteryNum",
						"type": "String"
					},
					{
						"name": "FullName",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "Address3",
						"type": "String"
					},
					{
						"name": "Town",
						"type": "String"
					},
					{
						"name": "Postcode",
						"type": "String"
					},
					{
						"name": "Phone Number",
						"type": "String"
					},
					{
						"name": "Mobile",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Alternative Email",
						"type": "String"
					},
					{
						"name": "Payment Method",
						"type": "String"
					},
					{
						"name": "PrizeValue",
						"type": "String"
					},
					{
						"name": "Cheque No",
						"type": "String"
					},
					{
						"name": "Publicity",
						"type": "String"
					},
					{
						"name": "Supported Charity",
						"type": "String"
					},
					{
						"name": "Rollover Prize",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IntegrationWorkingFilesAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DonorfyIngegrationAzureFunction')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('DonorfyIngegrationAzureFunction_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('DonorfyIngegrationAzureFunction_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntegrationWorkingFilesAzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('IntegrationWorkingFilesAzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NWAAAzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('NWAAAzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Monday Evening')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "RunSterlingLotteryToDonorfy",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2025-05-13T16:07:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								7
							],
							"hours": [
								18
							],
							"weekDays": [
								"Monday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RunSterlingLotteryToDonorfy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tuesday evening')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "RunSterlingLotteryToDonorfy",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2025-05-13T16:08:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								7
							],
							"hours": [
								18
							],
							"weekDays": [
								"Tuesday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RunSterlingLotteryToDonorfy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SterlingLottery_to_DonorfyStaging')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SterlingLotteryCSVBlobStorageMembers",
								"type": "DatasetReference"
							},
							"name": "SterlingLotteryInBlobStorage"
						},
						{
							"dataset": {
								"referenceName": "SterlingLotteryCSVBlobStorageWinners",
								"type": "DatasetReference"
							},
							"name": "SterlingLotteryWinnersInBlobStorage"
						},
						{
							"dataset": {
								"referenceName": "SterlingLotteryCSVBlobStoragePayments",
								"type": "DatasetReference"
							},
							"name": "SterlingLotteryPaymentsInBlobStorage"
						},
						{
							"dataset": {
								"referenceName": "SterlingLotteryCSVBlobStorageGAD",
								"type": "DatasetReference"
							},
							"name": "SterlingLotteryGADsInBlobStorage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSQLImportConstituents",
								"type": "DatasetReference"
							},
							"name": "DonorfyConstituentImportStagingTable"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLImportPurposes",
								"type": "DatasetReference"
							},
							"name": "DonorfyPurposesImportStagingTable"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLImportTags",
								"type": "DatasetReference"
							},
							"name": "DonorfyTagsImportStagingTable"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLImportActivities",
								"type": "DatasetReference"
							},
							"name": "DonorfyActivitiesImportStagingTable"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLImportTransactions",
								"type": "DatasetReference"
							},
							"name": "DonorfyTransactionsImportStagingTable"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLImportTags",
								"type": "DatasetReference"
							},
							"name": "DonorfyWinnerTagsImportStagingTable"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLImportTags",
								"type": "DatasetReference"
							},
							"name": "DonorfySelfExcludeTagsImportStagingTable"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLImportTransactionsAdditionalAllocations",
								"type": "DatasetReference"
							},
							"name": "DonorfyTransactionAdditionalAllocationssImportStagingTable"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLImportGADs",
								"type": "DatasetReference"
							},
							"name": "DonorfyGADStagingTable"
						}
					],
					"transformations": [
						{
							"name": "derivedConstituentColumns"
						},
						{
							"name": "purposeDerivedColumns"
						},
						{
							"name": "uknownPurposeDerivedColumn"
						},
						{
							"name": "derivedIntegrationColumns"
						},
						{
							"name": "tagDerivedColumn"
						},
						{
							"name": "joinWinnersToIntegrationColumns"
						},
						{
							"name": "derivedWinnerActivityColumn"
						},
						{
							"name": "derivedDateColumn"
						},
						{
							"name": "derivedCampaign"
						},
						{
							"name": "joinPaymentsToIntegrationColumns"
						},
						{
							"name": "derivedTransactionColumns"
						},
						{
							"name": "derivedWinnerTagColumns"
						},
						{
							"name": "filterSelfExclusion"
						},
						{
							"name": "tagSelfExcludeDerivedColumn"
						},
						{
							"name": "RowNumber"
						},
						{
							"name": "derivedColumnConstant"
						},
						{
							"name": "filterDonationAmount"
						},
						{
							"name": "derivedTransactionLotteryColumns"
						},
						{
							"name": "derivedTransactionDonationColumns"
						},
						{
							"name": "joinGADsToIntegrationColumns"
						},
						{
							"name": "derivedGADColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DonorfyTenantCode as string ('ZRTXSIYSU7'),",
						"     IntegrationName as string ('NWAASterlingLottery'),",
						"     ADFPipelineName as string (''),",
						"     ADFPipelineRunId as string (''),",
						"     DonorfyKeyPrefix as string ('SL'),",
						"     DonorfyLotteryPurpose as string ('Lottery Comms'),",
						"     DonorfyLotteryCampaign as string ('Lift Off Lotto'),",
						"     DonorfyLotteryTagCategory as string ('Lottery'),",
						"     DonorfyLotteryActiveTag as string ('Lottery Member'),",
						"     DonorfyLotteryCancelledTag as string ('Cancelled Lottery Member'),",
						"     DonorfyDeceasedReason as string ('Deceased'),",
						"     DonorfyGoneAwayReason as string ('Gone away'),",
						"     DonorfyBankAccount as string ('Co-Op - Main Account'),",
						"     DonorfyLotteryProduct as string ('Lottery Payment'),",
						"     DonorfyFund as string ('Unrestricted'),",
						"     DonorfyDefaultPaymentMethod as string ('Unknown'),",
						"     RunDate as date (currentDate()),",
						"     DonorfyDepartment as string ('Lottery'),",
						"     DonorfyLotteryWinnerTag as string ('Lottery Winner'),",
						"     DonorfyLotterySelfExcludeTag as string ('Lottery Self Exclusion'),",
						"     DonorfyDonationProduct as string ('Donation'),",
						"     DonorfyGADMethod as string ('Written')",
						"}",
						"source(output(",
						"          {Player ID} as string,",
						"          {Client Member ID} as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          Surname as string,",
						"          {Address 1} as string,",
						"          {Address 2} as string,",
						"          {Address 3} as string,",
						"          {Address 4} as string,",
						"          {Town / City} as string,",
						"          County as string,",
						"          Postcode as string,",
						"          Phone as string,",
						"          {E-mail} as string,",
						"          Mobile as string,",
						"          {Date of Birth} as string,",
						"          {Created Date} as string,",
						"          {Member Status} as string,",
						"          {Cancelled Date} as string,",
						"          {Cancelled Reason} as string,",
						"          {Number of Numbers} as string,",
						"          {Active Numbers} as string,",
						"          {Inactive Numbers} as string,",
						"          {Earliest Draw} as string,",
						"          {Current Balance} as string,",
						"          {Total Payments} as string,",
						"          {Total Payments Amount} as string,",
						"          {Total Winnings} as string,",
						"          {Draws Dormant} as string,",
						"          SourceCode as string,",
						"          {Payment Frequency} as string,",
						"          {Payment Method} as string,",
						"          {Cash Round Reference} as string,",
						"          {Payroll Round Reference} as string,",
						"          {Bank Account} as string,",
						"          {Modulus Check} as string,",
						"          {Payment Status} as string,",
						"          Canvasser as string,",
						"          {Supported Charity} as string,",
						"          {Lottery Mail} as string,",
						"          Publicity as string,",
						"          {Un-contactable (Gone Away)} as string,",
						"          {No Cancellation Mail} as string,",
						"          {Donor Number} as string,",
						"          {Last Modified} as string,",
						"          {Receipt Code} as string,",
						"          Deceased as string,",
						"          {Raffle Marketing - All} as string,",
						"          {Organisation Imposed - Email} as string,",
						"          {Direct Communication - Email} as string,",
						"          {Charity Marketing - Email} as string,",
						"          {FPS Registered - Email} as string,",
						"          {TPS Registered - Home Telephone} as string,",
						"          {Organisation Imposed - Home Telephone} as string,",
						"          {Direct Communication - Home Telephone} as string,",
						"          {FPS Registered - Home Telephone} as string,",
						"          {Charity Marketing - Home Telephone} as string,",
						"          {MPS Registered - Letter} as string,",
						"          {FPS Registered - Letter} as string,",
						"          {Direct Communication - Letter} as string,",
						"          {Organisation Imposed - Letter} as string,",
						"          {Charity Marketing - Letter} as string,",
						"          {FPS Registered - Mobile} as string,",
						"          {TPS Registered - Mobile} as string,",
						"          {Direct Communication - Mobile} as string,",
						"          {Charity Marketing - Mobile} as string,",
						"          {Organisation Imposed - Mobile} as string,",
						"          {FPS Registered - SMS} as string,",
						"          {Charity Marketing - SMS} as string,",
						"          {Direct Communication - SMS} as string,",
						"          {Organisation Imposed - SMS} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['Input Files','Processed Files'],",
						"     rowUrlColumn: 'FileName',",
						"     wildcardPaths:['Input Files/All Member Export*.csv']) ~> SterlingLotteryInBlobStorage",
						"source(output(",
						"          MembershipID as string,",
						"          LotteryNum as string,",
						"          FullName as string,",
						"          Address1 as string,",
						"          Address2 as string,",
						"          Address3 as string,",
						"          Town as string,",
						"          Postcode as string,",
						"          {Phone Number} as string,",
						"          Mobile as string,",
						"          Email as string,",
						"          {Alternative Email} as string,",
						"          {Payment Method} as string,",
						"          PrizeValue as string,",
						"          {Cheque No} as string,",
						"          Publicity as string,",
						"          {Supported Charity} as string,",
						"          {Rollover Prize} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['Input Files','Processed Files'],",
						"     rowUrlColumn: 'FileName',",
						"     wildcardPaths:['Input Files/Winning Numbers*.csv']) ~> SterlingLotteryWinnersInBlobStorage",
						"source(output(",
						"          {Membership ID} as string,",
						"          {Lottery Number} as string,",
						"          {Payment Method} as string,",
						"          {Lottery Payment Amount} as string,",
						"          {Total Payment Amount} as string,",
						"          {Payment Date} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['Input Files','Processed Files'],",
						"     wildcardPaths:['Input Files/NWAA - Payment Export*.csv']) ~> SterlingLotteryPaymentsInBlobStorage",
						"source(output(",
						"          membershipID as string,",
						"          clientMemberID as string,",
						"          title as string,",
						"          firstname as string,",
						"          surname as string,",
						"          address1 as string,",
						"          address2 as string,",
						"          address3 as string,",
						"          town as string,",
						"          county as string,",
						"          country as string,",
						"          postcode as string,",
						"          giftAidDate as string,",
						"          hasDonationAccount as string,",
						"          donationAccountType as string,",
						"          donationSource as string,",
						"          donationTotal as string,",
						"          donationBalance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['Input Files','Processed Files'],",
						"     wildcardPaths:['Input Files/Members with giftaid*.csv']) ~> SterlingLotteryGADsInBlobStorage",
						"derivedCampaign derive(IsActive = case({Un-contactable (Gone Away)}==\"Member is un-contactable\" || Deceased==\"Yes\",0),",
						"          ArchiveReason = case(Deceased==\"Yes\",$DonorfyDeceasedReason,{Un-contactable (Gone Away)}==\"Member is un-contactable\",$DonorfyGoneAwayReason,\"\"),",
						"          DateOfBirthDateType = toDate({Date of Birth}, \"dd/mm/yyyy\"),",
						"          OkToEmail = case({Charity Marketing - Email}==\"Opt Out\", 0, {Charity Marketing - Email}==\"Opt In\",1),",
						"          OkToMail = case({Charity Marketing - Letter}==\"Opt Out\", 0, {Charity Marketing - Letter}==\"Opt In\",1),",
						"          OKToPhone = case({Charity Marketing - Home Telephone} ==\"Opt Out\", 0, {Charity Marketing - Home Telephone}==\"Opt In\",1),",
						"          OKToSMS = case({Charity Marketing - SMS} ==\"Opt Out\", 0, {Charity Marketing - SMS}==\"Opt In\",1),",
						"          ConstituentType = \"Individual\",",
						"          DateAdded = $RunDate) ~> derivedConstituentColumns",
						"derivedIntegrationColumns derive(Purpose = $DonorfyLotteryPurpose,",
						"          OptIn = case(iifNull({Cancelled Reason},\"\") != \"Self Exclude\" && {Lottery Mail} == \"Allowed\", 1,0),",
						"          OptOut = case(iifNull({Cancelled Reason},\"\")  == \"Self Exclude\" || {Lottery Mail} != \"Allowed\", 1,0),",
						"          ContactChannelDetails = case(\r",
						"!(isNull({E-mail}) || trim({E-mail}) == '') && {Charity Marketing - Email} == 'Opt In' ,'Email',\r",
						"!(isNull(Postcode) || trim(Postcode) == '') && {Charity Marketing - Letter} != 'Opt Out' ,'Mail',\r",
						"!(isNull(Phone) || trim(Phone) == '') && {Charity Marketing - Home Telephone}  == 'Opt In' ,'Phone',\r",
						"!(isNull(Mobile) ||trim(Mobile) == '') && {Charity Marketing - Mobile} == 'Opt In' ,'Phone','')) ~> purposeDerivedColumns",
						"purposeDerivedColumns derive(Unknown = case(OptIn == 0 && OptOut ==0, 1,0),",
						"          ContactChannelDetails = case(!(isNull({E-mail}) || trim({E-mail}) == '') && {Charity Marketing - Email} == 'Opt In' ,'Email',!(isNull(Postcode) || trim(Postcode) == '') && {Charity Marketing - Letter} != 'Opt Out' ,'Mail',!(isNull(Phone) || trim(Phone) == '') && {Charity Marketing - Home Telephone} == 'Opt In' ,'Phone',!(isNull(Mobile) ||trim(Mobile) == '') && {Charity Marketing - Mobile} == 'Opt In' ,'Phone','')) ~> uknownPurposeDerivedColumn",
						"SterlingLotteryInBlobStorage derive(TenantCode = $DonorfyTenantCode,",
						"          IntegrationName = $IntegrationName,",
						"          ADFPipelineName = $ADFPipelineName,",
						"          ADFPipelineRunId = $ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey = concat($DonorfyKeyPrefix,{Player ID}),",
						"          ProcessedRecord = 0) ~> derivedIntegrationColumns",
						"derivedIntegrationColumns derive(TagCategory = $DonorfyLotteryTagCategory,",
						"          TagName = case(equals({Member Status},'Active'), $DonorfyLotteryActiveTag, $DonorfyLotteryCancelledTag),",
						"          Code1 = {Cancelled Reason},",
						"          Code2 = {Active Numbers},",
						"          Code3 = {Inactive Numbers},",
						"          Code4 = Canvasser,",
						"          DateTagged = currentDate(),",
						"          TagStartDate = toDate({Created Date},'dd/MM/yyyy'),",
						"          TagEndDate = toDate({Cancelled Date},'dd/MM/yyyy'),",
						"          Date1 = iif(isDate({Earliest Draw}, 'dd/MM/yyyy'), toDate({Earliest Draw},'dd/MM/yyyy'), toDate(null(),'dd/MM/yyyy')),",
						"          Number1 = toInteger({Number of Numbers}),",
						"          Operation = \"INSERT\",",
						"          IsActive = 1) ~> tagDerivedColumn",
						"SterlingLotteryWinnersInBlobStorage, derivedCampaign join(MembershipID == {Player ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWinnersToIntegrationColumns",
						"joinWinnersToIntegrationColumns derive(ActivityDate = case(isDate(substring(SterlingLotteryWinnersInBlobStorage@FileName, instr(SterlingLotteryWinnersInBlobStorage@FileName,'Winning%20Numbers%20')+length('Winning%20Numbers%20'), 10),'dd-MM-yy'),toDate(substring(SterlingLotteryWinnersInBlobStorage@FileName, instr(SterlingLotteryWinnersInBlobStorage@FileName,'Winning%20Numbers%20')+length('Winning%20Numbers%20'), 10),'dd-MM-yy'),currentDate()),",
						"          Code1 = PrizeValue,",
						"          Code2 = SterlingLotteryInBlobStorage@Publicity,",
						"          Code3 = {Rollover Prize},",
						"          ActivityType = \"Lottery Win\") ~> derivedWinnerActivityColumn",
						"derivedIntegrationColumns derive(CreatedDateDateType = toDate({Created Date},\"dd/mm/yyyy\")) ~> derivedDateColumn",
						"derivedDateColumn derive(Campaign = case(year(CreatedDateDateType)<=2017,\"Lottery Income - Historic\",\r",
						"SourceCode==\"LOTENG\",\"Lottery Income - Tower Sign Up\",\r",
						"SourceCode==\"LOTGEN\" ||SourceCode==\"Unknown\",\"Lottery Income - Tower Sign Up\",\r",
						"SourceCode==\"WEB\",\"Lottery Income - Web Sign Up\",\r",
						"SourceCode==\"LOTRAP\",\"Lottery Income - Web Sign Up\",\r",
						"SourceCode==\"LOTPAP\",\"Lottery Income - Paper Sign Up\",\r",
						"SourceCode==\"Unity4 Acquisition\",\"Lottery Income - UN4 Sign Up\",\r",
						"\"Lottery Income - Tower Sign Up\")) ~> derivedCampaign",
						"RowNumber, derivedCampaign join({Membership ID} == {Player ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinPaymentsToIntegrationColumns",
						"joinPaymentsToIntegrationColumns derive(PaymentMethod = case (SterlingLotteryPaymentsInBlobStorage@{Payment Method}==\"Cash\",\"Cash\",\r",
						"SterlingLotteryPaymentsInBlobStorage@{Payment Method}==\"Cheque\",\"Cheque\",\r",
						"SterlingLotteryPaymentsInBlobStorage@{Payment Method}==\"Direct Debit\",\"Direct Debit via Sterling\",\r",
						"SterlingLotteryPaymentsInBlobStorage@{Payment Method}==\"Standing Order\",\"Standing Order via Sterling\",\r",
						"$DonorfyDefaultPaymentMethod),",
						"          BankAccount = $DonorfyBankAccount,",
						"          Fund = $DonorfyFund,",
						"          DateOfTransaction = case(isDate({Payment Date},'dd/MM/yyyy'),toDate({Payment Date},'dd/MM/yyyy'),currentDate()),",
						"          Department = $DonorfyDepartment) ~> derivedTransactionColumns",
						"derivedWinnerActivityColumn derive(TagCategory = $DonorfyLotteryTagCategory,",
						"          TagName = $DonorfyLotteryWinnerTag,",
						"          DateTagged = $RunDate,",
						"          TagStartDate = ActivityDate,",
						"          Operation = \"INSERT\",",
						"          IsActive = 1) ~> derivedWinnerTagColumns",
						"derivedIntegrationColumns filter({Cancelled Reason}==\"Self Exclude\") ~> filterSelfExclusion",
						"filterSelfExclusion derive(TagCategory = $DonorfyLotteryTagCategory,",
						"          TagName = $DonorfyLotterySelfExcludeTag,",
						"          DateTagged = currentDate(),",
						"          TagStartDate = toDate({Cancelled Date},'dd/MM/yyyy'),",
						"          IsActive = 1,",
						"          Operation = \"INSERT\") ~> tagSelfExcludeDerivedColumn",
						"derivedColumnConstant window(asc(ConstantOne, true),",
						"     RowNumber = rowNumber()) ~> RowNumber",
						"SterlingLotteryPaymentsInBlobStorage derive(ConstantOne = 1) ~> derivedColumnConstant",
						"derivedTransactionColumns filter(toDecimal({Total Payment Amount}) > toDecimal({Lottery Payment Amount})) ~> filterDonationAmount",
						"derivedTransactionColumns derive(Product = $DonorfyLotteryProduct,",
						"          Amount = {Lottery Payment Amount}) ~> derivedTransactionLotteryColumns",
						"filterDonationAmount derive(AllocationProduct = $DonorfyDonationProduct,",
						"          AllocationAmount = toDecimal({Total Payment Amount}) - toDecimal({Lottery Payment Amount})) ~> derivedTransactionDonationColumns",
						"SterlingLotteryGADsInBlobStorage, derivedCampaign join(membershipID == {Player ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinGADsToIntegrationColumns",
						"joinGADsToIntegrationColumns derive(DeclarationDate = case(isDate(giftAidDate,'yyyy-MM-dd'),toDate(giftAidDate,'yyyy-MM-dd'),currentDate()),",
						"          GADCampaign = Campaign,",
						"          DeclarationEndDate = addMonths(case(isDate(giftAidDate,'yyyy-MM-dd'),toDate(giftAidDate,'yyyy-MM-dd'),currentDate()),100 * 12),",
						"          ConfirmationRequired = 0,",
						"          Operation = \"INSERT\",",
						"          DeclarationMethod = $DonorfyGADMethod) ~> derivedGADColumns",
						"derivedConstituentColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ConstituentsImportId as integer,",
						"          TenantCode as string,",
						"          IntegrationName as string,",
						"          ADFPipelineName as string,",
						"          ADFPipelineRunId as string,",
						"          IntegrationSourceConstituentKey as string,",
						"          ProcessedRecord as boolean,",
						"          IsActive as boolean,",
						"          ArchiveReason as string,",
						"          ArchiveDate as date,",
						"          ExternalKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          Formerly as string,",
						"          HouseBuildingNumber as string,",
						"          Address1 as string,",
						"          Address2 as string,",
						"          Town as string,",
						"          County as string,",
						"          Postcode as string,",
						"          Country as string,",
						"          Area as string,",
						"          PhoneNumber as string,",
						"          OtherPhoneNumber as string,",
						"          MobilePhoneNumber as string,",
						"          NationalIDNumber as string,",
						"          EmailAddress1 as string,",
						"          EmailAddress2 as string,",
						"          LabelName as string,",
						"          Salutation as string,",
						"          Work_HouseBuildingNumber as string,",
						"          Work_Address1 as string,",
						"          Work_Address2 as string,",
						"          Work_Town as string,",
						"          Work_County as string,",
						"          Work_Postcode as string,",
						"          Work_Country as string,",
						"          Work_Area as string,",
						"          Work_PhoneNumber as string,",
						"          Work_OtherPhoneNumber as string,",
						"          Work_MobilePhoneNumber as string,",
						"          Work_EmailAddress1 as string,",
						"          Work_EmailAddress2 as string,",
						"          Work_LabelName as string,",
						"          Work_Salutation as string,",
						"          WebSite as string,",
						"          RecruitmentCampaign as string,",
						"          DateOfBirth as date,",
						"          YearOfBirth as integer,",
						"          OrganisationName as string,",
						"          JobTitle as string,",
						"          Department as string,",
						"          Gender as string,",
						"          ConstituentType as string,",
						"          Comments as string,",
						"          OKToMail as boolean,",
						"          OKToPhone as boolean,",
						"          OKToSMS as boolean,",
						"          OKToEmail as boolean,",
						"          AllowNameSwap as boolean,",
						"          HasGAD as boolean,",
						"          GiftAidNumber as integer,",
						"          GADDecDate as date,",
						"          DeclarationMethod as string,",
						"          GADStartDate as date,",
						"          GADEndDate as date,",
						"          GADCancelled as boolean,",
						"          GADCancelDate as date,",
						"          TaxPayerTitle as string,",
						"          TaxPayerFirstName as string,",
						"          TaxPayerLastName as string,",
						"          RefusedGAD as boolean,",
						"          IncludeRow as boolean,",
						"          IsGroupConstituent as boolean,",
						"          FK_TenantId as string,",
						"          ConstituentId as string,",
						"          GiftAidDecId as string,",
						"          TagId as string,",
						"          IsGroup as boolean,",
						"          PersonalContactDetailsId as string,",
						"          WorkContactDetailsId as string,",
						"          OtherContactDetailsId as string,",
						"          FK_ConstituentTypeId as string,",
						"          FK_RecruitmentCampaign as string,",
						"          FK_CountryId as string,",
						"          FK_ArchiveReasonId as string,",
						"          FK_DeclarationMethod as string,",
						"          FK_WorkCountryId as string,",
						"          MainContactConstituentId as string,",
						"          MainContactPersonalContactDetailsId as string,",
						"          MainContactWorkContactDetailsId as string,",
						"          MainContactOtherContactDetailsId as string,",
						"          MainContactFK_ConstituentTypeId as string,",
						"          ConstituentNumber as long,",
						"          FK_Area_Id as string,",
						"          FK_Work_Area_Id as string,",
						"          MatchScore as integer,",
						"          HowIntegrated as string,",
						"          FileName as string,",
						"          DateAdded as timestamp,",
						"          ErrorMessage as string,",
						"          OriginalConstituentsImportId as integer,",
						"          RetryAttempts as integer,",
						"          OrderNumber as integer,",
						"          SuccessfullyReprocessed as boolean,",
						"          MatchAttempted as boolean,",
						"          OrderId as long,",
						"          Operation as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TenantCode,",
						"          IntegrationName,",
						"          ADFPipelineName,",
						"          ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey,",
						"          ProcessedRecord,",
						"          Title,",
						"          FirstName,",
						"          LastName = Surname,",
						"          HouseBuildingNumber = {Address 1},",
						"          Address1 = {Address 2},",
						"          Address2 = {Address 3},",
						"          Town = {Town / City},",
						"          County,",
						"          Postcode,",
						"          EmailAddress1 = {E-mail},",
						"          MobilePhoneNumber = Mobile,",
						"          IsActive,",
						"          ArchiveReason,",
						"          OKToEmail = OkToEmail,",
						"          OKToMail = OkToMail,",
						"          OKToPhone,",
						"          OKToSMS,",
						"          RecruitmentCampaign = Campaign,",
						"          DateOfBirth = DateOfBirthDateType,",
						"          ConstituentType,",
						"          FileName,",
						"          DateAdded",
						"     )) ~> DonorfyConstituentImportStagingTable",
						"uknownPurposeDerivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PurposesImportId as integer,",
						"          TenantCode as string,",
						"          IntegrationName as string,",
						"          ADFPipelineName as string,",
						"          ADFPipelineRunId as string,",
						"          IntegrationSourceConstituentKey as string,",
						"          ProcessedRecord as boolean,",
						"          ExternalKey as string,",
						"          Purpose as string,",
						"          OptIn as boolean,",
						"          OptOut as boolean,",
						"          Unknown as boolean,",
						"          DateReceived as timestamp,",
						"          CommsPrefId as string,",
						"          FK_TenantId as string,",
						"          FK_ConstituentId as string,",
						"          FK_PreferenceType as string,",
						"          ContactChannelDetails as string,",
						"          Confirmed as boolean,",
						"          Allowed as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TenantCode,",
						"          IntegrationName,",
						"          ADFPipelineName,",
						"          ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey,",
						"          Purpose,",
						"          OptIn,",
						"          OptOut,",
						"          Unknown,",
						"          ProcessedRecord,",
						"          ContactChannelDetails",
						"     )) ~> DonorfyPurposesImportStagingTable",
						"tagDerivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TagsImportId as integer,",
						"          TenantCode as string,",
						"          IntegrationName as string,",
						"          ADFPipelineName as string,",
						"          ADFPipelineRunId as string,",
						"          IntegrationSourceConstituentKey as string,",
						"          ProcessedRecord as boolean,",
						"          ExternalKey as string,",
						"          DateTagged as date,",
						"          TagIsActive as boolean,",
						"          TagCategory as string,",
						"          TagName as string,",
						"          TagStartDate as date,",
						"          TagEndDate as date,",
						"          Comments as string,",
						"          Code1 as string,",
						"          Code2 as string,",
						"          Code3 as string,",
						"          Code4 as string,",
						"          Code5 as string,",
						"          Code6 as string,",
						"          Code7 as string,",
						"          Code8 as string,",
						"          Code9 as string,",
						"          Code10 as string,",
						"          Date1 as date,",
						"          Date2 as date,",
						"          Date3 as date,",
						"          Date4 as date,",
						"          Date5 as date,",
						"          Date6 as date,",
						"          Date7 as date,",
						"          Date8 as date,",
						"          Date9 as date,",
						"          Date10 as date,",
						"          Number1 as decimal(9,2),",
						"          Number2 as decimal(9,2),",
						"          Number3 as decimal(9,2),",
						"          Number4 as decimal(9,2),",
						"          Number5 as decimal(9,2),",
						"          Number6 as decimal(9,2),",
						"          Number7 as decimal(9,2),",
						"          Number8 as decimal(9,2),",
						"          Number9 as decimal(9,2),",
						"          Number10 as decimal(9,2),",
						"          YesNo1 as boolean,",
						"          YesNo2 as boolean,",
						"          YesNo3 as boolean,",
						"          YesNo4 as boolean,",
						"          YesNo5 as boolean,",
						"          YesNo6 as boolean,",
						"          YesNo7 as boolean,",
						"          YesNo8 as boolean,",
						"          YesNo9 as boolean,",
						"          YesNo10 as boolean,",
						"          ConstituentId as string,",
						"          FK_TagCategoryLookUpTypeRefId as string,",
						"          FK_TagLookUpRefId as string,",
						"          FK_TenantId as string,",
						"          ErrorMessage as string,",
						"          Operation as string,",
						"          SourceSystemInfo as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TenantCode,",
						"          IntegrationName,",
						"          ADFPipelineName,",
						"          ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey,",
						"          ProcessedRecord,",
						"          TagCategory,",
						"          TagName,",
						"          DateTagged,",
						"          TagStartDate,",
						"          TagEndDate,",
						"          Code1,",
						"          Code2,",
						"          Code3,",
						"          Code4,",
						"          Date1,",
						"          Number1,",
						"          Operation,",
						"          TagIsActive = IsActive",
						"     )) ~> DonorfyTagsImportStagingTable",
						"derivedWinnerActivityColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ActivitiesImportId as integer,",
						"          TenantCode as string,",
						"          IntegrationName as string,",
						"          ADFPipelineName as string,",
						"          ADFPipelineRunId as string,",
						"          IntegrationSourceConstituentKey as string,",
						"          ProcessedRecord as boolean,",
						"          ExternalKey as string,",
						"          LinkedConstituentExternalKey as string,",
						"          ActivityNumber as integer,",
						"          Campaign as string,",
						"          DateOfActivity as date,",
						"          ActivityType as string,",
						"          Comments as string,",
						"          ShowAlert as boolean,",
						"          SegmentCode as string,",
						"          SegmentName as string,",
						"          ConstituentId as string,",
						"          ActivityId as string,",
						"          FK_Campaign as string,",
						"          FK_ActivityType as string,",
						"          FK_TenantId as string,",
						"          Code1 as string,",
						"          Code2 as string,",
						"          Code3 as string,",
						"          Code4 as string,",
						"          Code5 as string,",
						"          Code6 as string,",
						"          Code7 as string,",
						"          Code8 as string,",
						"          Code9 as string,",
						"          Code10 as string,",
						"          Date1 as date,",
						"          Date2 as date,",
						"          Date3 as date,",
						"          Date4 as date,",
						"          Date5 as date,",
						"          Date6 as date,",
						"          Date7 as date,",
						"          Date8 as date,",
						"          Date9 as date,",
						"          Date10 as date,",
						"          Number1 as decimal(9,2),",
						"          Number2 as decimal(9,2),",
						"          Number3 as decimal(9,2),",
						"          Number4 as decimal(9,2),",
						"          Number5 as decimal(9,2),",
						"          Number6 as decimal(9,2),",
						"          Number7 as decimal(9,2),",
						"          Number8 as decimal(9,2),",
						"          Number9 as decimal(9,2),",
						"          Number10 as decimal(9,2),",
						"          YesNo1 as boolean,",
						"          YesNo2 as boolean,",
						"          YesNo3 as boolean,",
						"          YesNo4 as boolean,",
						"          YesNo5 as boolean,",
						"          YesNo6 as boolean,",
						"          YesNo7 as boolean,",
						"          YesNo8 as boolean,",
						"          YesNo9 as boolean,",
						"          YesNo10 as boolean,",
						"          LinkUrl as string,",
						"          FileName as string,",
						"          ErrorMessage as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TenantCode,",
						"          IntegrationName,",
						"          ADFPipelineName,",
						"          ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey,",
						"          ProcessedRecord,",
						"          Campaign,",
						"          ActivityType,",
						"          DateOfActivity = ActivityDate,",
						"          Code1,",
						"          Code2,",
						"          Code3,",
						"          FileName = SterlingLotteryWinnersInBlobStorage@FileName",
						"     )) ~> DonorfyActivitiesImportStagingTable",
						"derivedTransactionLotteryColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionsImportId as integer,",
						"          TenantCode as string,",
						"          IntegrationName as string,",
						"          ADFPipelineName as string,",
						"          ADFPipelineRunId as string,",
						"          IntegrationSourceConstituentKey as string,",
						"          ProcessedRecord as boolean,",
						"          TransactionNumber1 as integer,",
						"          TransactionNumber2 as integer,",
						"          ExternalKey as string,",
						"          GiftAidFlag as string,",
						"          Campaign as string,",
						"          DateOfTransaction as date,",
						"          Amount as decimal(19,4),",
						"          Product as string,",
						"          PaymentMethod as string,",
						"          BankAccount as string,",
						"          Fund as string,",
						"          Currency as string,",
						"          Reference as string,",
						"          Comments as string,",
						"          SegmentCode as string,",
						"          Channel as string,",
						"          ConnectedConstituentExternalKey as string,",
						"          BeneficiaryConstituentExternalKey as string,",
						"          ConstituentId as string,",
						"          TransactionId1 as string,",
						"          TransactionId2 as string,",
						"          FK_PaymentMethod as string,",
						"          FK_BankAccount as string,",
						"          FK_Product as string,",
						"          FK_Fund as string,",
						"          FK_Currency as string,",
						"          FK_Campaign as string,",
						"          FK_TenantId as string,",
						"          FK_ChannelId as string,",
						"          ConnectedConstituentConstituentId as string,",
						"          BeneficiaryConstituentConstituentId as string,",
						"          Quantity as decimal(9,2),",
						"          FileName as string,",
						"          ProcessingCostsAmount as decimal(19,4),",
						"          ErrorMessage as string,",
						"          Department as string,",
						"          PayoutReference as string,",
						"          IntegrationSourceTransactionKey as string,",
						"          CanRecoverTax as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TenantCode,",
						"          IntegrationName,",
						"          ADFPipelineName,",
						"          ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey,",
						"          ProcessedRecord,",
						"          Amount,",
						"          Product,",
						"          PaymentMethod,",
						"          Fund,",
						"          Campaign,",
						"          BankAccount,",
						"          Department,",
						"          FileName,",
						"          DateOfTransaction,",
						"          IntegrationSourceTransactionKey = RowNumber",
						"     )) ~> DonorfyTransactionsImportStagingTable",
						"derivedWinnerTagColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TagsImportId as integer,",
						"          TenantCode as string,",
						"          IntegrationName as string,",
						"          ADFPipelineName as string,",
						"          ADFPipelineRunId as string,",
						"          IntegrationSourceConstituentKey as string,",
						"          ProcessedRecord as boolean,",
						"          ExternalKey as string,",
						"          DateTagged as date,",
						"          TagIsActive as boolean,",
						"          TagCategory as string,",
						"          TagName as string,",
						"          TagStartDate as date,",
						"          TagEndDate as date,",
						"          Comments as string,",
						"          Code1 as string,",
						"          Code2 as string,",
						"          Code3 as string,",
						"          Code4 as string,",
						"          Code5 as string,",
						"          Code6 as string,",
						"          Code7 as string,",
						"          Code8 as string,",
						"          Code9 as string,",
						"          Code10 as string,",
						"          Date1 as date,",
						"          Date2 as date,",
						"          Date3 as date,",
						"          Date4 as date,",
						"          Date5 as date,",
						"          Date6 as date,",
						"          Date7 as date,",
						"          Date8 as date,",
						"          Date9 as date,",
						"          Date10 as date,",
						"          Number1 as decimal(9,2),",
						"          Number2 as decimal(9,2),",
						"          Number3 as decimal(9,2),",
						"          Number4 as decimal(9,2),",
						"          Number5 as decimal(9,2),",
						"          Number6 as decimal(9,2),",
						"          Number7 as decimal(9,2),",
						"          Number8 as decimal(9,2),",
						"          Number9 as decimal(9,2),",
						"          Number10 as decimal(9,2),",
						"          YesNo1 as boolean,",
						"          YesNo2 as boolean,",
						"          YesNo3 as boolean,",
						"          YesNo4 as boolean,",
						"          YesNo5 as boolean,",
						"          YesNo6 as boolean,",
						"          YesNo7 as boolean,",
						"          YesNo8 as boolean,",
						"          YesNo9 as boolean,",
						"          YesNo10 as boolean,",
						"          ConstituentId as string,",
						"          FK_TagCategoryLookUpTypeRefId as string,",
						"          FK_TagLookUpRefId as string,",
						"          FK_TenantId as string,",
						"          ErrorMessage as string,",
						"          Operation as string,",
						"          SourceSystemInfo as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TenantCode,",
						"          IntegrationName,",
						"          ADFPipelineName,",
						"          ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey,",
						"          TagCategory,",
						"          TagName,",
						"          DateTagged,",
						"          TagStartDate,",
						"          Operation,",
						"          TagIsActive = IsActive,",
						"          ProcessedRecord",
						"     )) ~> DonorfyWinnerTagsImportStagingTable",
						"tagSelfExcludeDerivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TagsImportId as integer,",
						"          TenantCode as string,",
						"          IntegrationName as string,",
						"          ADFPipelineName as string,",
						"          ADFPipelineRunId as string,",
						"          IntegrationSourceConstituentKey as string,",
						"          ProcessedRecord as boolean,",
						"          ExternalKey as string,",
						"          DateTagged as date,",
						"          TagIsActive as boolean,",
						"          TagCategory as string,",
						"          TagName as string,",
						"          TagStartDate as date,",
						"          TagEndDate as date,",
						"          Comments as string,",
						"          Code1 as string,",
						"          Code2 as string,",
						"          Code3 as string,",
						"          Code4 as string,",
						"          Code5 as string,",
						"          Code6 as string,",
						"          Code7 as string,",
						"          Code8 as string,",
						"          Code9 as string,",
						"          Code10 as string,",
						"          Date1 as date,",
						"          Date2 as date,",
						"          Date3 as date,",
						"          Date4 as date,",
						"          Date5 as date,",
						"          Date6 as date,",
						"          Date7 as date,",
						"          Date8 as date,",
						"          Date9 as date,",
						"          Date10 as date,",
						"          Number1 as decimal(9,2),",
						"          Number2 as decimal(9,2),",
						"          Number3 as decimal(9,2),",
						"          Number4 as decimal(9,2),",
						"          Number5 as decimal(9,2),",
						"          Number6 as decimal(9,2),",
						"          Number7 as decimal(9,2),",
						"          Number8 as decimal(9,2),",
						"          Number9 as decimal(9,2),",
						"          Number10 as decimal(9,2),",
						"          YesNo1 as boolean,",
						"          YesNo2 as boolean,",
						"          YesNo3 as boolean,",
						"          YesNo4 as boolean,",
						"          YesNo5 as boolean,",
						"          YesNo6 as boolean,",
						"          YesNo7 as boolean,",
						"          YesNo8 as boolean,",
						"          YesNo9 as boolean,",
						"          YesNo10 as boolean,",
						"          ConstituentId as string,",
						"          FK_TagCategoryLookUpTypeRefId as string,",
						"          FK_TagLookUpRefId as string,",
						"          FK_TenantId as string,",
						"          ErrorMessage as string,",
						"          Operation as string,",
						"          SourceSystemInfo as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TenantCode,",
						"          IntegrationName,",
						"          ADFPipelineName,",
						"          ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey,",
						"          ProcessedRecord,",
						"          TagCategory,",
						"          TagName,",
						"          DateTagged,",
						"          TagStartDate,",
						"          TagIsActive = IsActive,",
						"          Operation",
						"     )) ~> DonorfySelfExcludeTagsImportStagingTable",
						"derivedTransactionDonationColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionAllocationsImportId as integer,",
						"          TenantCode as string,",
						"          IntegrationName as string,",
						"          ADFPipelineName as string,",
						"          ADFPipelineRunId as string,",
						"          IntegrationSourceConstituentKey as string,",
						"          ProcessedRecord as boolean,",
						"          FK_TransactionsImportId as integer,",
						"          Amount as decimal(19,4),",
						"          Product as string,",
						"          Quantity as decimal(9,2),",
						"          Fund as string,",
						"          Department as string,",
						"          AllocationDate as date,",
						"          GiftAidFlag as string,",
						"          Comments as string,",
						"          BeneficiaryConstituentExternalKey as string,",
						"          BeneficiaryConstituentConstituentId as string,",
						"          ExternalKey as string,",
						"          FK_Product as string,",
						"          FK_Fund as string,",
						"          FK_DepartmentId as string,",
						"          FK_Currency as string,",
						"          FK_TenantId as string,",
						"          IntegrationSourceTransactionKey as string,",
						"          CanRecoverTax as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TenantCode,",
						"          IntegrationName,",
						"          ADFPipelineName,",
						"          ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey,",
						"          ProcessedRecord,",
						"          Amount = AllocationAmount,",
						"          Product = AllocationProduct,",
						"          Fund,",
						"          Department,",
						"          AllocationDate = DateOfTransaction,",
						"          IntegrationSourceTransactionKey = RowNumber",
						"     )) ~> DonorfyTransactionAdditionalAllocationssImportStagingTable",
						"derivedGADColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          GADImportId as integer,",
						"          TenantCode as string,",
						"          IntegrationName as string,",
						"          ADFPipelineName as string,",
						"          ADFPipelineRunId as string,",
						"          IntegrationSourceConstituentKey as string,",
						"          ProcessedRecord as boolean,",
						"          DeclarationMethod as string,",
						"          ConstituentId as string,",
						"          Campaign as string,",
						"          DeclarationDate as date,",
						"          DeclarationStartDate as date,",
						"          DeclarationEndDate as date,",
						"          GADCancelled as boolean,",
						"          GADCancelDate as date,",
						"          GADDeclarationId as string,",
						"          TaxPayerTitle as string,",
						"          TaxPayerFirstName as string,",
						"          TaxPayerLastName as string,",
						"          ConfirmationRequired as boolean,",
						"          ErrorMessage as string,",
						"          Operation as string,",
						"          SourceSystemInfo as string,",
						"          ConfirmedDate as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TenantCode,",
						"          IntegrationName,",
						"          ADFPipelineName,",
						"          ADFPipelineRunId,",
						"          IntegrationSourceConstituentKey,",
						"          ProcessedRecord,",
						"          DeclarationMethod,",
						"          Campaign = GADCampaign,",
						"          DeclarationDate,",
						"          TaxPayerTitle = SterlingLotteryGADsInBlobStorage@title,",
						"          TaxPayerFirstName = SterlingLotteryGADsInBlobStorage@firstname,",
						"          TaxPayerLastName = SterlingLotteryGADsInBlobStorage@surname,",
						"          ConfirmationRequired,",
						"          Operation,",
						"          DeclarationStartDate = DeclarationDate,",
						"          DeclarationEndDate",
						"     )) ~> DonorfyGADStagingTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStorageMembers')]",
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStorageWinners')]",
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStoragePayments')]",
				"[concat(variables('factoryId'), '/datasets/SterlingLotteryCSVBlobStorageGAD')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportConstituents')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportPurposes')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportTags')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportActivities')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportTransactions')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportTransactionsAdditionalAllocations')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLImportGADs')]"
			]
		}
	]
}